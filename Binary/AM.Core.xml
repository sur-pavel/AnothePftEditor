<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AM.Core</name>
    </assembly>
    <members>
        <member name="T:AM.ActionUtility">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.ActionUtility.SafeCall(System.Action)">
            <summary>
            Call the <paramref name="action"/> if not <c>null</c>.
            </summary>
        </member>
        <member name="M:AM.ActionUtility.SafeCall``1(System.Action{``0},``0)">
            <summary>
            Call the <paramref name="action"/> if not <c>null</c>.
            </summary>
        </member>
        <member name="M:AM.ActionUtility.SafeCall``2(System.Action{``0,``1},``0,``1)">
            <summary>
            Call the <paramref name="action"/> if not <c>null</c>.
            </summary>
        </member>
        <member name="M:AM.ActionUtility.SafeCall``3(System.Action{``0,``1,``2},``0,``1,``2)">
            <summary>
            Call the <paramref name="action"/> if not <c>null</c>.
            </summary>
        </member>
        <member name="M:AM.ActionUtility.SafeCall``1(System.Func{``0},``0)">
            <summary>
            Call the <paramref name="function"/> if not <c>null</c>.
            </summary>
        </member>
        <member name="M:AM.ActionUtility.SafeCall``2(System.Func{``0,``1},``0,``1)">
            <summary>
            Call the <paramref name="function"/> if not <c>null</c>.
            </summary>
        </member>
        <member name="M:AM.ActionUtility.SafeCall``3(System.Func{``0,``1,``2},``0,``1,``2)">
            <summary>
            Call the <paramref name="function"/> if not <c>null</c>.
            </summary>
        </member>
        <member name="M:AM.ActionUtility.SafeCall``4(System.Func{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            Call the <paramref name="function"/> if not <c>null</c>.
            </summary>
        </member>
        <member name="T:AM.ArrayUtility">
            <summary>
            <see cref="T:System.Array"/> manipulation helper methods.
            </summary>
        </member>
        <member name="M:AM.ArrayUtility.ChangeType``2(``0[])">
            <summary>
            Changes type of given array to the specified type.
            </summary>
            <param name="sourceArray">Source array.</param>
            <typeparam name="TFrom">Type of source array.</typeparam>
            <typeparam name="TTo">Type of destination array.</typeparam>
            <returns>Allocated array with converted items.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sourceArray"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:AM.ArrayUtility.ChangeType``1(System.Array)">
            <summary>
            Changes type of given array to the specified type.
            </summary>
            <param name="sourceArray">Source array.</param>
            <typeparam name="TTo">Type of destination array.</typeparam>
            <returns>Allocated array with converted items.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sourceArray"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:AM.ArrayUtility.Clone``1(``0[])">
            <summary>
            Clone the array.
            </summary>
        </member>
        <member name="M:AM.ArrayUtility.Coincide``1(``0[],System.Int32,``0[],System.Int32,System.Int32)">
            <summary>
            Whether segment of first array
            coincides with segment of second array.
            </summary>
        </member>
        <member name="M:AM.ArrayUtility.Compare``1(``0[],``0[])">
            <summary>
            Compares two specified arrays by elements.
            </summary>
            <param name="firstArray">First array to compare.</param>
            <param name="secondArray">Second array to compare.</param>
            <returns><para>Less than zero - first array is less.</para>
            <para>Zero - arrays are equal.</para>
            <para>Greater than zero - first array is greater.</para>
            </returns>
            <typeparam name="T">Array element type.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="firstArray"/> or 
            <paramref name="secondArray"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">Length of
            <paramref name="firstArray"/> is not equal to length of
            <paramref name="secondArray"/>.
            </exception>
        </member>
        <member name="M:AM.ArrayUtility.Convert``2(``0[])">
            <summary>
            Converts the specified array.
            </summary>
        </member>
        <member name="M:AM.ArrayUtility.Create``1(System.Int32,``0)">
            <summary>
            Creates the array of specified length initializing it with
            specified value.
            </summary>
            <param name="length">Desired length of the array.</param>
            <param name="initialValue">The initial value of
            array items.</param>
            <returns>Created and initialized array.</returns>
            <typeparam name="T">Type of array item.</typeparam>
        </member>
        <member name="M:AM.ArrayUtility.GetOccurrence``1(``0[],System.Int32)">
            <summary>
            Выборка элемента из массива.
            </summary>
            <remarks>
            Возможна отрицательная нумерация
            (означает индекс с конца массива).
            При выходе за границы массива
            выдаётся значение по умолчанию.
            </remarks>
        </member>
        <member name="M:AM.ArrayUtility.GetOccurrence``1(``0[],System.Int32,``0)">
            <summary>
            Выборка элемента из массива.
            </summary>
            <remarks>
            Возможна отрицательная нумерация
            (означает индекс с конца массива).
            При выходе за границы массива
            выдаётся значение по умолчанию.
            </remarks>
        </member>
        <member name="M:AM.ArrayUtility.GetSpan``1(``0[],System.Int32,System.Int32)">
            <summary>
            Get span of the array.
            </summary>
        </member>
        <member name="M:AM.ArrayUtility.GetSpan``1(``0[],System.Int32)">
            <summary>
            Get span of the array.
            </summary>
        </member>
        <member name="M:AM.ArrayUtility.IsNullOrEmpty(System.Array)">
            <summary>
            Determines whether the specified array is null or empty
            (has zero length).
            </summary>
            <param name="array">Array to check.</param>
            <returns><c>true</c> if the array is null or empty;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:AM.ArrayUtility.Merge``1(``0[][])">
            <summary>
            Merges the specified arrays.
            </summary>
            <param name="arrays">Arrays to merge.</param>
            <returns>Array that consists of all <paramref name="arrays"/>
            items.</returns>
            <typeparam name="T">Type of array item.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            At least one of <paramref name="arrays"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:AM.ArrayUtility.SplitArray``1(``0[],System.Int32)">
            <summary>
            Разбиение массива на (почти) равные части.
            </summary>
        </member>
        <member name="M:AM.ArrayUtility.ToString``1(``0[])">
            <summary>
            Converts to string array using
            <see cref="M:System.Object.ToString"/> method.
            </summary>
        </member>
        <member name="T:AM.ArsMagnaException">
            <summary>
            
            </summary>
        </member>
        <member name="T:AM.IAttachmentContainer">
            <summary>
            Container of the attachments.
            </summary>
        </member>
        <member name="M:AM.IAttachmentContainer.ListAttachments">
            <summary>
            List attachments.
            </summary>
        </member>
        <member name="M:AM.ArsMagnaException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.ArsMagnaException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.ArsMagnaException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.ArsMagnaException.Attach(AM.BinaryAttachment)">
            <summary>
            Attach some binary data.
            </summary>
        </member>
        <member name="M:AM.ArsMagnaException.ListAttachments">
            <inheritdoc cref="M:AM.IAttachmentContainer.ListAttachments"/>
        </member>
        <member name="M:AM.ArsMagnaException.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="P:AM.ArsMagnaException.Attachments">
            <summary>
            List of attachments.
            </summary>
        </member>
        <member name="T:AM.AutoDisposeAttribute">
            <summary>
            Mark instance field as auto-disposable.
            </summary>
        </member>
        <member name="T:AM.BinaryAttachment">
            <summary>
            Binary attachment.
            </summary>
        </member>
        <member name="M:AM.BinaryAttachment.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:AM.BinaryAttachment.#ctor(System.String,System.Byte[])">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the attachment.</param>
            <param name="content">Content of the attachment.</param>
        </member>
        <member name="M:AM.BinaryAttachment.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="P:AM.BinaryAttachment.Name">
            <summary>
            Name of the attachment.
            </summary>
        </member>
        <member name="P:AM.BinaryAttachment.Content">
            <summary>
            Content of the attachment.
            </summary>
        </member>
        <member name="T:AM.BooleanUtility">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.BooleanUtility.TryParse(System.String,System.Boolean@)">
            <summary>
            Try parse the boolean value.
            </summary>
            <remarks>
            For WinMobile compatibility.
            </remarks>
        </member>
        <member name="T:AM.Caching.AbstractCache`2">
            <summary>
            Abstract cache.
            </summary>
        </member>
        <member name="M:AM.Caching.AbstractCache`2.Add(`0,`1)">
            <summary>
            Add or update item with given key.
            </summary>
        </member>
        <member name="M:AM.Caching.AbstractCache`2.Clear">
            <summary>
            Clear.
            </summary>
        </member>
        <member name="M:AM.Caching.AbstractCache`2.ContainsKey(`0)">
            <summary>
            Contains given key?
            </summary>
        </member>
        <member name="M:AM.Caching.AbstractCache`2.Get(`0)">
            <summary>
            Get item for given key.
            </summary>
        </member>
        <member name="M:AM.Caching.AbstractCache`2.GetOrRequest(`0)">
            <summary>
            Get or request item for given key.
            </summary>
        </member>
        <member name="M:AM.Caching.AbstractCache`2.Remove(`0)">
            <summary>
            Remove item for specified key.
            </summary>
        </member>
        <member name="P:AM.Caching.AbstractCache`2.Requester">
            <summary>
            Requester.
            </summary>
        </member>
        <member name="P:AM.Caching.AbstractCache`2.UserData">
            <summary>
            Arbitrary user data.
            </summary>
        </member>
        <member name="T:AM.Caching.FileCache`2">
            <summary>
            Cache with file-based item storage.
            </summary>
        </member>
        <member name="M:AM.Caching.FileCache`2.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Caching.FileCache`2.#ctor(System.Boolean)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Caching.FileCache`2.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Caching.FileCache`2.Add(`0,`1)">
            <summary>
            Add or update item with given key.
            </summary>
        </member>
        <member name="M:AM.Caching.FileCache`2.AddAsync(`0,`1)">
            <summary>
            Adds or update item in async way.
            </summary>
        </member>
        <member name="M:AM.Caching.FileCache`2.Clear">
            <summary>
            Clear.
            </summary>
        </member>
        <member name="M:AM.Caching.FileCache`2.ClearAsync">
            <summary>
            Clear in the async way.
            </summary>
        </member>
        <member name="M:AM.Caching.FileCache`2.ContainsKey(`0)">
            <summary>
            Contains given key?
            </summary>
        </member>
        <member name="M:AM.Caching.FileCache`2.Get(`0)">
            <summary>
            Get item for given key.
            </summary>
        </member>
        <member name="M:AM.Caching.FileCache`2.Remove(`0)">
            <summary>
            Remove item for specified key.
            </summary>
        </member>
        <member name="M:AM.Caching.FileCache`2.Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="P:AM.Caching.FileCache`2.CachePath">
            <summary>
            Path to store items.
            </summary>
        </member>
        <member name="P:AM.Caching.FileCache`2.UseCompression">
            <summary>
            Use compression.
            </summary>
        </member>
        <member name="T:AM.Caching.MemoryCache`2">
            <summary>
            Cache base.
            </summary>
        </member>
        <member name="F:AM.Caching.MemoryCache`2.DefaultLifetime">
            <summary>
            Default lifetime, seconds.
            </summary>
        </member>
        <member name="M:AM.Caching.MemoryCache`2.#ctor">
            <summary>
            Dictionary
            </summary>
        </member>
        <member name="M:AM.Caching.MemoryCache`2.Add(`0,`1)">
            <summary>
            Add or update item with given key.
            </summary>
        </member>
        <member name="M:AM.Caching.MemoryCache`2.Cleanup">
            <summary>
            Cleanup.
            </summary>
        </member>
        <member name="M:AM.Caching.MemoryCache`2.Clear">
            <summary>
            Clear.
            </summary>
        </member>
        <member name="M:AM.Caching.MemoryCache`2.ContainsKey(`0)">
            <summary>
            Contains given key?
            </summary>
        </member>
        <member name="M:AM.Caching.MemoryCache`2.Get(`0)">
            <summary>
            Get item for given key.
            </summary>
        </member>
        <member name="M:AM.Caching.MemoryCache`2.Remove(`0)">
            <summary>
            Remove item for specified key.
            </summary>
        </member>
        <member name="M:AM.Caching.MemoryCache`2.RemoveDeadItems">
            <summary>
            Remove dead items.
            </summary>
        </member>
        <member name="M:AM.Caching.MemoryCache`2.RemoveOldItems(System.DateTime)">
            <summary>
            Remove too old items.
            </summary>
        </member>
        <member name="M:AM.Caching.MemoryCache`2.RemoveUnusedItems(System.DateTime)">
            <summary>
            Remove unused items.
            </summary>
        </member>
        <member name="P:AM.Caching.MemoryCache`2.Lifetime">
            <summary>
            Lifetime, seconds.
            </summary>
        </member>
        <member name="T:AM.Caching.CacheItem`2">
            <summary>
            Cache item.
            </summary>
        </member>
        <member name="M:AM.Caching.CacheItem`2.#ctor(`0,`1)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:AM.Caching.CacheItem`2.Created">
            <summary>
            Created.
            </summary>
        </member>
        <member name="P:AM.Caching.CacheItem`2.IsAlive">
            <summary>
            Is alive?
            </summary>
        </member>
        <member name="P:AM.Caching.CacheItem`2.Key">
            <summary>
            Key.
            </summary>
        </member>
        <member name="P:AM.Caching.CacheItem`2.LastUsed">
            <summary>
            Last used.
            </summary>
        </member>
        <member name="P:AM.Caching.CacheItem`2.UsageCount">
            <summary>
            Usage count.
            </summary>
        </member>
        <member name="P:AM.Caching.CacheItem`2.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="T:AM.CancelableEventArgs">
            <summary>
            <see cref="T:System.EventArgs"/> for cancelable
            handling.
            </summary>
        </member>
        <member name="M:AM.CancelableEventArgs.Handle(System.Object,AM.CancelableEventHandler)">
            <summary>
            Handles the event with specified sender and handler.
            </summary>
            <param name="sender">The sender.</param>
            <param name="handler">The handler.</param>
            <returns><c>true</c> if handling was canceled,
            <c>false</c> otherwise.</returns>
        </member>
        <member name="P:AM.CancelableEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether
            event handling must be canceled.
            </summary>
            <value><c>true</c> if cancel; 
            otherwise, <c>false</c>.</value>
        </member>
        <member name="T:AM.CancelableEventHandler">
            <summary>
            Handler of event whose handling can be cancelled.
            </summary>
            <param name="sender"></param>
            <param name="ea"></param>
        </member>
        <member name="T:AM.CharUtility">
            <summary>
            Helpers for <see cref="T:System.Char"/>.
            </summary>
        </member>
        <member name="M:AM.CharUtility.IsArabicDigit(System.Char)">
            <summary>
            Is digit from 0 to 9?
            </summary>
        </member>
        <member name="M:AM.CharUtility.IsLatinLetter(System.Char)">
            <summary>
            Is letter from A to Z or a to z?
            </summary>
        </member>
        <member name="M:AM.CharUtility.IsLatinLetterOrArabicDigit(System.Char)">
            <summary>
            Is digit from 0 to 9
            or letter from A to Z or a to z?
            </summary>
        </member>
        <member name="M:AM.CharUtility.IsRussianLetter(System.Char)">
            <summary>
            Is letter from А to Я or а to я?
            </summary>
        </member>
        <member name="M:AM.CharUtility.ToUpperInvariant(System.Char)">
            <summary>
            Convert the character to upper case.
            </summary>
        </member>
        <member name="T:AM.Collections.BidirectionalDictionary`2">
            <summary>
            Bidirectional key-to-value mapping.
            </summary>
        </member>
        <member name="M:AM.Collections.BidirectionalDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the 
            <see cref="T:AM.Collections.BidirectionalDictionary`2"/> 
            class.
            </summary>
        </member>
        <member name="M:AM.Collections.BidirectionalDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Initializes a new instance of the 
            <see cref="T:AM.Collections.BidirectionalDictionary`2"/> 
            class.
            </summary>
            <param name="straightComparer">The straight comparer.
            </param>
            <param name="reverseComparer">The reverse comparer.
            </param>
        </member>
        <member name="M:AM.Collections.BidirectionalDictionary`2._Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds the key-value pair to the dictionary.
            </summary>
            <param name="item">Key-value pair.</param>
        </member>
        <member name="M:AM.Collections.BidirectionalDictionary`2._Add(`0,`1)">
            <summary>
            Adds specified key and value to the dictionary.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:AM.Collections.BidirectionalDictionary`2._Clear">
            <summary>
            Clears the dictionary.
            </summary>
        </member>
        <member name="M:AM.Collections.BidirectionalDictionary`2._Contains(System.Collections.Generic.KeyValuePair{`0,`1}@)">
            <summary>
            Determines whether given key exists in the dictionary.
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if the dictionary contains
            specified key; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AM.Collections.BidirectionalDictionary`2._ContainsKey(`0)">
            <summary>
            Determines whether given key exists in the dictionary.
            </summary>
            <param name="key">The key.</param>
            <returns><c>true</c> if the dictionary contains
            specified key; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AM.Collections.BidirectionalDictionary`2._CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies key-value pairs to specified array starting with
            given index.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:AM.Collections.BidirectionalDictionary`2._Count">
            <summary>
            Gets count of key-value pairs in the dictionary. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:AM.Collections.BidirectionalDictionary`2._Get(`0)">
            <summary>
            Gets the associated value for given key.
            </summary>
            <param name="key">The key.</param>
            <returns>Associated value.</returns>
        </member>
        <member name="M:AM.Collections.BidirectionalDictionary`2._GetEnumerator">
            <summary>
            Gets the enumerator for the dictionary.
            </summary>
            <returns>The enumerator for the dictionary</returns>
        </member>
        <member name="M:AM.Collections.BidirectionalDictionary`2._Keys">
            <summary>
            _s the keys.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AM.Collections.BidirectionalDictionary`2._Remove(`0)">
            <summary>
            Removes the specified key and associated value 
            from the dictionary.
            </summary>
            <param name="key">The key.</param>
            <returns><c>true</c> if key and value was removed;
            <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AM.Collections.BidirectionalDictionary`2._Remove(System.Collections.Generic.KeyValuePair{`0,`1}@)">
            <summary>
            Removes the specified key and associated value 
            from the dictionary.
            </summary>
            <param name="item">The key.</param>
            <returns><c>true</c> if key and value was removed;
            <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AM.Collections.BidirectionalDictionary`2._Set(`0,`1)">
            <summary>
            Associates the specified value with given key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:AM.Collections.BidirectionalDictionary`2._TryGetValue(`0,`1@)">
            <summary>
            Tries to get associated value for given key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if key exists;
            <c>false</c> otherwise.</returns>
        </member>
        <member name="M:AM.Collections.BidirectionalDictionary`2._Values">
            <summary>
            Gets associated values collection.
            </summary>
            <returns>Collection of associated values.</returns>
        </member>
        <member name="M:AM.Collections.BidirectionalDictionary`2.AsReadOnly">
            <summary>
            Gets read-only shallow copy of the 
            <see cref="T:AM.Collections.BidirectionalDictionary`2"/>.
            </summary>
            <returns>Read-only shallow copy of the dictionary.</returns>
        </member>
        <member name="M:AM.Collections.BidirectionalDictionary`2.ContainsValue(`1)">
            <summary>
            Determines whether the <see cref="T:AM.Collections.BidirectionalDictionary`2"/> 
            contains given value.
            </summary>
            <param name="value">Value to check.</param>
            <returns>
            <c>true</c> if the dictionary contains value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:AM.Collections.BidirectionalDictionary`2.GetKey(`1)">
            <summary>
            Gets the associated key for given value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Specified <paramref name="value"/> not found.
            </exception>
        </member>
        <member name="M:AM.Collections.BidirectionalDictionary`2.TryGetKey(`1,`0@)">
            <summary>
            Gets the key associated with the specified value.
            </summary>
            <param name="value">The value of the key to get.</param>
            <param name="key">When this method returns, contains the 
            key associated with the specified value, if the one is found; 
            otherwise, the default value for the type of the key parameter. 
            This parameter is passed uninitialized.</param>
            <returns><c>true</c> if the 
            <see cref="T:AM.Collections.BidirectionalDictionary`2"/> 
            contains an element with the specified key; otherwise, 
            <c>false</c>.</returns>
        </member>
        <member name="M:AM.Collections.BidirectionalDictionary`2.Add(`0,`1)">
            <inheritdoc cref="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)"/>
        </member>
        <member name="M:AM.Collections.BidirectionalDictionary`2.ContainsKey(`0)">
            <inheritdoc cref="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)"/>
        </member>
        <member name="M:AM.Collections.BidirectionalDictionary`2.Remove(`0)">
            <inheritdoc cref="M:System.Collections.Generic.IDictionary`2.Remove(`0)"/>
        </member>
        <member name="M:AM.Collections.BidirectionalDictionary`2.TryGetValue(`0,`1@)">
            <inheritdoc cref="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:AM.Collections.BidirectionalDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/>
        </member>
        <member name="M:AM.Collections.BidirectionalDictionary`2.Clear">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.Clear"/>
        </member>
        <member name="M:AM.Collections.BidirectionalDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.Contains(`0)"/>
        </member>
        <member name="M:AM.Collections.BidirectionalDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)"/>
        </member>
        <member name="M:AM.Collections.BidirectionalDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.Remove(`0)"/>
        </member>
        <member name="M:AM.Collections.BidirectionalDictionary`2.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:AM.Collections.BidirectionalDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="M:AM.Collections.BidirectionalDictionary`2.Clone">
            <inheritdoc cref="M:System.ICloneable.Clone"/>
        </member>
        <member name="P:AM.Collections.BidirectionalDictionary`2.Item(`0)">
            <inheritdoc cref="P:System.Collections.Generic.IDictionary`2.Item(`0)"/>
        </member>
        <member name="P:AM.Collections.BidirectionalDictionary`2.Keys">
            <inheritdoc cref="P:System.Collections.Generic.IDictionary`2.Keys"/>
        </member>
        <member name="P:AM.Collections.BidirectionalDictionary`2.Values">
            <inheritdoc cref="P:System.Collections.Generic.IDictionary`2.Values"/>
        </member>
        <member name="P:AM.Collections.BidirectionalDictionary`2.Count">
            <inheritdoc cref="P:System.Collections.Generic.ICollection`1.Count"/>
        </member>
        <member name="P:AM.Collections.BidirectionalDictionary`2.IsReadOnly">
            <inheritdoc cref="P:System.Collections.Generic.ICollection`1.IsReadOnly"/>
        </member>
        <member name="T:AM.Collections.BitArrayUtility">
            <summary>
            Helper methods for <see cref="T:System.Collections.BitArray"/> class.
            </summary>
        </member>
        <member name="M:AM.Collections.BitArrayUtility.AreEqual(System.Collections.BitArray,System.Collections.BitArray)">
            <summary>
            Compares two <see cref="T:System.Collections.BitArray"/>s.
            </summary>
        </member>
        <member name="T:AM.Collections.BlockingQueue`1">
            <summary>
            
            </summary>
            <remarks>Borrowed from Tom DuPont:
            http://www.tomdupont.net/2012/06/net-blockingqueue.html
            </remarks>
        </member>
        <member name="M:AM.Collections.BlockingQueue`1.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Collections.BlockingQueue`1.HandleException(System.Exception)">
            <summary>
            Handle the exception.
            </summary>
        </member>
        <member name="M:AM.Collections.BlockingQueue`1.ProcessModel(`0)">
            <summary>
            Process the model.
            </summary>
        </member>
        <member name="M:AM.Collections.BlockingQueue`1.Enqueue(`0)">
            <summary>
            Enqueue.
            </summary>
        </member>
        <member name="M:AM.Collections.BlockingQueue`1.Cancel">
            <summary>
            Cancel.
            </summary>
        </member>
        <member name="M:AM.Collections.BlockingQueue`1.CancelAndWait">
            <summary>
            Cancel and wait.
            </summary>
        </member>
        <member name="M:AM.Collections.BlockingQueue`1.Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:AM.Collections.BlockingQueue`1.Dispose(System.Boolean)">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="P:AM.Collections.BlockingQueue`1.Count">
            <summary>
            Count.
            </summary>
        </member>
        <member name="P:AM.Collections.BlockingQueue`1.IsCanceled">
            <summary>
            Is canceled?
            </summary>
        </member>
        <member name="P:AM.Collections.BlockingQueue`1.IsCompleted">
            <summary>
            Is completed?
            </summary>
        </member>
        <member name="T:AM.Collections.CaseInsensitiveDictionary`1">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Collections.CaseInsensitiveDictionary`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Collections.CaseInsensitiveDictionary`1.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Collections.CaseInsensitiveDictionary`1.#ctor(System.Collections.Generic.IDictionary{System.String,`0})">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Collections.CaseInsensitiveDictionary`1._GetComparer">
            <summary>
            Get comparer for the dictionary.
            </summary>
        </member>
        <member name="T:AM.Collections.CharSet">
            <summary>
            Character set.
            </summary>
        </member>
        <member name="T:AM.Runtime.IHandmadeSerializable">
            <summary>
            Объект умеет сохраняться в поток и восстанавливаться из него.
            </summary>
        </member>
        <member name="M:AM.Runtime.IHandmadeSerializable.RestoreFromStream(System.IO.BinaryReader)">
            <summary>
            Просим объект восстановить свое состояние из потока.
            </summary>
        </member>
        <member name="M:AM.Runtime.IHandmadeSerializable.SaveToStream(System.IO.BinaryWriter)">
            <summary>
            Просим объект сохранить себя в потоке.
            </summary>
        </member>
        <member name="F:AM.Collections.CharSet.DefaultCapacity">
            <summary>
            Default capacity of <see cref="T:AM.Collections.CharSet"/>.
            </summary>
        </member>
        <member name="M:AM.Collections.CharSet.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Collections.CharSet.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Collections.CharSet.#ctor(System.Collections.BitArray)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Collections.CharSet.#ctor(AM.Collections.CharSet)">
            <summary>
            Copy constructor.
            </summary>
        </member>
        <member name="M:AM.Collections.CharSet.#ctor(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Collections.CharSet.#ctor(System.Char[])">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Collections.CharSet.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Collections.CharSet.Add(System.Char)">
            <summary>
            Add a character.
            </summary>
        </member>
        <member name="M:AM.Collections.CharSet.Add(System.Char[])">
            <summary>
            Add some characters.
            </summary>
        </member>
        <member name="M:AM.Collections.CharSet.Add(System.String)">
            <summary>
            Add some characters.
            </summary>
        </member>
        <member name="M:AM.Collections.CharSet.AddRange(System.Char,System.Char)">
            <summary>
            Add range of characters.
            </summary>
        </member>
        <member name="M:AM.Collections.CharSet.And(AM.Collections.CharSet)">
            <summary>
            Logical multiplication.
            </summary>
        </member>
        <member name="M:AM.Collections.CharSet.CheckText(System.String)">
            <summary>
            Check the string for characters not included in the charset.
            </summary>
        </member>
        <member name="M:AM.Collections.CharSet.Clear">
            <summary>
            Clear the <see cref="T:AM.Collections.CharSet"/>.
            </summary>
        </member>
        <member name="M:AM.Collections.CharSet.Clone">
            <summary>
            Create clone of the <see cref="T:AM.Collections.CharSet"/>.
            </summary>
        </member>
        <member name="M:AM.Collections.CharSet.Contains(System.Char)">
            <summary>
            Determines whether the <see cref="T:AM.Collections.CharSet"/>
            contains given character.
            </summary>
        </member>
        <member name="M:AM.Collections.CharSet.Not">
            <summary>
            Invert.
            </summary>
        </member>
        <member name="M:AM.Collections.CharSet.Or(AM.Collections.CharSet)">
            <summary>
            Logical addition.
            </summary>
        </member>
        <member name="M:AM.Collections.CharSet.Remove(System.Char)">
            <summary>
            Remove a character.
            </summary>
        </member>
        <member name="M:AM.Collections.CharSet.Remove(System.Char[])">
            <summary>
            Remove some characters.
            </summary>
        </member>
        <member name="M:AM.Collections.CharSet.Remove(System.String)">
            <summary>
            Remove some characters.
            </summary>
        </member>
        <member name="M:AM.Collections.CharSet.RemoveRange(System.Char,System.Char)">
            <summary>
            Remove range of characters.
            </summary>
        </member>
        <member name="M:AM.Collections.CharSet.SetAll(System.Boolean)">
            <summary>
            Set all characters to the <paramref name="state"/>.
            </summary>
        </member>
        <member name="M:AM.Collections.CharSet.ToArray">
            <summary>
            Create array of characters.
            </summary>
        </member>
        <member name="M:AM.Collections.CharSet.Xor(AM.Collections.CharSet)">
            <summary>
            Logical XOR.
            </summary>
        </member>
        <member name="M:AM.Collections.CharSet.op_Addition(AM.Collections.CharSet,AM.Collections.CharSet)">
            <summary>
            Logical addition.
            </summary>
        </member>
        <member name="M:AM.Collections.CharSet.op_Addition(AM.Collections.CharSet,System.String)">
            <summary>
            Logical addition.
            </summary>
        </member>
        <member name="M:AM.Collections.CharSet.op_Addition(AM.Collections.CharSet,System.Char)">
            <summary>
            Logical addition.
            </summary>
        </member>
        <member name="M:AM.Collections.CharSet.op_Subtraction(AM.Collections.CharSet,AM.Collections.CharSet)">
            <summary>
            Logical subtraction.
            </summary>
        </member>
        <member name="M:AM.Collections.CharSet.op_Subtraction(AM.Collections.CharSet,System.String)">
            <summary>
            Logical subtraction.
            </summary>
        </member>
        <member name="M:AM.Collections.CharSet.op_Subtraction(AM.Collections.CharSet,System.Char)">
            <summary>
            Logical subtraction.
            </summary>
        </member>
        <member name="M:AM.Collections.CharSet.op_Multiply(AM.Collections.CharSet,AM.Collections.CharSet)">
            <summary>
            Logical multiplication.
            </summary>
        </member>
        <member name="M:AM.Collections.CharSet.op_Multiply(AM.Collections.CharSet,System.String)">
            <summary>
            Logical multiplication.
            </summary>
        </member>
        <member name="M:AM.Collections.CharSet.RestoreFromStream(System.IO.BinaryReader)">
            <inheritdoc cref="M:AM.Runtime.IHandmadeSerializable.RestoreFromStream(System.IO.BinaryReader)"/>
        </member>
        <member name="M:AM.Collections.CharSet.SaveToStream(System.IO.BinaryWriter)">
            <inheritdoc cref="M:AM.Runtime.IHandmadeSerializable.SaveToStream(System.IO.BinaryWriter)"/>
        </member>
        <member name="M:AM.Collections.CharSet.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="M:AM.Collections.CharSet.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:AM.Collections.CharSet.Equals(AM.Collections.CharSet)">
            <inheritdoc cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:AM.Collections.CharSet.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:AM.Collections.CharSet.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:AM.Collections.CharSet.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="P:AM.Collections.CharSet.Item(System.Char)">
            <summary>
             Indexer.
            </summary>
        </member>
        <member name="P:AM.Collections.CharSet.Count">
            <summary>
            Count of elements.
            </summary>
        </member>
        <member name="M:AM.Collections.CharSet.CharSetEnumerator.#ctor(AM.Collections.CharSet)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Collections.CharSet.CharSetEnumerator.Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:AM.Collections.CharSet.CharSetEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element
            of the collection.
            </summary>
            <returns>true if the enumerator was successfully
            advanced to the next element; false
            if the enumerator has passed the end
            of the collection.</returns>
        </member>
        <member name="M:AM.Collections.CharSet.CharSetEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position,
            which is before the first element in the collection.
            </summary>
        </member>
        <member name="P:AM.Collections.CharSet.CharSetEnumerator.System#Collections#Generic#IEnumerator{System#Char}#Current">
            <summary>
            Gets the element in the collection
            at the current position of the enumerator.
            </summary>
        </member>
        <member name="P:AM.Collections.CharSet.CharSetEnumerator.Current">
            <summary>
            Gets the element in the collection
            at the current position of the enumerator.
            </summary>
        </member>
        <member name="T:AM.Collections.CharSet.CharSetConverter">
            <summary>
            Converter for JSON serialization.
            </summary>
        </member>
        <member name="M:AM.Collections.CharSet.CharSetConverter.#ctor(System.Type[])">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Collections.CharSet.CharSetConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
        </member>
        <member name="M:AM.Collections.CharSet.CharSetConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
        </member>
        <member name="M:AM.Collections.CharSet.CharSetConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert
            the specified object type.
            </summary>
        </member>
        <member name="T:AM.Collections.CloneableCollection`1">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Collections.CloneableCollection`1.Clone">
            <inheritdoc cref="M:System.ICloneable.Clone"/>
        </member>
        <member name="T:AM.Collections.CloneableDictionary`2">
            <summary>
            Cloneable dictionary.
            </summary>
        </member>
        <member name="M:AM.Collections.CloneableDictionary`2.Clone">
            <inheritdoc cref="M:System.ICloneable.Clone"/>
        </member>
        <member name="T:AM.Collections.DictionaryCounterDouble`1">
            <summary>
            Simple dictionary to count values.
            </summary>
        </member>
        <member name="M:AM.Collections.DictionaryCounterDouble`1.#ctor">
            <summary>
            Initializes a new instance of the 
            <see cref="T:AM.Collections.DictionaryCounterDouble`1"/> class.
            </summary>
        </member>
        <member name="M:AM.Collections.DictionaryCounterDouble`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:AM.Collections.DictionaryCounterDouble`1"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:AM.Collections.DictionaryCounterDouble`1.#ctor(AM.Collections.DictionaryCounterDouble{`0})">
            <summary>
            Initializes a new instance of the 
            <see cref="T:AM.Collections.DictionaryCounterDouble`1"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:AM.Collections.DictionaryCounterDouble`1.Augment(`0,System.Double)">
            <summary>
            Augments the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="increment">The value.</param>
            <returns>New value for given key.</returns>
        </member>
        <member name="M:AM.Collections.DictionaryCounterDouble`1.GetValue(`0)">
            <summary>
            Get accumulated value for the specified key.
            </summary>
        </member>
        <member name="M:AM.Collections.DictionaryCounterDouble`1.Increment(`0)">
            <summary>
            Increment the specified key.
            </summary>
        </member>
        <member name="P:AM.Collections.DictionaryCounterDouble`1.Total">
            <summary>
            Gets the total.
            </summary>
        </member>
        <member name="T:AM.Collections.DictionaryCounterInt32`1">
            <summary>
            Simple dictionary to count values.
            </summary>
        </member>
        <member name="M:AM.Collections.DictionaryCounterInt32`1.#ctor">
            <summary>
            Initializes a new instance of the 
            <see cref="T:AM.Collections.DictionaryCounterInt32`1"/> class.
            </summary>
        </member>
        <member name="M:AM.Collections.DictionaryCounterInt32`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the
            <see cref="T:AM.Collections.DictionaryCounterInt32`1"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:AM.Collections.DictionaryCounterInt32`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:AM.Collections.DictionaryCounterInt32`1"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:AM.Collections.DictionaryCounterInt32`1.#ctor(AM.Collections.DictionaryCounterInt32{`0})">
            <summary>
            Initializes a new instance of the 
            <see cref="T:AM.Collections.DictionaryCounterInt32`1"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:AM.Collections.DictionaryCounterInt32`1.Augment(`0,System.Int32)">
            <summary>
            Augments the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="increment">The value.</param>
            <returns>New value for given key.</returns>
        </member>
        <member name="M:AM.Collections.DictionaryCounterInt32`1.GetValue(`0)">
            <summary>
            Get accumulated value for the specified key.
            </summary>
        </member>
        <member name="M:AM.Collections.DictionaryCounterInt32`1.Increment(`0)">
            <summary>
            Increment the specified key.
            </summary>
        </member>
        <member name="P:AM.Collections.DictionaryCounterInt32`1.Total">
            <summary>
            Gets the total.
            </summary>
        </member>
        <member name="T:AM.Collections.DictionaryList`2">
            <summary>
            Hybrid of Dictionary and List.
            </summary>
        </member>
        <member name="M:AM.Collections.DictionaryList`2.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Collections.DictionaryList`2.Add(`0,`1)">
            <summary>
            Add an item.
            </summary>
        </member>
        <member name="M:AM.Collections.DictionaryList`2.AddRange(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Add some items with one key.
            </summary>
        </member>
        <member name="M:AM.Collections.DictionaryList`2.Clear">
            <summary>
            Clear.
            </summary>
        </member>
        <member name="M:AM.Collections.DictionaryList`2.GetValues(`0)">
            <summary>
            Get values for specified key.
            </summary>
        </member>
        <member name="M:AM.Collections.DictionaryList`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" />
            object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:AM.Collections.DictionaryList`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" />
            that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:AM.Collections.DictionaryList`2.Count">
            <summary>
            Number of keys.
            </summary>
        </member>
        <member name="P:AM.Collections.DictionaryList`2.Keys">
            <summary>
            Keys.
            </summary>
        </member>
        <member name="P:AM.Collections.DictionaryList`2.Item(`0)">
            <summary>
            Array of values for specified key.
            </summary>
        </member>
        <member name="T:AM.Collections.DictionaryListUtility">
            <summary>
            Useful routines for <see cref="T:AM.Collections.DictionaryList`2"/>.
            </summary>
        </member>
        <member name="M:AM.Collections.DictionaryListUtility.RestoreFromStream``2(AM.Collections.DictionaryList{``0,``1},System.IO.BinaryReader)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Collections.DictionaryListUtility.SaveToStream``2(AM.Collections.DictionaryList{``0,``1},System.IO.BinaryWriter)">
            <summary>
            
            </summary>
        </member>
        <member name="T:AM.Collections.DictionaryUtility">
            <summary>
            <see cref="T:System.Collections.Generic.Dictionary`2"/> manipulation
            helper methods.
            </summary>
        </member>
        <member name="M:AM.Collections.DictionaryUtility.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Get value for the key or the default value.
            </summary>
        </member>
        <member name="M:AM.Collections.DictionaryUtility.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Get value for the key or default value.
            </summary>
        </member>
        <member name="M:AM.Collections.DictionaryUtility.MergeWithConflicts``2(System.Collections.Generic.Dictionary{``0,``1}[])">
            <summary>
            Merges the specified dictionaries.
            </summary>
            <param name="dictionaries">Dictionaries to merge.</param>
            <returns>Merged dictionary.</returns>
            <exception cref="T:System.ArgumentNullException">
            One or more dictionaries is <c>null</c>.
            </exception>
        </member>
        <member name="M:AM.Collections.DictionaryUtility.MergeWithoutConflicts``2(System.Collections.Generic.Dictionary{``0,``1}[])">
            <summary>
            Merges the specified dictionaries.
            </summary>
            <param name="dictionaries">Dictionaries to merge.</param>
            <returns>Merged dictionary.</returns>
            <exception cref="T:System.ArgumentNullException">
            One or more dictionaries is <c>null</c>.
            </exception>
        </member>
        <member name="M:AM.Collections.DictionaryUtility.MergeLastValues``2(System.Collections.Generic.Dictionary{``0,``1}[])">
            <summary>
            Merges the specified dictionaries.
            </summary>
            <param name="dictionaries">Dictionaries to merge.</param>
            <returns>Merged dictionary.</returns>
            <exception cref="T:System.ArgumentNullException">
            One or more dictionaries is <c>null</c>.
            </exception>
        </member>
        <member name="T:AM.Collections.DisposableCollection`1">
            <summary>
            Collection of disposable objects.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:AM.Collections.DisposableCollection`1.Finalize">
            <summary>
            Finalize.
            </summary>
        </member>
        <member name="M:AM.Collections.DisposableCollection`1.Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="T:AM.Collections.DoublyLinkedList`1">
            <summary>
            Дважды-связанный список
            </summary>
        </member>
        <member name="M:AM.Collections.DoublyLinkedList`1._NodeAt(System.Int32)">
            <summary>
            Get node at specified index.
            </summary>
        </member>
        <member name="M:AM.Collections.DoublyLinkedList`1._CreateNode(`0)">
            <summary>
            _s the create node.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:AM.Collections.DoublyLinkedList`1.IndexOf(`0)">
            <inheritdoc cref="M:System.Collections.Generic.IList`1.IndexOf(`0)"/>
        </member>
        <member name="M:AM.Collections.DoublyLinkedList`1.Insert(System.Int32,`0)">
            <inheritdoc cref="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)"/>
        </member>
        <member name="M:AM.Collections.DoublyLinkedList`1.RemoveAt(System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)"/>
        </member>
        <member name="M:AM.Collections.DoublyLinkedList`1.Add(`0)">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/>
        </member>
        <member name="M:AM.Collections.DoublyLinkedList`1.Clear">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.Clear"/>
        </member>
        <member name="M:AM.Collections.DoublyLinkedList`1.Contains(`0)">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.Contains(`0)"/>
        </member>
        <member name="M:AM.Collections.DoublyLinkedList`1.CopyTo(`0[],System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)"/>
        </member>
        <member name="M:AM.Collections.DoublyLinkedList`1.Remove(`0)">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.Remove(`0)"/>
        </member>
        <member name="M:AM.Collections.DoublyLinkedList`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="M:AM.Collections.DoublyLinkedList`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="P:AM.Collections.DoublyLinkedList`1.FirstNode">
            <summary>
            Первый элемент.
            </summary>
        </member>
        <member name="P:AM.Collections.DoublyLinkedList`1.LastNode">
            <summary>
            Последний элемент.
            </summary>
        </member>
        <member name="P:AM.Collections.DoublyLinkedList`1.Item(System.Int32)">
            <inheritdoc cref="P:System.Collections.Generic.IList`1.Item(System.Int32)"/>
        </member>
        <member name="P:AM.Collections.DoublyLinkedList`1.Count">
            <inheritdoc cref="P:System.Collections.Generic.ICollection`1.Count"/>
        </member>
        <member name="P:AM.Collections.DoublyLinkedList`1.IsReadOnly">
            <inheritdoc cref="P:System.Collections.Generic.ICollection`1.IsReadOnly"/>
        </member>
        <member name="T:AM.Collections.DoublyLinkedList`1.Node`1">
            <summary>
            Элемент дважды-связанного списка.
            </summary>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="M:AM.Collections.DoublyLinkedList`1.Node`1.#ctor(`1)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Collections.DoublyLinkedList`1.Node`1.ToString">
            <inheritdoc/>
        </member>
        <member name="P:AM.Collections.DoublyLinkedList`1.Node`1.List">
            <summary>
            Список-владелец.
            </summary>
            <value></value>
        </member>
        <member name="P:AM.Collections.DoublyLinkedList`1.Node`1.Previous">
            <summary>
            Предыдущий элемент.
            </summary>
            <value></value>
        </member>
        <member name="P:AM.Collections.DoublyLinkedList`1.Node`1.Next">
            <summary>
            Последующий элемент.
            </summary>
            <value></value>
        </member>
        <member name="P:AM.Collections.DoublyLinkedList`1.Node`1.Value">
            <summary>
            Хранимое значение.
            </summary>
            <value></value>
        </member>
        <member name="T:AM.Collections.IIndexable`1">
            <summary>
            Indexable object interface.
            </summary>
        </member>
        <member name="P:AM.Collections.IIndexable`1.Item(System.Int32)">
            <summary>
            Gets item at the specified index.
            </summary>
        </member>
        <member name="P:AM.Collections.IIndexable`1.Count">
            <summary>
            Gets the count of items.
            </summary>
        </member>
        <member name="T:AM.Collections.KeyedCollection`2">
            <summary>
            Collection with key=value support.
            </summary>
        </member>
        <member name="M:AM.Collections.KeyedCollection`2.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Collections.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Collections.KeyedCollection`2.Add(`0,`1)">
            <summary>
            Adds an object to the end of the
            <see cref="T:AM.Collections.KeyedCollection`2"/>.
            </summary>
        </member>
        <member name="M:AM.Collections.KeyedCollection`2.AddOrReplace(`0,`1)">
            <summary>
            Add or replace element.
            </summary>
        </member>
        <member name="M:AM.Collections.KeyedCollection`2.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:AM.Collections.KeyedCollection`2.Contains(`0)">
            <summary>
            Determines whether the collection contains
            an element with the specified key.
            </summary>
        </member>
        <member name="M:AM.Collections.KeyedCollection`2.GetElement(`0)">
            <summary>
            Get first matching element for the key.
            </summary>
            <returns><c>null</c> if no matching element found.
            </returns>
        </member>
        <member name="M:AM.Collections.KeyedCollection`2.GetValues(`0)">
            <summary>
            Get all matching elements for the key.
            </summary>
        </member>
        <member name="M:AM.Collections.KeyedCollection`2.Remove(`0)">
            <summary>
            Remove all matching elements with specified key.
            </summary>
        </member>
        <member name="M:AM.Collections.KeyedCollection`2.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="P:AM.Collections.KeyedCollection`2.Comparer">
            <summary>
            Gets the generic equality comparer that
            is used to determine equality of keys
            in the collection.
            </summary>
        </member>
        <member name="P:AM.Collections.KeyedCollection`2.Count">
            <summary>
            Gets the number of elements actually contained
            in the <see cref="T:AM.Collections.KeyedCollection`2"/>.
            </summary>
        </member>
        <member name="P:AM.Collections.KeyedCollection`2.Item(`0)">
            <summary>
            Gets the element with the specified key.
            </summary>
        </member>
        <member name="P:AM.Collections.KeyedCollection`2.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
        </member>
        <member name="T:AM.Collections.KeyedCollection`2.Element">
            <summary>
            Collection item.
            </summary>
        </member>
        <member name="M:AM.Collections.KeyedCollection`2.Element.#ctor(`0,`1)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Collections.KeyedCollection`2.Element.ToString">
            <inheritdoc />
        </member>
        <member name="P:AM.Collections.KeyedCollection`2.Element.Key">
            <summary>
            Key.
            </summary>
        </member>
        <member name="P:AM.Collections.KeyedCollection`2.Element.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="T:AM.Collections.ListUtility">
            <summary>
            Useful routines for <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <remarks>Borrowed from Json.NET.</remarks>
        </member>
        <member name="M:AM.Collections.ListUtility.AddDistinct``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Add to list if don't have yet.
            </summary>
        </member>
        <member name="M:AM.Collections.ListUtility.AddDistinct``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Add to list if don't have yet.
            </summary>
        </member>
        <member name="M:AM.Collections.ListUtility.AddRangeDistinct``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Collections.ListUtility.ContainsValue``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Collections.ListUtility.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Collections.ListUtility.IsNullOrEmpty``1(System.Collections.Generic.IList{``0})">
            <summary>
            Is the list is <c>null</c> or empty?
            </summary>
        </member>
        <member name="M:AM.Collections.ListUtility.ThrowIfNullOrEmpty``1(System.Collections.Generic.IList{``0})">
            <summary>
            Throw <see cref="T:System.ArgumentNullException"/>
            if the list is <c>null</c> or empty.
            </summary>
        </member>
        <member name="M:AM.Collections.ListUtility.ThrowIfNullOrEmpty``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            Throw <see cref="T:System.ArgumentNullException"/>
            if the list is <c>null</c> or empty.
            </summary>
        </member>
        <member name="M:AM.Collections.ListUtility.ThrowIfNullOrEmpty``1(``0[])">
            <summary>
            Throw <see cref="T:System.ArgumentNullException"/>
            if the array is <c>null</c> or empty.
            </summary>
        </member>
        <member name="M:AM.Collections.ListUtility.ThrowIfNullOrEmpty``1(``0[],System.String)">
            <summary>
            Throw <see cref="T:System.ArgumentNullException"/>
            if the array is <c>null</c> or empty.
            </summary>
        </member>
        <member name="T:AM.Collections.NonEmptyStringCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Collections.NonEmptyStringCollection.InsertItem(System.Int32,System.String)">
            <inheritdoc cref="M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)"/>
        </member>
        <member name="M:AM.Collections.NonEmptyStringCollection.SetItem(System.Int32,System.String)">
            <inheritdoc cref="M:System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)"/>
        </member>
        <member name="T:AM.Collections.NonNullCollection`1">
            <summary>
            <see cref="T:System.Collections.ObjectModel.Collection`1"/> with items that can't be <c>null</c>.
            </summary>
        </member>
        <member name="M:AM.Collections.NonNullCollection`1.AddCapacity(System.Int32)">
            <summary>
            Add capacity to eliminate reallocations.
            </summary>
        </member>
        <member name="M:AM.Collections.NonNullCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add several elements to the collection.
            </summary>
        </member>
        <member name="M:AM.Collections.NonNullCollection`1.AddRange(`0[])">
            <summary>
            Add several elements to the collection.
            </summary>
        </member>
        <member name="M:AM.Collections.NonNullCollection`1.AddRange(System.Collections.Generic.IList{`0})">
            <summary>
            Add several elements to the collection.
            </summary>
        </member>
        <member name="M:AM.Collections.NonNullCollection`1.EnsureCapacity(System.Int32)">
            <summary>
            Ensure the capacity.
            </summary>
        </member>
        <member name="M:AM.Collections.NonNullCollection`1.ToArray">
            <summary>
            Converts the collection to <see cref="T:System.Array"/> of elements
            of type <typeparamref name="T"/>.
            </summary>
            <returns>Array of items of type <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:AM.Collections.NonNullCollection`1.InsertItem(System.Int32,`0)">
            <inheritdoc cref="M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)"/>
        </member>
        <member name="M:AM.Collections.NonNullCollection`1.SetItem(System.Int32,`0)">
            <inheritdoc cref="M:System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)"/>
        </member>
        <member name="T:AM.Collections.Pair`2">
            <summary>
            Simple container that holds pair of objects of given types.
            </summary>
            <typeparam name="T1">Type of first object.</typeparam>
            <typeparam name="T2">Type of second object.</typeparam>
            <seealso cref="T:AM.Collections.Triplet`3"/>
            <seealso cref="T:AM.Collections.Quartet`4"/>
        </member>
        <member name="T:AM.IReadOnly`1">
            <summary>
            Common interface for object that can be read-only.
            </summary>
        </member>
        <member name="M:AM.IReadOnly`1.AsReadOnly">
            <summary>
            Creates the read-only clone of the object.
            </summary>
        </member>
        <member name="M:AM.IReadOnly`1.SetReadOnly">
            <summary>
            Marks the object as read-only.
            </summary>
        </member>
        <member name="M:AM.IReadOnly`1.ThrowIfReadOnly">
            <summary>
            Throws <see cref="T:AM.ReadOnlyException"/>
            if the object is read-only.
            </summary>
        </member>
        <member name="P:AM.IReadOnly`1.ReadOnly">
            <summary>
            Whether the object is read-only.
            </summary>
        </member>
        <member name="M:AM.Collections.Pair`2.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Collections.Pair`2.#ctor(AM.Collections.Pair{`0,`1})">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Collections.Pair`2.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Collections.Pair`2.#ctor(`0,`1)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Collections.Pair`2.#ctor(`0,`1,System.Boolean)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Collections.Pair`2.System#Collections#IList#Add(System.Object)">
            <inheritdoc cref="M:System.Collections.IList.Add(System.Object)"/>
        </member>
        <member name="M:AM.Collections.Pair`2.System#Collections#IList#Contains(System.Object)">
            <inheritdoc cref="M:System.Collections.IList.Contains(System.Object)"/>
        </member>
        <member name="M:AM.Collections.Pair`2.System#Collections#IList#Clear">
            <inheritdoc cref="M:System.Collections.IList.Clear"/>
        </member>
        <member name="M:AM.Collections.Pair`2.System#Collections#IList#IndexOf(System.Object)">
            <inheritdoc cref="M:System.Collections.IList.IndexOf(System.Object)"/>
        </member>
        <member name="M:AM.Collections.Pair`2.System#Collections#IList#Insert(System.Int32,System.Object)">
            <inheritdoc cref="M:System.Collections.IList.Insert(System.Int32,System.Object)"/>
        </member>
        <member name="M:AM.Collections.Pair`2.System#Collections#IList#Remove(System.Object)">
            <inheritdoc cref="M:System.Collections.IList.Remove(System.Object)"/>
        </member>
        <member name="M:AM.Collections.Pair`2.System#Collections#IList#RemoveAt(System.Int32)">
            <inheritdoc cref="M:System.Collections.IList.RemoveAt(System.Int32)"/>
        </member>
        <member name="M:AM.Collections.Pair`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <inheritdoc cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/>
        </member>
        <member name="M:AM.Collections.Pair`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="M:AM.Collections.Pair`2.Clone">
            <inheritdoc cref="M:System.ICloneable.Clone"/>
        </member>
        <member name="M:AM.Collections.Pair`2.AsReadOnly">
            <inheritdoc cref="M:AM.IReadOnly`1.AsReadOnly"/>
        </member>
        <member name="M:AM.Collections.Pair`2.SetReadOnly">
            <inheritdoc cref="M:AM.IReadOnly`1.SetReadOnly"/>
        </member>
        <member name="M:AM.Collections.Pair`2.ThrowIfReadOnly">
            <inheritdoc cref="M:AM.IReadOnly`1.ThrowIfReadOnly"/>
        </member>
        <member name="M:AM.Collections.Pair`2.Equals(AM.Collections.Pair{`0,`1})">
            <inheritdoc cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:AM.Collections.Pair`2.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:AM.Collections.Pair`2.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:AM.Collections.Pair`2.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="P:AM.Collections.Pair`2.First">
            <summary>
            First element of the pair.
            </summary>
            <value>Value of first element.</value>
        </member>
        <member name="P:AM.Collections.Pair`2.Second">
            <summary>
            Second element of the pair.
            </summary>
            <value>Value of second element.</value>
        </member>
        <member name="P:AM.Collections.Pair`2.Item(System.Int32)">
            <inheritdoc cref="P:System.Collections.IList.Item(System.Int32)"/>
        </member>
        <member name="P:AM.Collections.Pair`2.System#Collections#IList#IsReadOnly">
            <inheritdoc cref="P:System.Collections.IList.IsReadOnly"/>
        </member>
        <member name="P:AM.Collections.Pair`2.System#Collections#IList#IsFixedSize">
            <inheritdoc cref="P:System.Collections.IList.IsFixedSize"/>
        </member>
        <member name="P:AM.Collections.Pair`2.Count">
            <inheritdoc cref="P:System.Collections.ICollection.Count"/>
        </member>
        <member name="P:AM.Collections.Pair`2.System#Collections#ICollection#SyncRoot">
            <inheritdoc cref="P:System.Collections.ICollection.SyncRoot"/>
        </member>
        <member name="P:AM.Collections.Pair`2.System#Collections#ICollection#IsSynchronized">
            <inheritdoc cref="P:System.Collections.ICollection.IsSynchronized"/>
        </member>
        <member name="P:AM.Collections.Pair`2.ReadOnly">
            <inheritdoc cref="P:AM.IReadOnly`1.ReadOnly"/>
        </member>
        <member name="T:AM.Collections.Quartet`4">
            <summary>
            Simple container that holds four objects of given types.
            </summary>
            <typeparam name="T1">Type of first object.</typeparam>
            <typeparam name="T2">Type of second object.</typeparam>
            <typeparam name="T3">Type of third object.</typeparam>
            <typeparam name="T4">Type of fourth object.</typeparam>
            <seealso cref="T:AM.Collections.Pair`2"/>
            <seealso cref="T:AM.Collections.Triplet`3"/>
        </member>
        <member name="M:AM.Collections.Quartet`4.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:AM.Collections.Quartet`4.#ctor(AM.Collections.Quartet{`0,`1,`2,`3})">
            <summary>
            Initializes a new instance of the 
            <see cref="T:AM.Collections.Quartet`4"/> class.
            </summary>
            <param name="quartet">The quartet.</param>
        </member>
        <member name="M:AM.Collections.Quartet`4.#ctor(`0)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:AM.Collections.Quartet`4"/> class.
            Constructs quartet without 3 last elements.
            </summary>
            <param name="first">First element.</param>
        </member>
        <member name="M:AM.Collections.Quartet`4.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:AM.Collections.Quartet`4"/> class.
            Constructs quartet without 2 last elements.
            </summary>
            <param name="first">First element.</param>
            <param name="second">Second element.</param>
        </member>
        <member name="M:AM.Collections.Quartet`4.#ctor(`0,`1,`2)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:AM.Collections.Quartet`4"/> class.
            Constructs quartet without last element.
            </summary>
            <param name="first">First element.</param>
            <param name="second">Second element.</param>
            <param name="third">Third element.</param>
        </member>
        <member name="M:AM.Collections.Quartet`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:AM.Collections.Quartet`4"/> class.
            </summary>
            <param name="first">Initial value for first element.
            </param>
            <param name="second">Initial value for second element.
            </param>
            <param name="third">Initial value for third element.
            </param>
            <param name="fourth">Initial value for fourth element.
            </param>
        </member>
        <member name="M:AM.Collections.Quartet`4.#ctor(`0,`1,`2,`3,System.Boolean)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:AM.Collections.Quartet`4"/> class.
            </summary>
            <param name="first">Initial value for first element.
            </param>
            <param name="second">Initial value for second element.
            </param>
            <param name="third">Initial value for third element.
            </param>
            <param name="fourth">Initial value for fourth element.
            </param>
            <param name="readOnly">Specifies whether the quartet
            should be read-only or not.</param>
        </member>
        <member name="M:AM.Collections.Quartet`4.System#Collections#IList#Add(System.Object)">
            <inheritdoc cref="M:System.Collections.IList.Add(System.Object)"/>
        </member>
        <member name="M:AM.Collections.Quartet`4.System#Collections#IList#Contains(System.Object)">
            <inheritdoc cref="M:System.Collections.IList.Contains(System.Object)"/>
        </member>
        <member name="M:AM.Collections.Quartet`4.System#Collections#IList#Clear">
            <inheritdoc cref="M:System.Collections.IList.Clear"/>
        </member>
        <member name="M:AM.Collections.Quartet`4.System#Collections#IList#IndexOf(System.Object)">
            <inheritdoc cref="M:System.Collections.IList.IndexOf(System.Object)"/>
        </member>
        <member name="M:AM.Collections.Quartet`4.System#Collections#IList#Insert(System.Int32,System.Object)">
            <inheritdoc cref="M:System.Collections.IList.Insert(System.Int32,System.Object)"/>
        </member>
        <member name="M:AM.Collections.Quartet`4.System#Collections#IList#Remove(System.Object)">
            <inheritdoc cref="M:System.Collections.IList.Remove(System.Object)"/>
        </member>
        <member name="M:AM.Collections.Quartet`4.System#Collections#IList#RemoveAt(System.Int32)">
            <inheritdoc cref="M:System.Collections.IList.RemoveAt(System.Int32)"/>
        </member>
        <member name="M:AM.Collections.Quartet`4.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <inheritdoc cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/>
        </member>
        <member name="M:AM.Collections.Quartet`4.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="M:AM.Collections.Quartet`4.Clone">
            <inheritdoc cref="M:System.ICloneable.Clone"/>
        </member>
        <member name="M:AM.Collections.Quartet`4.AsReadOnly">
            <inheritdoc cref="M:AM.IReadOnly`1.AsReadOnly"/>
        </member>
        <member name="M:AM.Collections.Quartet`4.SetReadOnly">
            <inheritdoc cref="M:AM.IReadOnly`1.SetReadOnly"/>
        </member>
        <member name="M:AM.Collections.Quartet`4.ThrowIfReadOnly">
            <inheritdoc cref="M:AM.IReadOnly`1.ThrowIfReadOnly"/>
        </member>
        <member name="M:AM.Collections.Quartet`4.Equals(AM.Collections.Quartet{`0,`1,`2,`3})">
            <inheritdoc cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:AM.Collections.Quartet`4.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:AM.Collections.Quartet`4.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:AM.Collections.Quartet`4.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="P:AM.Collections.Quartet`4.First">
            <summary>
            First element of the quartet.
            </summary>
            <value>First element.</value>
        </member>
        <member name="P:AM.Collections.Quartet`4.Second">
            <summary>
            Second element of the quartet.
            </summary>
            <value>Second element.</value>
        </member>
        <member name="P:AM.Collections.Quartet`4.Third">
            <summary>
            Third element of the quartet.
            </summary>
            <value>Third element.</value>
        </member>
        <member name="P:AM.Collections.Quartet`4.Fourth">
            <summary>
            Fourth element of the quartet.
            </summary>
            <value>Fourth element.</value>
        </member>
        <member name="P:AM.Collections.Quartet`4.Item(System.Int32)">
            <inheritdoc cref="P:System.Collections.IList.Item(System.Int32)"/>
        </member>
        <member name="P:AM.Collections.Quartet`4.System#Collections#IList#IsReadOnly">
            <inheritdoc cref="P:System.Collections.IList.IsReadOnly"/>
        </member>
        <member name="P:AM.Collections.Quartet`4.System#Collections#IList#IsFixedSize">
            <inheritdoc cref="P:System.Collections.IList.IsFixedSize"/>
        </member>
        <member name="P:AM.Collections.Quartet`4.Count">
            <inheritdoc cref="P:System.Collections.ICollection.Count"/>
        </member>
        <member name="P:AM.Collections.Quartet`4.System#Collections#ICollection#SyncRoot">
            <inheritdoc cref="P:System.Collections.ICollection.SyncRoot"/>
        </member>
        <member name="P:AM.Collections.Quartet`4.System#Collections#ICollection#IsSynchronized">
            <inheritdoc cref="P:System.Collections.ICollection.IsSynchronized"/>
        </member>
        <member name="P:AM.Collections.Quartet`4.ReadOnly">
            <inheritdoc cref="P:AM.IReadOnly`1.ReadOnly"/>
        </member>
        <member name="T:AM.Collections.Set`1">
            <summary>
            Generic set.
            </summary>
        </member>
        <member name="M:AM.Collections.Set`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:AM.Collections.Set`1.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Collections.Set`1.#ctor(AM.Collections.Set{`0})">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Collections.Set`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Collections.Set`1.Add(`0)">
            <summary>
            Add an element.
            </summary>
        </member>
        <member name="M:AM.Collections.Set`1.Add(`0[])">
            <summary>
            Add some elements.
            </summary>
        </member>
        <member name="M:AM.Collections.Set`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add some elements.
            </summary>
        </member>
        <member name="M:AM.Collections.Set`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            Convert all.
            </summary>
        </member>
        <member name="M:AM.Collections.Set`1.TrueForAll(System.Predicate{`0})">
            <summary>
            True for all.
            </summary>
        </member>
        <member name="M:AM.Collections.Set`1.FindAll(System.Predicate{`0})">
            <summary>
            Find all.
            </summary>
        </member>
        <member name="M:AM.Collections.Set`1.ForEach(System.Action{`0})">
            <summary>
            For each.
            </summary>
        </member>
        <member name="M:AM.Collections.Set`1.Clear">
            <summary>
            Clear.
            </summary>
        </member>
        <member name="M:AM.Collections.Set`1.Contains(`0)">
            <summary>
            Contains.
            </summary>
        </member>
        <member name="M:AM.Collections.Set`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copy to.
            </summary>
        </member>
        <member name="M:AM.Collections.Set`1.Remove(`0)">
            <summary>
            Remove an element.
            </summary>
        </member>
        <member name="M:AM.Collections.Set`1.Remove(`0[])">
            <summary>
            Remove some elements.
            </summary>
        </member>
        <member name="M:AM.Collections.Set`1.GetEnumerator">
            <summary>
            Get enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AM.Collections.Set`1.op_BitwiseOr(AM.Collections.Set{`0},AM.Collections.Set{`0})">
            <summary>
            Union operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AM.Collections.Set`1.Union(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Union.
            </summary>
            <param name="set"></param>
            <returns></returns>
        </member>
        <member name="M:AM.Collections.Set`1.op_BitwiseAnd(AM.Collections.Set{`0},AM.Collections.Set{`0})">
            <summary>
            Intersection operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AM.Collections.Set`1.Intersection(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Intersection.
            </summary>
        </member>
        <member name="M:AM.Collections.Set`1.op_Subtraction(AM.Collections.Set{`0},AM.Collections.Set{`0})">
            <summary>
            Difference operator.
            </summary>
        </member>
        <member name="M:AM.Collections.Set`1.Difference(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Difference.
            </summary>
        </member>
        <member name="M:AM.Collections.Set`1.op_ExclusiveOr(AM.Collections.Set{`0},AM.Collections.Set{`0})">
            <summary>
            Symmetric difference.
            </summary>
        </member>
        <member name="M:AM.Collections.Set`1.SymmetricDifference(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Symmetric difference.
            </summary>
        </member>
        <member name="M:AM.Collections.Set`1.op_LessThanOrEqual(AM.Collections.Set{`0},AM.Collections.Set{`0})">
            <summary>
            Less or equal.
            </summary>
        </member>
        <member name="M:AM.Collections.Set`1.op_LessThan(AM.Collections.Set{`0},AM.Collections.Set{`0})">
            <summary>
            Less.
            </summary>
        </member>
        <member name="M:AM.Collections.Set`1.op_Equality(AM.Collections.Set{`0},AM.Collections.Set{`0})">
            <summary>
            Equal.
            </summary>
        </member>
        <member name="M:AM.Collections.Set`1.op_GreaterThan(AM.Collections.Set{`0},AM.Collections.Set{`0})">
            <summary>
            More.
            </summary>
        </member>
        <member name="M:AM.Collections.Set`1.op_GreaterThanOrEqual(AM.Collections.Set{`0},AM.Collections.Set{`0})">
            <summary>
            More or equal.
            </summary>
        </member>
        <member name="M:AM.Collections.Set`1.op_Inequality(AM.Collections.Set{`0},AM.Collections.Set{`0})">
            <summary>
            Not equal.
            </summary>
        </member>
        <member name="M:AM.Collections.Set`1.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:AM.Collections.Set`1.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:AM.Collections.Set`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <inheritdoc cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/>
        </member>
        <member name="M:AM.Collections.Set`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="M:AM.Collections.Set`1.Clone">
            <inheritdoc cref="M:System.ICloneable.Clone"/>
        </member>
        <member name="P:AM.Collections.Set`1.Count">
            <summary>
            Count.
            </summary>
            <value></value>
        </member>
        <member name="P:AM.Collections.Set`1.IsEmpty">
            <summary>
            Is empty.
            </summary>
            <value></value>
        </member>
        <member name="P:AM.Collections.Set`1.Items">
            <summary>
            Get array of items.
            </summary>
        </member>
        <member name="P:AM.Collections.Set`1.IsReadOnly">
            <summary>
            Is read only.
            </summary>
            <value></value>
        </member>
        <member name="P:AM.Collections.Set`1.Empty">
            <summary>
            Empty.
            </summary>
        </member>
        <member name="P:AM.Collections.Set`1.System#Collections#ICollection#SyncRoot">
            <inheritdoc cref="P:System.Collections.ICollection.SyncRoot"/>
        </member>
        <member name="P:AM.Collections.Set`1.System#Collections#ICollection#IsSynchronized">
            <inheritdoc cref="P:System.Collections.ICollection.IsSynchronized"/>
        </member>
        <member name="T:AM.Collections.StringDictionary">
            <summary>
            Simple "string-string" <see cref="T:System.Collections.Generic.Dictionary`2"/>
            with saving-restoring facility.
            </summary>
        </member>
        <member name="F:AM.Collections.StringDictionary.EndOfDictionary">
            <summary>
            End-of-Dictionary mark.
            </summary>
        </member>
        <member name="M:AM.Collections.StringDictionary.Load(System.IO.TextReader)">
            <summary>
            Loads <see cref="T:AM.Collections.StringDictionary"/> from 
            the specified <see cref="T:System.IO.StreamReader"/>.
            </summary>
        </member>
        <member name="M:AM.Collections.StringDictionary.Load(System.String,System.Text.Encoding)">
            <summary>
            Loads <see cref="T:AM.Collections.StringDictionary"/> from the specified file.
            </summary>
        </member>
        <member name="M:AM.Collections.StringDictionary.Save(System.IO.TextWriter)">
            <summary>
            Saves the <see cref="T:AM.Collections.StringDictionary"/> with specified writer.
            </summary>
        </member>
        <member name="M:AM.Collections.StringDictionary.Save(System.String,System.Text.Encoding)">
            <summary>
            Saves the <see cref="T:AM.Collections.StringDictionary"/> to specified file.
            </summary>
        </member>
        <member name="M:AM.Collections.StringDictionary.RestoreFromStream(System.IO.BinaryReader)">
            <inheritdoc cref="M:AM.Runtime.IHandmadeSerializable.RestoreFromStream(System.IO.BinaryReader)"/>
        </member>
        <member name="M:AM.Collections.StringDictionary.SaveToStream(System.IO.BinaryWriter)">
            <inheritdoc cref="M:AM.Runtime.IHandmadeSerializable.SaveToStream(System.IO.BinaryWriter)"/>
        </member>
        <member name="T:AM.Collections.TreeNode`1">
            <summary>
            Generic tree node.
            </summary>
        </member>
        <member name="M:AM.Collections.TreeNode`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Collections.TreeNode`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Collections.TreeNode`1.AddChild(`0)">
            <summary>
            Add child with a specified value.
            </summary>
        </member>
        <member name="M:AM.Collections.TreeNode`1.GetDescendants">
            <summary>
            Get descendants of the node.
            </summary>
        </member>
        <member name="M:AM.Collections.TreeNode`1.Walk(System.Action{AM.Collections.TreeNode{`0}})">
            <summary>
            Walk through the tree starting the current node.
            </summary>
        </member>
        <member name="P:AM.Collections.TreeNode`1.Children">
            <summary>
            Children nodes.
            </summary>
        </member>
        <member name="P:AM.Collections.TreeNode`1.Value">
            <summary>
            User defined value.
            </summary>
        </member>
        <member name="T:AM.Collections.Triplet`3">
            <summary>
            Simple container that holds three objects of given types.
            </summary>
            <typeparam name="T1">Type of first object.</typeparam>
            <typeparam name="T2">Type of second object.</typeparam>
            <typeparam name="T3">Type of third object.</typeparam>
            <seealso cref="T:AM.Collections.Pair`2"/>
            <seealso cref="T:AM.Collections.Quartet`4"/>
        </member>
        <member name="M:AM.Collections.Triplet`3.#ctor">
            <summary>
            Initializes a new instance of the 
            <see cref="T:AM.Collections.Triplet`3"/> class.
            Leaves elements unassigned.
            </summary>
        </member>
        <member name="M:AM.Collections.Triplet`3.#ctor(AM.Collections.Triplet{`0,`1,`2})">
            <summary>
            Initializes a new instance of the 
            <see cref="T:AM.Collections.Triplet`3"/> class.
            </summary>
            <param name="triplet">The triplet.</param>
        </member>
        <member name="M:AM.Collections.Triplet`3.#ctor(`0)">
            <summary>
            Constructs triplet without second and third elements.
            </summary>
            <param name="first">First element.</param>
        </member>
        <member name="M:AM.Collections.Triplet`3.#ctor(`0,`1)">
            <summary>
            Constructs triplet without third element.
            </summary>
            <param name="first">First element.</param>
            <param name="second">Second element.</param>
        </member>
        <member name="M:AM.Collections.Triplet`3.#ctor(`0,`1,`2)">
            <summary>
            Constructs triplet.
            </summary>
            <param name="first">First element.</param>
            <param name="second">Second element.</param>
            <param name="third">Third element.</param>
        </member>
        <member name="M:AM.Collections.Triplet`3.#ctor(`0,`1,`2,System.Boolean)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:AM.Collections.Triplet`3"/> class.
            </summary>
            <param name="first">First element.</param>
            <param name="second">Second element.</param>
            <param name="third">Third element.</param>
            <param name="readOnly">Specifies whether the triplet
            should be read-only or not.</param>
        </member>
        <member name="M:AM.Collections.Triplet`3.System#Collections#IList#Add(System.Object)">
            <inheritdoc cref="M:System.Collections.IList.Add(System.Object)"/>
        </member>
        <member name="M:AM.Collections.Triplet`3.System#Collections#IList#Contains(System.Object)">
            <inheritdoc cref="M:System.Collections.IList.Contains(System.Object)"/>
        </member>
        <member name="M:AM.Collections.Triplet`3.System#Collections#IList#Clear">
            <inheritdoc cref="M:System.Collections.IList.Clear"/>
        </member>
        <member name="M:AM.Collections.Triplet`3.System#Collections#IList#IndexOf(System.Object)">
            <inheritdoc cref="M:System.Collections.IList.IndexOf(System.Object)"/>
        </member>
        <member name="M:AM.Collections.Triplet`3.System#Collections#IList#Insert(System.Int32,System.Object)">
            <inheritdoc cref="M:System.Collections.IList.Insert(System.Int32,System.Object)"/>
        </member>
        <member name="M:AM.Collections.Triplet`3.System#Collections#IList#Remove(System.Object)">
            <inheritdoc cref="M:System.Collections.IList.Remove(System.Object)"/>
        </member>
        <member name="M:AM.Collections.Triplet`3.System#Collections#IList#RemoveAt(System.Int32)">
            <inheritdoc cref="M:System.Collections.IList.RemoveAt(System.Int32)"/>
        </member>
        <member name="M:AM.Collections.Triplet`3.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <inheritdoc cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/>
        </member>
        <member name="M:AM.Collections.Triplet`3.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="M:AM.Collections.Triplet`3.Clone">
            <inheritdoc cref="M:System.ICloneable.Clone"/>
        </member>
        <member name="M:AM.Collections.Triplet`3.AsReadOnly">
            <inheritdoc cref="M:AM.IReadOnly`1.AsReadOnly"/>
        </member>
        <member name="M:AM.Collections.Triplet`3.SetReadOnly">
            <inheritdoc cref="M:AM.IReadOnly`1.SetReadOnly"/>
        </member>
        <member name="M:AM.Collections.Triplet`3.ThrowIfReadOnly">
            <inheritdoc cref="M:AM.IReadOnly`1.ThrowIfReadOnly"/>
        </member>
        <member name="M:AM.Collections.Triplet`3.Equals(AM.Collections.Triplet{`0,`1,`2})">
            <inheritdoc cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:AM.Collections.Triplet`3.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:AM.Collections.Triplet`3.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:AM.Collections.Triplet`3.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="P:AM.Collections.Triplet`3.First">
            <summary>
            First element of triplet.
            </summary>
            <value>First element.</value>
        </member>
        <member name="P:AM.Collections.Triplet`3.Second">
            <summary>
            Second element of triplet.
            </summary>
            <value>Second element.</value>
        </member>
        <member name="P:AM.Collections.Triplet`3.Third">
            <summary>
            Third element of triplet.
            </summary>
            <value></value>
        </member>
        <member name="P:AM.Collections.Triplet`3.Item(System.Int32)">
            <inheritdoc cref="P:System.Collections.IList.Item(System.Int32)"/>
        </member>
        <member name="P:AM.Collections.Triplet`3.System#Collections#IList#IsReadOnly">
            <inheritdoc cref="P:System.Collections.IList.IsReadOnly"/>
        </member>
        <member name="P:AM.Collections.Triplet`3.System#Collections#IList#IsFixedSize">
            <inheritdoc cref="P:System.Collections.IList.IsFixedSize"/>
        </member>
        <member name="P:AM.Collections.Triplet`3.Count">
            <inheritdoc cref="P:System.Collections.ICollection.Count"/>
        </member>
        <member name="P:AM.Collections.Triplet`3.System#Collections#ICollection#SyncRoot">
            <inheritdoc cref="P:System.Collections.ICollection.SyncRoot"/>
        </member>
        <member name="P:AM.Collections.Triplet`3.System#Collections#ICollection#IsSynchronized">
            <inheritdoc cref="P:System.Collections.ICollection.IsSynchronized"/>
        </member>
        <member name="P:AM.Collections.Triplet`3.ReadOnly">
            <inheritdoc cref="P:AM.IReadOnly`1.ReadOnly"/>
        </member>
        <member name="T:AM.Collections.VirtualList`1">
            <summary>
            Virtual list.
            </summary>
        </member>
        <member name="M:AM.Collections.VirtualList`1.#ctor(System.Action{AM.Collections.VirtualList{`0}.Parameters},System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Collections.VirtualList`1.GetItem(System.Int32)">
            <summary>
            Get item by index.
            </summary>
        </member>
        <member name="M:AM.Collections.VirtualList`1.SetCache(`0[],System.Int32)">
            <summary>
            Set cache (called by retriever);
            </summary>
        </member>
        <member name="M:AM.Collections.VirtualList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:AM.Collections.VirtualList`1.System#Collections#Generic#ICollection{T}#Clear">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.Clear"/>
        </member>
        <member name="M:AM.Collections.VirtualList`1.Contains(`0)">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.Contains(`0)"/>
        </member>
        <member name="M:AM.Collections.VirtualList`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)"/>
        </member>
        <member name="M:AM.Collections.VirtualList`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="M:AM.Collections.VirtualList`1.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:AM.Collections.VirtualList`1.IndexOf(`0)">
            <inheritdoc cref="M:System.Collections.Generic.IList`1.IndexOf(`0)"/>
        </member>
        <member name="M:AM.Collections.VirtualList`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
            <inheritdoc cref="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)"/>
        </member>
        <member name="M:AM.Collections.VirtualList`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.Remove(`0)"/>
        </member>
        <member name="M:AM.Collections.VirtualList`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)"/>
        </member>
        <member name="P:AM.Collections.VirtualList`1.CacheSize">
            <summary>
            Cache size.
            </summary>
        </member>
        <member name="P:AM.Collections.VirtualList`1.Count">
            <inheritdoc cref="P:System.Collections.Generic.ICollection`1.Count"/>
        </member>
        <member name="P:AM.Collections.VirtualList`1.IsReadOnly">
            <inheritdoc cref="P:System.Collections.Generic.ICollection`1.IsReadOnly"/>
        </member>
        <member name="P:AM.Collections.VirtualList`1.Item(System.Int32)">
            <inheritdoc cref="P:System.Collections.Generic.IList`1.Item(System.Int32)"/>
        </member>
        <member name="T:AM.Collections.VirtualList`1.Parameters">
            <summary>
            Parameters.
            </summary>
        </member>
        <member name="M:AM.Collections.VirtualList`1.Parameters.#ctor(AM.Collections.VirtualList{`0},System.Int32,System.Boolean)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:AM.Collections.VirtualList`1.Parameters.List">
            <summary>
            List.
            </summary>
        </member>
        <member name="P:AM.Collections.VirtualList`1.Parameters.Index">
            <summary>
            Index.
            </summary>
        </member>
        <member name="P:AM.Collections.VirtualList`1.Parameters.Up">
            <summary>
            Up direction.
            </summary>
        </member>
        <member name="T:AM.Collections.XRange">
            <summary>
            
            </summary>
            <example>
            <code>
            foreach ( int i in new XRange ( 10, 50 ) )
            {
             Console.WriteLine ( "Number: {0}", i );
            }
            </code>
            </example>
        </member>
        <member name="M:AM.Collections.XRange.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Collections.XRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Collections.XRange.System#Collections#Generic#IEnumerable{System#Int32}#GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:AM.Collections.XRange.GetEnumerator">
            <inheritdoc cref="M:System.Collections.IEnumerable.GetEnumerator"/>
        </member>
        <member name="P:AM.Collections.XRange.Length">
            <summary>
            Gets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:AM.Collections.XRange.Start">
            <summary>
            Gets the start.
            </summary>
            <value>The start.</value>
        </member>
        <member name="T:AM.CommandLine.CommandLineParser">
            <summary>
            Simple parsing of command line switches
            and arguments.
            </summary>
        </member>
        <member name="M:AM.CommandLine.CommandLineParser.Parse(System.String[])">
            <summary>
            Parse given arguments.
            </summary>
        </member>
        <member name="M:AM.CommandLine.CommandLineParser.ParseFile(System.String,System.Text.Encoding)">
            <summary>
            Parse arguments from response file.
            </summary>
        </member>
        <member name="M:AM.CommandLine.CommandLineParser.ParseFile(System.String)">
            <summary>
            Parse arguments from response file.
            </summary>
        </member>
        <member name="T:AM.CommandLine.CommandLineSettings">
            <summary>
            Settings for command line handling.
            </summary>
        </member>
        <member name="F:AM.CommandLine.CommandLineSettings.DefaultArgumentDelimiter">
            <summary>
            Default argument delimiter.
            </summary>
        </member>
        <member name="F:AM.CommandLine.CommandLineSettings.DefaultResponsePrefix">
            <summary>
            Default prefix for response files.
            </summary>
        </member>
        <member name="F:AM.CommandLine.CommandLineSettings.DefaultSwitchPrefix">
            <summary>
            Default prefix for switches.
            </summary>
        </member>
        <member name="F:AM.CommandLine.CommandLineSettings.DefaultValueSeparator">
            <summary>
            Default separator for values.
            </summary>
        </member>
        <member name="M:AM.CommandLine.CommandLineSettings.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="P:AM.CommandLine.CommandLineSettings.ArgumentDelimiter">
            <summary>
            Argument delimiter.
            </summary>
        </member>
        <member name="P:AM.CommandLine.CommandLineSettings.ResponsePrefix">
            <summary>
            Prefix for response files.
            </summary>
            <remarks>Default value: <code>'@'</code>.</remarks>
        </member>
        <member name="P:AM.CommandLine.CommandLineSettings.SwitchPrefix">
            <summary>
            Prefix for switches.
            </summary>
            <remarks>Default value: <code>'-'</code>.</remarks>
        </member>
        <member name="P:AM.CommandLine.CommandLineSettings.ValueSeparator">
            <summary>
            Separator for switch value.
            </summary>
            <remarks>Default value: <code>':'</code>.</remarks>
        </member>
        <member name="T:AM.CommandLine.CommandLineSwitch">
            <summary>
            Command line switch.
            </summary>
        </member>
        <member name="M:AM.CommandLine.CommandLineSwitch.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.CommandLine.CommandLineSwitch.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.CommandLine.CommandLineSwitch.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.CommandLine.CommandLineSwitch.AddValue(System.String)">
            <summary>
            Add value.
            </summary>
        </member>
        <member name="M:AM.CommandLine.CommandLineSwitch.ToString">
            <summary>
            Returns a <see cref="T:System.String"/>
            that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/>
            that represents this instance.</returns>
        </member>
        <member name="P:AM.CommandLine.CommandLineSwitch.Name">
            <summary>
            Name of the switch.
            </summary>
        </member>
        <member name="P:AM.CommandLine.CommandLineSwitch.Value">
            <summary>
            Value of the switch.
            </summary>
        </member>
        <member name="P:AM.CommandLine.CommandLineSwitch.Values">
            <summary>
            Values of the switch.
            </summary>
        </member>
        <member name="T:AM.CommandLine.CommandLineUtility">
            <summary>
            Common routines for command line processing.
            </summary>
        </member>
        <member name="M:AM.CommandLine.CommandLineUtility.SplitText(System.String)">
            <summary>
            Split the text to command line arguments.
            </summary>
        </member>
        <member name="M:AM.CommandLine.CommandLineUtility.WrapArgumentIfNeeded(System.String)">
            <summary>
            Wrap argument with delimiters if needed.
            </summary>
        </member>
        <member name="T:AM.CommandLine.ParsedCommandLine">
            <summary>
            Command line parsing result.
            </summary>
        </member>
        <member name="M:AM.CommandLine.ParsedCommandLine.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.CommandLine.ParsedCommandLine.AddSwitch(System.String)">
            <summary>
            Add switch without value.
            </summary>
        </member>
        <member name="M:AM.CommandLine.ParsedCommandLine.AddSwitch(System.String,System.String)">
            <summary>
            Add switch with value.
            </summary>
        </member>
        <member name="M:AM.CommandLine.ParsedCommandLine.AddSwitch(AM.CommandLine.CommandLineSwitch)">
            <summary>
            Add/merge switch.
            </summary>
        </member>
        <member name="M:AM.CommandLine.ParsedCommandLine.GetArgument(System.Int32,System.String)">
            <summary>
            Get positional argument.
            </summary>
        </member>
        <member name="M:AM.CommandLine.ParsedCommandLine.GetSwitch(System.String)">
            <summary>
            Get switch with given name.
            </summary>
        </member>
        <member name="M:AM.CommandLine.ParsedCommandLine.GetValue(System.String,System.String)">
            <summary>
            Get value of the switch.
            </summary>
        </member>
        <member name="M:AM.CommandLine.ParsedCommandLine.GetValues(System.String,System.String[])">
            <summary>
            Get array of values of the switch.
            </summary>
        </member>
        <member name="M:AM.CommandLine.ParsedCommandLine.GetValues(System.String)">
            <summary>
            Get array of values of the switch.
            </summary>
        </member>
        <member name="M:AM.CommandLine.ParsedCommandLine.HaveSwitch(System.String)">
            <summary>
            Do we have specified switch?
            </summary>
        </member>
        <member name="M:AM.CommandLine.ParsedCommandLine.Merge(AM.CommandLine.ParsedCommandLine)">
            <summary>
            Merge two command lines.
            </summary>
        </member>
        <member name="M:AM.CommandLine.ParsedCommandLine.ToString">
            <summary>
            Returns a <see cref="T:System.String"/>
            that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/>
            that represents this instance.</returns>
        </member>
        <member name="P:AM.CommandLine.ParsedCommandLine.PositionalArguments">
            <summary>
            Positional arguments (if any).
            </summary>
        </member>
        <member name="P:AM.CommandLine.ParsedCommandLine.Switches">
            <summary>
            Command line switches (if any).
            </summary>
        </member>
        <member name="T:AM.ComparableObject">
            <summary>
            Class with automatic Equals method.
            </summary>
            <remarks>Borrowed from Brad Smith's coding blog:
            http://www.brad-smith.info/blog/archives/385
            </remarks>
        </member>
        <member name="M:AM.ComparableObject.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:AM.ComparableObject.#ctor">
            <summary>
            Constructor.
            </summary>
            <remarks>Dynamically compiles the Equals/GetHashCode
            functions on the 
            first call to a subclass constructor.
            </remarks>
        </member>
        <member name="M:AM.ComparableObject.MakeEqualsMethod(System.Type)">
            <summary>
            Creates the Equals() method.
            </summary>
        </member>
        <member name="M:AM.ComparableObject.MakeGetHashCodeMethod(System.Type)">
            <summary>
            Creates the GetHashCode() method.
            </summary>
        </member>
        <member name="M:AM.ComparableObject.GetHashCode(System.Object)">
            <summary>
            Get hash code for arbitrary object.
            </summary>
        </member>
        <member name="M:AM.ComparableObject.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:AM.ComparableObject.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:AM.ComparableObject.MemberwiseFunctions">
            <summary>
            Used to hold delegates for the compiled methods.
            </summary>
        </member>
        <member name="F:AM.ComparableObject.MemberwiseFunctions.EqualsFunc">
            <summary>
            Delegate for the Equals method.
            </summary>
        </member>
        <member name="F:AM.ComparableObject.MemberwiseFunctions.GetHashCodeFunc">
            <summary>
            Delegate for the GetHashCode method.
            </summary>
        </member>
        <member name="T:AM.ComponentModel.NotifyProperty">
            <summary>
            Naive INotifyProperty implementation.
            </summary>
        </member>
        <member name="M:AM.ComponentModel.NotifyProperty.NotifyPropertyChanged(System.String)">
            <summary>
            Notifies when the property changed.
            </summary>
        </member>
        <member name="E:AM.ComponentModel.NotifyProperty.PropertyChanged">
            <summary>
            Occurs when property changed.
            </summary>
        </member>
        <member name="T:AM.ComponentModel.PropertyChangedUtility">
            <summary>
            Helpers for <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>.
            </summary>
        </member>
        <member name="M:AM.ComponentModel.PropertyChangedUtility.RaiseAndSetIfChanged``2(``0,``1@,``1,System.String)">
            <summary>
            Borrowed from ReactiveUI
            </summary>
        </member>
        <member name="M:AM.ComponentModel.PropertyChangedUtility.NotifyPropertyChanged``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
            <summary>
            Notifies the property changed.
            </summary>
        </member>
        <member name="T:AM.ConsoleIO.ConsoleInput">
            <summary>
            Console input.
            </summary>
        </member>
        <member name="M:AM.ConsoleIO.ConsoleInput.Clear">
            <summary>
            Clear the console.
            </summary>
        </member>
        <member name="M:AM.ConsoleIO.ConsoleInput.Read">
            <summary>
            Read one character.
            </summary>
        </member>
        <member name="M:AM.ConsoleIO.ConsoleInput.ReadKey(System.Boolean)">
            <summary>
            Read one key.
            </summary>
        </member>
        <member name="M:AM.ConsoleIO.ConsoleInput.ReadLine">
            <summary>
            Read line.
            </summary>
        </member>
        <member name="M:AM.ConsoleIO.ConsoleInput.SetDriver(AM.ConsoleIO.IConsoleDriver)">
            <summary>
            Set driver.
            </summary>
        </member>
        <member name="M:AM.ConsoleIO.ConsoleInput.Write(System.String)">
            <summary>
            Write text.
            </summary>
        </member>
        <member name="M:AM.ConsoleIO.ConsoleInput.WriteLine">
            <summary>
            Goto next line.
            </summary>
        </member>
        <member name="M:AM.ConsoleIO.ConsoleInput.WriteLine(System.String)">
            <summary>
            Write text and goto next line.
            </summary>
        </member>
        <member name="P:AM.ConsoleIO.ConsoleInput.BackgroundColor">
            <summary>
            Background color.
            </summary>
        </member>
        <member name="P:AM.ConsoleIO.ConsoleInput.Driver">
            <summary>
            Driver for the console.
            </summary>
        </member>
        <member name="P:AM.ConsoleIO.ConsoleInput.ForegroundColor">
            <summary>
            Foreground color.
            </summary>
        </member>
        <member name="P:AM.ConsoleIO.ConsoleInput.KeyAvailable">
            <summary>
            Key available?
            </summary>
        </member>
        <member name="P:AM.ConsoleIO.ConsoleInput.Title">
            <summary>
            Console title.
            </summary>
        </member>
        <member name="T:AM.ConsoleIO.IConsoleDriver">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.ConsoleIO.IConsoleDriver.Clear">
            <summary>
            Clear the console.
            </summary>
        </member>
        <member name="M:AM.ConsoleIO.IConsoleDriver.ReadKey(System.Boolean)">
            <summary>
            Read one key.
            </summary>
        </member>
        <member name="M:AM.ConsoleIO.IConsoleDriver.Read">
            <summary>
            Reads the next character from the standard input stream.
            </summary>
        </member>
        <member name="M:AM.ConsoleIO.IConsoleDriver.ReadLine">
            <summary>
            Read one line.
            </summary>
        </member>
        <member name="M:AM.ConsoleIO.IConsoleDriver.Write(System.String)">
            <summary>
            Write text.
            </summary>
        </member>
        <member name="M:AM.ConsoleIO.IConsoleDriver.WriteLine">
            <summary>
            Goto next line.
            </summary>
        </member>
        <member name="P:AM.ConsoleIO.IConsoleDriver.BackgroundColor">
            <summary>
            Gets or sets the background color of the console.
            </summary>
        </member>
        <member name="P:AM.ConsoleIO.IConsoleDriver.ForegroundColor">
            <summary>
            Gets or sets the foreground color of the console.
            </summary>
        </member>
        <member name="P:AM.ConsoleIO.IConsoleDriver.KeyAvailable">
            <summary>
            Gets a value indicating whether a key press
            is available in the input stream.
            </summary>
        </member>
        <member name="P:AM.ConsoleIO.IConsoleDriver.Title">
            <summary>
            Gets or sets the title to display
            in the console title bar.
            </summary>
        </member>
        <member name="T:AM.ConsoleIO.InputHistory">
            <summary>
            Input history.
            </summary>
        </member>
        <member name="T:AM.ConsoleIO.NullConsole">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.ConsoleIO.NullConsole.Clear">
            <inheritdoc />
        </member>
        <member name="M:AM.ConsoleIO.NullConsole.ReadKey(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:AM.ConsoleIO.NullConsole.Read">
            <inheritdoc />
        </member>
        <member name="M:AM.ConsoleIO.NullConsole.ReadLine">
            <inheritdoc />
        </member>
        <member name="M:AM.ConsoleIO.NullConsole.Write(System.String)">
            <inheritdoc />
        </member>
        <member name="M:AM.ConsoleIO.NullConsole.WriteLine">
            <inheritdoc />
        </member>
        <member name="P:AM.ConsoleIO.NullConsole.BackgroundColor">
            <inheritdoc />
        </member>
        <member name="P:AM.ConsoleIO.NullConsole.ForegroundColor">
            <inheritdoc />
        </member>
        <member name="P:AM.ConsoleIO.NullConsole.KeyAvailable">
            <inheritdoc />
        </member>
        <member name="P:AM.ConsoleIO.NullConsole.Title">
            <inheritdoc />
        </member>
        <member name="T:AM.ConsoleIO.SystemConsole">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.ConsoleIO.SystemConsole.Clear">
            <inheritdoc cref="M:AM.ConsoleIO.IConsoleDriver.Clear"/>
        </member>
        <member name="M:AM.ConsoleIO.SystemConsole.Read">
            <inheritdoc cref="M:AM.ConsoleIO.IConsoleDriver.Read"/>
        </member>
        <member name="M:AM.ConsoleIO.SystemConsole.ReadKey(System.Boolean)">
            <inheritdoc cref="M:AM.ConsoleIO.IConsoleDriver.ReadKey(System.Boolean)"/>
        </member>
        <member name="M:AM.ConsoleIO.SystemConsole.ReadLine">
            <inheritdoc cref="M:AM.ConsoleIO.IConsoleDriver.ReadLine"/>
        </member>
        <member name="M:AM.ConsoleIO.SystemConsole.Write(System.String)">
            <inheritdoc cref="M:AM.ConsoleIO.IConsoleDriver.Write(System.String)"/>
        </member>
        <member name="M:AM.ConsoleIO.SystemConsole.WriteLine">
            <inheritdoc cref="M:AM.ConsoleIO.IConsoleDriver.WriteLine"/>
        </member>
        <member name="P:AM.ConsoleIO.SystemConsole.BackgroundColor">
            <inheritdoc cref="P:AM.ConsoleIO.IConsoleDriver.BackgroundColor"/>
        </member>
        <member name="P:AM.ConsoleIO.SystemConsole.ForegroundColor">
            <inheritdoc cref="P:AM.ConsoleIO.IConsoleDriver.ForegroundColor"/>
        </member>
        <member name="P:AM.ConsoleIO.SystemConsole.KeyAvailable">
            <inheritdoc cref="P:AM.ConsoleIO.IConsoleDriver.KeyAvailable"/>
        </member>
        <member name="P:AM.ConsoleIO.SystemConsole.Title">
            <inheritdoc cref="P:AM.ConsoleIO.IConsoleDriver.Title"/>
        </member>
        <member name="T:AM.ConsoleUtility">
            <summary>
            Useful routines for console manipulation.
            </summary>
        </member>
        <member name="M:AM.ConsoleUtility.RedirectStandardOutput(System.String,System.Text.Encoding)">
            <summary>
            Перенаправление стандартного вывода в файл.
            </summary>
        </member>
        <member name="M:AM.ConsoleUtility.SetOutputCodePage(System.Text.Encoding)">
            <summary>
            Переключение кодовой страницы вывода консоли.
            </summary>
        </member>
        <member name="M:AM.ConsoleUtility.SetOutputCodePage(System.Int32)">
            <summary>
            Переключение кодовой страницы вывода консоли.
            </summary>
        </member>
        <member name="M:AM.ConsoleUtility.SetOutputCodePage(System.String)">
            <summary>
            Переключение кодовой страницы вывода консоли.
            </summary>
        </member>
        <member name="M:AM.ConsoleUtility.FixVisualStudio2005Bug">
            <summary>
            Исправление бага Visual Studio 2005, когда в окне Console
            вместо кириллицы показываются кракозябрики.
            </summary>
        </member>
        <member name="T:AM.Data.ColumnHeaderAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Data.ColumnHeaderAttribute.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:AM.Data.ColumnHeaderAttribute.Header">
            <summary>
            Column header text.
            </summary>
        </member>
        <member name="T:AM.Data.ColumnIndexAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Data.ColumnIndexAttribute.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:AM.Data.ColumnIndexAttribute.Index">
            <summary>
            Column index.
            </summary>
        </member>
        <member name="T:AM.Data.ColumnWidthAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Data.ColumnWidthAttribute.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:AM.Data.ColumnWidthAttribute.Width">
            <summary>
            Column width.
            </summary>
        </member>
        <member name="T:AM.Data.DataColumnInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Data.DataColumnInfo.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="P:AM.Data.DataColumnInfo.Name">
            <summary>
            Gets or sets the name of the column.
            </summary>
        </member>
        <member name="P:AM.Data.DataColumnInfo.Title">
            <summary>
            Gets or sets the column title.
            </summary>
        </member>
        <member name="P:AM.Data.DataColumnInfo.Width">
            <summary>
            Gets or sets the width of the column.
            </summary>
            <value>The width of the column.</value>
        </member>
        <member name="P:AM.Data.DataColumnInfo.Type">
            <summary>
            Gets or sets the data grid column.
            </summary>
            <value>The data grid column.</value>
        </member>
        <member name="P:AM.Data.DataColumnInfo.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
        </member>
        <member name="P:AM.Data.DataColumnInfo.Frozen">
            <summary>
            Gets or sets a value indicating whether this 
            the column is frozen.
            </summary>
        </member>
        <member name="P:AM.Data.DataColumnInfo.Invisible">
            <summary>
            Gets or sets a value indicating whether this column is invisible.
            </summary>
        </member>
        <member name="P:AM.Data.DataColumnInfo.ReadOnly">
            <summary>
            Gets or sets a value indicating whether 
            the column is read only.
            </summary>
        </member>
        <member name="P:AM.Data.DataColumnInfo.Sorted">
            <summary>
            Gets or sets a value indicating whether
            this column is sorted.
            </summary>
        </member>
        <member name="T:AM.Data.DataSetInfo">
            <summary>
            Information about <see cref="T:System.Data.DataSet"/>.
            </summary>
        </member>
        <member name="M:AM.Data.DataSetInfo.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Data.DataSetInfo.Load(System.String)">
            <summary>
            Loads <see cref="T:AM.Data.DataSetInfo"/> from the specified file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:AM.Data.DataSetInfo.Save(System.String)">
            <summary>
            Saves this instance into the specified file.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="P:AM.Data.DataSetInfo.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
        </member>
        <member name="P:AM.Data.DataSetInfo.ReadOnly">
            <summary>
            Gets or sets a value indicating whether 
            the dataset is read only.
            </summary>
        </member>
        <member name="P:AM.Data.DataSetInfo.SelectCommandText">
            <summary>
            Gets or sets the select command text.
            </summary>
            <value>The select command text.</value>
        </member>
        <member name="P:AM.Data.DataSetInfo.Tables">
            <summary>
            Gets the table list.
            </summary>
        </member>
        <member name="T:AM.Data.DataTableInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Data.DataTableInfo.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Data.DataTableInfo.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="P:AM.Data.DataTableInfo.Columns">
            <summary>
            Gets the columns.
            </summary>
        </member>
        <member name="P:AM.Data.DataTableInfo.Name">
            <summary>
            Gets or sets the name of the table.
            </summary>
        </member>
        <member name="T:AM.Data.HiddenColumnAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="T:AM.Data.SortIndexAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Data.SortIndexAttribute.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:AM.Data.SortIndexAttribute.Index">
            <summary>
            Sort index.
            </summary>
        </member>
        <member name="T:AM.DelegateUtility">
            <summary>
            <see cref="T:System.Delegate"/> manipulation helper methods.
            </summary>
            <example>
            <para>Following code shows how to store and restore delegates.
            </para>
            <code>
            private void _button_Click ( object sender, EventArgs ea )
            {
            MessageBox.Show ( "Button clicked" );
            }
            
            public void SaveDelegate ()
            {
            EventHandler handler = _button_Click;
            string text = DelegateUtility.DelegateToString ( handler );
            File.WriteAllText ( "delegate.txt", text );
            }
            
            public void RestoreDelegate ()
            {
            string text = File.ReadAllText ( "delegate.txt" );
            EventHandler handler = DelegateUtility.StringToDelegate ( this, text );
            _button1.Click += handler;
            }
            </code>
            </example>
        </member>
        <member name="T:AM.Diagnostics.ConsoleProcessRunner">
            <summary>
            Runs console process and intercepts its output
            redirecting to text box.
            </summary>
        </member>
        <member name="M:AM.Diagnostics.ConsoleProcessRunner.#ctor(AM.IO.IConsoleOutputReceiver)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Diagnostics.ConsoleProcessRunner.Start(System.String,System.String)">
            <summary>
            Starts new process with the specified file name.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:AM.Diagnostics.ConsoleProcessRunner.Stop">
            <summary>
            Stops running process if any.
            </summary>
        </member>
        <member name="M:AM.Diagnostics.ConsoleProcessRunner.Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="P:AM.Diagnostics.ConsoleProcessRunner.Receiver">
            <summary>
            Gets the receiver.
            </summary>
        </member>
        <member name="P:AM.Diagnostics.ConsoleProcessRunner.RunningProcess">
            <summary>
            Gets the running process.
            </summary>
        </member>
        <member name="T:AM.Diagnostics.ConsoleTraceListener">
            <summary>
            Console TRACE listener.
            </summary>
        </member>
        <member name="M:AM.Diagnostics.ConsoleTraceListener.#ctor">
            <summary>
            Initializes a new instance of the 
            <see cref="T:AM.Diagnostics.ConsoleTraceListener"/> class.
            </summary>
        </member>
        <member name="M:AM.Diagnostics.ConsoleTraceListener.#ctor(System.String)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:AM.Diagnostics.ConsoleTraceListener"/> class.
            </summary>
            <param name="initializationData">
            The initialization data.</param>
            <remarks>Called by runtime.</remarks>
        </member>
        <member name="T:AM.DisposableObject">
            <summary>
            Little automation: class that dispose all 
            marked fields during finalization.
            </summary>
        </member>
        <member name="M:AM.DisposableObject.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.DisposableObject.#ctor(System.Boolean)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.DisposableObject.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:AM.DisposableObject.DisposeFields">
            <summary>
            Calls <c>Dispose ()</c> for all fields marked with
            <see cref="T:AM.AutoDisposeAttribute">AutoDispose attribute.</see>
            </summary>
        </member>
        <member name="M:AM.DisposableObject.CheckDisposed">
            <summary>
            Checks whether this instance disposed.
            </summary>
        </member>
        <member name="M:AM.DisposableObject.Dispose(System.Boolean)">
            <summary>
            Can be overriden.
            </summary>
        </member>
        <member name="M:AM.DisposableObject.Close">
            <summary>
            Alias for <c>Dispose</c>.
            </summary>
        </member>
        <member name="M:AM.DisposableObject.Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="P:AM.DisposableObject.Disposed">
            <summary>
            Whether the instance disposed.
            </summary>
        </member>
        <member name="P:AM.DisposableObject.DisposeByReflection">
            <summary>
             
            </summary>
        </member>
        <member name="T:AM.DisposableUtility">
            <summary>
            Helper methods for <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="M:AM.DisposableUtility.SafeDispose(System.IDisposable)">
            <summary>
            Check for <c>null</c>. Dispose only if
            not <c>null</c>.
            </summary>
        </member>
        <member name="T:AM.DuplicateKeyException">
            <summary>
            Duplicate key found.
            </summary>
        </member>
        <member name="M:AM.DuplicateKeyException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.DuplicateKeyException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.DuplicateKeyException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:AM.EmptyArray`1">
            <summary>
            
            </summary>
        </member>
        <member name="F:AM.EmptyArray`1.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="T:AM.ExceptionEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.ExceptionEventArgs.#ctor(System.Exception)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:AM.ExceptionEventArgs.Exception">
            <summary>
            Exception.
            </summary>
        </member>
        <member name="T:AM.ExceptionEventArgs`1">
            <summary>
            Information about exception.
            </summary>
        </member>
        <member name="M:AM.ExceptionEventArgs`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:AM.ExceptionEventArgs`1.Exception">
            <summary>
            Exception.
            </summary>
        </member>
        <member name="P:AM.ExceptionEventArgs`1.Handled">
            <summary>
            Handled?
            </summary>
        </member>
        <member name="T:AM.ExceptionUtility">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.ExceptionUtility.Throw(System.String,System.Object[])">
            <summary>
            Throw exception with message.
            </summary>
        </member>
        <member name="M:AM.ExceptionUtility.Unwrap(System.Exception)">
            <summary>
            Unwrap the <see cref="T:System.AggregateException"/>
            (or do nothing if not aggregate).
            </summary>
        </member>
        <member name="T:AM.FunctionalUtility">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.FunctionalUtility.Either``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``1},System.Func{``0,``1})">
            <summary>
            Ternary operator.
            </summary>
        </member>
        <member name="M:AM.FunctionalUtility.PipeTo``2(``0,System.Func{``0,``1})">
            <summary>
            Pipe the data to the function.
            </summary>
        </member>
        <member name="T:AM.FuncUtility">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.FuncUtility.Memoize``2(System.Func{``0,``1})">
            <summary>
            Memoizes the specified function.
            </summary>
        </member>
        <member name="M:AM.FuncUtility.RetryOnFault``1(System.Func{``0},System.Int32)">
            <summary>
            Borrowed from Stephen Toub book.
            </summary>
        </member>
        <member name="T:AM.InquiryEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:AM.InquiryEventArgs.Success">
            <summary>
            Gets or sets a success indication.
            </summary>
        </member>
        <member name="T:AM.IO.BinaryReaderUtility">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.IO.BinaryReaderUtility.ReadNonNullCollection``1(System.IO.BinaryReader)">
            <summary>
            Read <see cref="T:AM.Collections.NonNullCollection`1"/>
            </summary>
        </member>
        <member name="M:AM.IO.BinaryReaderUtility.ReadArray``1(System.IO.BinaryReader)">
            <summary>
            Read array from stream
            </summary>
        </member>
        <member name="M:AM.IO.BinaryReaderUtility.ReadByteArray(System.IO.BinaryReader)">
            <summary>
            Read array of bytes.
            </summary>
        </member>
        <member name="M:AM.IO.BinaryReaderUtility.ReadCollection``1(System.IO.BinaryReader,AM.Collections.NonNullCollection{``0})">
            <summary>
            Reads collection of items from the stream.
            </summary>
        </member>
        <member name="M:AM.IO.BinaryReaderUtility.ReadDateTime(System.IO.BinaryReader)">
            <summary>
            Read <see cref="T:System.DateTime"/> from the stream.
            </summary>
        </member>
        <member name="M:AM.IO.BinaryReaderUtility.ReadNullableDateTime(System.IO.BinaryReader)">
            <summary>
            Read <see cref="T:System.DateTime"/> from the stream.
            </summary>
        </member>
        <member name="M:AM.IO.BinaryReaderUtility.ReadInt16Array(System.IO.BinaryReader)">
            <summary>
            Read array of 16-bit integers.
            </summary>
        </member>
        <member name="M:AM.IO.BinaryReaderUtility.ReadInt32Array(System.IO.BinaryReader)">
            <summary>
            Read array of 32-bit integers.
            </summary>
        </member>
        <member name="M:AM.IO.BinaryReaderUtility.ReadInt64Array(System.IO.BinaryReader)">
            <summary>
            Read array of 64-bit integers.
            </summary>
        </member>
        <member name="M:AM.IO.BinaryReaderUtility.ReadList``1(System.IO.BinaryReader)">
            <summary>
            Reads list of items from the stream.
            </summary>
        </member>
        <member name="M:AM.IO.BinaryReaderUtility.ReadList``1(System.IO.BinaryReader,System.Collections.Generic.List{``0})">
            <summary>
            Reads list of items from the stream.
            </summary>
        </member>
        <member name="M:AM.IO.BinaryReaderUtility.ReadNullableByte(System.IO.BinaryReader)">
            <summary>
            Read nullable byte.
            </summary>
        </member>
        <member name="M:AM.IO.BinaryReaderUtility.ReadNullableDouble(System.IO.BinaryReader)">
            <summary>
            Read nullable double precision number.
            </summary>
        </member>
        <member name="M:AM.IO.BinaryReaderUtility.ReadNullableDecimal(System.IO.BinaryReader)">
            <summary>
            Read nullable decimal.
            </summary>
        </member>
        <member name="M:AM.IO.BinaryReaderUtility.ReadNullableInt16(System.IO.BinaryReader)">
            <summary>
            Read nullable 16-bit integer.
            </summary>
        </member>
        <member name="M:AM.IO.BinaryReaderUtility.ReadNullableInt32(System.IO.BinaryReader)">
            <summary>
            Read nullable 32-bit integer.
            </summary>
        </member>
        <member name="M:AM.IO.BinaryReaderUtility.ReadNullableInt32Array(System.IO.BinaryReader)">
            <summary>
            Read array of 32-bit integers.
            </summary>
        </member>
        <member name="M:AM.IO.BinaryReaderUtility.ReadNullableInt64(System.IO.BinaryReader)">
            <summary>
            Read nullable 64-bit integer.
            </summary>
        </member>
        <member name="M:AM.IO.BinaryReaderUtility.ReadNullableString(System.IO.BinaryReader)">
            <summary>
            Read nullable string.
            </summary>
        </member>
        <member name="M:AM.IO.BinaryReaderUtility.ReadNullableStringArray(System.IO.BinaryReader)">
            <summary>
            Read nullable array of strings.
            </summary>
        </member>
        <member name="M:AM.IO.BinaryReaderUtility.ReadNullableArray``1(System.IO.BinaryReader)">
            <summary>
            Read nullable array of objects.
            </summary>
        </member>
        <member name="M:AM.IO.BinaryReaderUtility.ReadPackedInt32(System.IO.BinaryReader)">
            <summary>
            Read 32-bit integer in packed format.
            </summary>
            <remarks>Borrowed from
            http://referencesource.microsoft.com/
            </remarks>
        </member>
        <member name="M:AM.IO.BinaryReaderUtility.ReadPackedInt64(System.IO.BinaryReader)">
            <summary>
            Read 64-bit integer in packed format.
            </summary>
            <remarks>Inspired by
            http://referencesource.microsoft.com/
            </remarks>
        </member>
        <member name="M:AM.IO.BinaryReaderUtility.ReadString(System.IO.BinaryReader,System.Int32)">
            <summary>
            Read string with given length.
            </summary>
        </member>
        <member name="M:AM.IO.BinaryReaderUtility.ReadStringArray(System.IO.BinaryReader)">
            <summary>
            Read array of strings.
            </summary>
        </member>
        <member name="T:AM.IO.BinaryWriterUtility">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.IO.BinaryWriterUtility.Write``1(System.IO.BinaryWriter,AM.Collections.NonNullCollection{``0})">
            <summary>
            Write the <see cref="T:AM.Collections.NonNullCollection`1"/>
            to the stream.
            </summary>
        </member>
        <member name="M:AM.IO.BinaryWriterUtility.Write(System.IO.BinaryWriter,System.Nullable{System.Byte})">
            <summary>
            Write nullable 8-bit integer.
            </summary>
        </member>
        <member name="M:AM.IO.BinaryWriterUtility.Write(System.IO.BinaryWriter,System.Nullable{System.Int16})">
            <summary>
            Write nullable 16-bit integer.
            </summary>
        </member>
        <member name="M:AM.IO.BinaryWriterUtility.Write(System.IO.BinaryWriter,System.Nullable{System.Int32})">
            <summary>
            Write nullable 32-bit integer.
            </summary>
        </member>
        <member name="M:AM.IO.BinaryWriterUtility.Write(System.IO.BinaryWriter,System.Nullable{System.Int64})">
            <summary>
            Write nullable 64-bit integer.
            </summary>
        </member>
        <member name="M:AM.IO.BinaryWriterUtility.Write(System.IO.BinaryWriter,System.Nullable{System.Decimal})">
            <summary>
            Write nullable decimal number.
            </summary>
        </member>
        <member name="M:AM.IO.BinaryWriterUtility.Write(System.IO.BinaryWriter,System.DateTime)">
            <summary>
            Write <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="M:AM.IO.BinaryWriterUtility.Write(System.IO.BinaryWriter,System.Nullable{System.DateTime})">
            <summary>
            Write nullable DateTime.
            </summary>
        </member>
        <member name="M:AM.IO.BinaryWriterUtility.Write(System.IO.BinaryWriter,System.Nullable{System.Double})">
            <summary>
            Write nullable double precision number.
            </summary>
        </member>
        <member name="M:AM.IO.BinaryWriterUtility.WriteArray(System.IO.BinaryWriter,System.Byte[])">
            <summary>
            Write array of bytes.
            </summary>
        </member>
        <member name="M:AM.IO.BinaryWriterUtility.WriteArray(System.IO.BinaryWriter,System.Int16[])">
            <summary>
            Write array of 16-bit integers.
            </summary>
        </member>
        <member name="M:AM.IO.BinaryWriterUtility.WriteArray(System.IO.BinaryWriter,System.Int32[])">
            <summary>
            Write array of 32-bit integers.
            </summary>
        </member>
        <member name="M:AM.IO.BinaryWriterUtility.WriteArray(System.IO.BinaryWriter,System.Int64[])">
            <summary>
            Write array of 64-bit integers.
            </summary>
        </member>
        <member name="M:AM.IO.BinaryWriterUtility.WriteArray(System.IO.BinaryWriter,System.String[])">
            <summary>
            Write array of strings.
            </summary>
        </member>
        <member name="M:AM.IO.BinaryWriterUtility.WriteArray``1(System.IO.BinaryWriter,``0[])">
            <summary>
            Write the array.
            </summary>
        </member>
        <member name="M:AM.IO.BinaryWriterUtility.WriteCollection``1(System.IO.BinaryWriter,AM.Collections.NonNullCollection{``0})">
            <summary>
            Writes the collection to the stream.
            </summary>
        </member>
        <member name="M:AM.IO.BinaryWriterUtility.WriteList``1(System.IO.BinaryWriter,System.Collections.Generic.List{``0})">
            <summary>
            Write the list to the stream.
            </summary>
        </member>
        <member name="M:AM.IO.BinaryWriterUtility.WriteNullable(System.IO.BinaryWriter,System.String)">
            <summary>
            Write nullable string.
            </summary>
        </member>
        <member name="M:AM.IO.BinaryWriterUtility.WriteNullableArray(System.IO.BinaryWriter,System.Int32[])">
            <summary>
            Write array of 32-bit integers.
            </summary>
        </member>
        <member name="M:AM.IO.BinaryWriterUtility.WriteNullableArray(System.IO.BinaryWriter,System.String[])">
            <summary>
            Write array of 32-bit integers.
            </summary>
        </member>
        <member name="M:AM.IO.BinaryWriterUtility.WriteNullableArray``1(System.IO.BinaryWriter,``0[])">
            <summary>
            Write array of objects.
            </summary>
        </member>
        <member name="M:AM.IO.BinaryWriterUtility.WritePackedInt32(System.IO.BinaryWriter,System.Int32)">
            <summary>
            Write 32-bit integer in packed format.
            </summary>
            <remarks>Borrowed from
            http://referencesource.microsoft.com/
            </remarks>
        </member>
        <member name="M:AM.IO.BinaryWriterUtility.WritePackedInt64(System.IO.BinaryWriter,System.Int64)">
            <summary>
            Write 64-bit integer in packed format.
            </summary>
            <remarks>Inspired by
            http://referencesource.microsoft.com/
            </remarks>
        </member>
        <member name="T:AM.IO.ByteNavigator">
            <summary>
            Навигатор по байтовому массиву.
            </summary>
        </member>
        <member name="F:AM.IO.ByteNavigator.EOF">
            <summary>
            Признак конца данных.
            </summary>
        </member>
        <member name="M:AM.IO.ByteNavigator.#ctor(System.Byte[])">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.IO.ByteNavigator.#ctor(System.Byte[],System.Int32)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.IO.ByteNavigator.#ctor(System.Byte[],System.Int32,System.Text.Encoding)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.IO.ByteNavigator.#ctor(System.Byte[],System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.IO.ByteNavigator.Clone">
            <summary>
            Clone the navigator.
            </summary>
        </member>
        <member name="M:AM.IO.ByteNavigator.FromFile(System.String)">
            <summary>
            Навигатор по двоичному файлу.
            </summary>
        </member>
        <member name="M:AM.IO.ByteNavigator.GetRemainingData">
            <summary>
            Выдать остаток данных.
            </summary>
        </member>
        <member name="M:AM.IO.ByteNavigator.IsControl">
            <summary>
            Управляющий символ?
            </summary>
        </member>
        <member name="M:AM.IO.ByteNavigator.IsDigit">
            <summary>
            Цифра?
            </summary>
        </member>
        <member name="M:AM.IO.ByteNavigator.IsLetter">
            <summary>
            Буква?
            </summary>
        </member>
        <member name="M:AM.IO.ByteNavigator.IsLetterOrDigit">
            <summary>
            Буква или цифра?
            </summary>
        </member>
        <member name="M:AM.IO.ByteNavigator.IsNumber">
            <summary>
            Часть числа?
            </summary>
        </member>
        <member name="M:AM.IO.ByteNavigator.IsPunctuation">
            <summary>
            Знак пунктуации?
            </summary>
        </member>
        <member name="M:AM.IO.ByteNavigator.IsSeparator">
            <summary>
            Разделитель?
            </summary>
        </member>
        <member name="M:AM.IO.ByteNavigator.IsSurrogate">
            <summary>
            Суррогат?
            </summary>
        </member>
        <member name="M:AM.IO.ByteNavigator.IsSymbol">
            <summary>
            Символ?
            </summary>
        </member>
        <member name="M:AM.IO.ByteNavigator.IsWhiteSpace">
            <summary>
            Пробельный символ?
            </summary>
        </member>
        <member name="M:AM.IO.ByteNavigator.PeekByte">
            <summary>
            Подсмотреть один байт.
            </summary>
        </member>
        <member name="M:AM.IO.ByteNavigator.PeekChar">
            <summary>
            Peek one char.
            </summary>
        </member>
        <member name="M:AM.IO.ByteNavigator.ReadByte">
            <summary>
            Прочитать один байт
            (текущая позиция продвигается).
            </summary>
        </member>
        <member name="M:AM.IO.ByteNavigator.ReadChar">
            <summary>
            Read one char.
            </summary>
        </member>
        <member name="M:AM.IO.ByteNavigator.ReadLine">
            <summary>
            Чтение до конца строки.
            </summary>
        </member>
        <member name="M:AM.IO.ByteNavigator.SkipLine">
            <summary>
            Пропускаем строку
            </summary>
        </member>
        <member name="P:AM.IO.ByteNavigator.Encoding">
            <summary>
            Используемая кодировка.
            </summary>
        </member>
        <member name="P:AM.IO.ByteNavigator.IsEOF">
            <summary>
            Достигнут конец данных?
            </summary>
        </member>
        <member name="P:AM.IO.ByteNavigator.Length">
            <summary>
            Длина массива.
            </summary>
        </member>
        <member name="P:AM.IO.ByteNavigator.Position">
            <summary>
            Текущая позиция.
            </summary>
        </member>
        <member name="T:AM.IO.CompressionUtility">
            <summary>
            Useful routines that simplifies data compression/decompression.
            </summary>
        </member>
        <member name="M:AM.IO.CompressionUtility.Compress(System.Byte[])">
            <summary>
            Compress the data.
            </summary>
        </member>
        <member name="M:AM.IO.CompressionUtility.Decompress(System.Byte[])">
            <summary>
            Decompress the data.
            </summary>
        </member>
        <member name="T:AM.IO.CountingMemoryStream">
            <summary>
            <see cref="T:System.IO.MemoryStream"/> that counts its reached size.
            </summary>
        </member>
        <member name="M:AM.IO.CountingMemoryStream.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.IO.CountingMemoryStream.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.IO.CountingMemoryStream.ToArray">
            <inheritdoc cref="M:System.IO.MemoryStream.ToArray"/>
        </member>
        <member name="P:AM.IO.CountingMemoryStream.ReachedSize">
            <summary>
            Reached size, bytes.
            </summary>
        </member>
        <member name="T:AM.IO.DirectoryUtility">
            <summary>
            Directory manipulation routines.
            </summary>
        </member>
        <member name="F:AM.IO.DirectoryUtility._separator">
            <summary>
            Разделитель элементов в маске файлов.
            Используется в GetFiles().
            </summary>
        </member>
        <member name="M:AM.IO.DirectoryUtility.ClearDirectory(System.String)">
            <summary>
            Clears the specified directory. Deletes all files 
            and subdirectories
            from the directory.
            </summary>
            <param name="path">Path to the directory.</param>
        </member>
        <member name="M:AM.IO.DirectoryUtility.GetFiles(System.String,System.String,System.Boolean)">
            <summary>
            Gets list of files in specified path.
            </summary>
            <param name="path"></param>
            <param name="mask"></param>
            <param name="recursive"></param>
            <returns></returns>
        </member>
        <member name="M:AM.IO.DirectoryUtility.Glob(System.String)">
            <summary>
            Расширяет регулярное выражение DOS/Windows до списка файлов.
            </summary>
            <param name="wildcard">Регулярное выражение, включающее
            в себя символы * и ?, например *.exe или c:\*.bat.</param>
            <returns>Массив имен файлов, соответствующих регулярному
            выражению. Если параметр <paramref name="wildcard"/>
            включал имя директории, то каждое имя в массив также 
            будет содержать имя директории.</returns>
            <remarks>В поиске участвуют только файлы, но не директории.
            </remarks>
        </member>
        <member name="T:AM.IO.DumpUtility">
            <summary>
            Utility methods for dumping binary data.
            </summary>
        </member>
        <member name="M:AM.IO.DumpUtility.Dump``1(System.IO.TextWriter,``0[])">
            <summary>
            Dump the array of data.
            </summary>
        </member>
        <member name="M:AM.IO.DumpUtility.Dump``1(System.IO.Stream,``0[])">
            <summary>
            Dump the array of data.
            </summary>
        </member>
        <member name="M:AM.IO.DumpUtility.DumpToConsole``1(``0[])">
            <summary>
            Dump the array of data to console output.
            </summary>
        </member>
        <member name="M:AM.IO.DumpUtility.DumpToOutput``1(AM.Text.Output.AbstractOutput,``0[])">
            <summary>
            Dump the array of data to <see cref="T:AM.Text.Output.AbstractOutput"/>.
            </summary>
        </member>
        <member name="M:AM.IO.DumpUtility.DumpToText``1(``0[])">
            <summary>
            Dump the array of data to string.
            </summary>
        </member>
        <member name="T:AM.IO.IConsoleOutputReceiver">
            <summary>
            Receives console output.
            </summary>
        </member>
        <member name="M:AM.IO.IConsoleOutputReceiver.ReceiveConsoleOutput(System.String)">
            <summary>
            Receives the console line.
            </summary>
        </member>
        <member name="T:AM.IO.IniFile">
            <summary>
            Simple INI-file reader/writer.
            </summary>
        </member>
        <member name="M:AM.IO.IniFile.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.IO.IniFile.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.IO.IniFile.#ctor(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.IO.IniFile.ApplyTo(AM.IO.IniFile)">
            <summary>
            Apply to the INI-file.
            </summary>
        </member>
        <member name="M:AM.IO.IniFile.Clear">
            <summary>
            Clear the INI-file.
            </summary>
        </member>
        <member name="M:AM.IO.IniFile.ClearModification">
            <summary>
            Clear modification flag in all sections and lines.
            </summary>
        </member>
        <member name="M:AM.IO.IniFile.ContainsSection(System.String)">
            <summary>
            Contains section with given name?
            </summary>
        </member>
        <member name="M:AM.IO.IniFile.CreateSection(System.String)">
            <summary>
            Create section with specified name.
            </summary>
        </member>
        <member name="M:AM.IO.IniFile.GetOrCreateSection(System.String)">
            <summary>
            Get or create (if not exist) section with given name.
            </summary>
        </member>
        <member name="M:AM.IO.IniFile.GetSection(System.String)">
            <summary>
            Get section with given name.
            </summary>
        </member>
        <member name="M:AM.IO.IniFile.GetValue(System.String,System.String,System.String)">
            <summary>
            Get value from the given section and key.
            </summary>
        </member>
        <member name="M:AM.IO.IniFile.GetValue``1(System.String,System.String,``0)">
            <summary>
            Get value from the given section and key.
            </summary>
        </member>
        <member name="M:AM.IO.IniFile.RemoveSection(System.String)">
            <summary>
            Remove specified section.
            </summary>
        </member>
        <member name="M:AM.IO.IniFile.RemoveValue(System.String,System.String)">
            <summary>
            Remove specified value.
            </summary>
        </member>
        <member name="M:AM.IO.IniFile.Read">
            <summary>
            Reread the <see cref="T:AM.IO.IniFile"/> from the file.
            </summary>
        </member>
        <member name="M:AM.IO.IniFile.Read(System.String,System.Text.Encoding)">
            <summary>
            Reread from the file.
            </summary>
        </member>
        <member name="M:AM.IO.IniFile.Read(System.IO.TextReader)">
            <summary>
            Reread from the stream.
            </summary>
        </member>
        <member name="M:AM.IO.IniFile.Save(System.IO.TextWriter)">
            <summary>
            Write INI-file into the stream.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:AM.IO.IniFile.Save(System.String)">
            <summary>
            Save the INI-file to specified file.
            </summary>
        </member>
        <member name="M:AM.IO.IniFile.SetValue(System.String,System.String,System.String)">
            <summary>
            Set value for specified section and key.
            </summary>
        </member>
        <member name="M:AM.IO.IniFile.SetValue``1(System.String,System.String,``0)">
            <summary>
            Set value for specified section and key.
            </summary>
        </member>
        <member name="M:AM.IO.IniFile.WriteModifiedValues(System.IO.TextWriter)">
            <summary>
            Write modified values to the stream.
            </summary>
        </member>
        <member name="M:AM.IO.IniFile.RestoreFromStream(System.IO.BinaryReader)">
            <inheritdoc cref="M:AM.Runtime.IHandmadeSerializable.RestoreFromStream(System.IO.BinaryReader)"/>
        </member>
        <member name="M:AM.IO.IniFile.SaveToStream(System.IO.BinaryWriter)">
            <inheritdoc cref="M:AM.Runtime.IHandmadeSerializable.SaveToStream(System.IO.BinaryWriter)"/>
        </member>
        <member name="M:AM.IO.IniFile.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:AM.IO.IniFile.Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="P:AM.IO.IniFile.Encoding">
            <summary>
            Encoding.
            </summary>
        </member>
        <member name="P:AM.IO.IniFile.FileName">
            <summary>
            Name of the file.
            </summary>
        </member>
        <member name="P:AM.IO.IniFile.Modified">
            <summary>
            Modified?
            </summary>
        </member>
        <member name="P:AM.IO.IniFile.Item(System.String)">
            <summary>
            Section indexer.
            </summary>
        </member>
        <member name="P:AM.IO.IniFile.Item(System.String,System.String)">
            <summary>
            Value indexer.
            </summary>
        </member>
        <member name="P:AM.IO.IniFile.Writable">
            <summary>
            Writable?
            </summary>
        </member>
        <member name="T:AM.IO.IniFile.Line">
            <summary>
            Line (element) of the INI-file.
            </summary>
        </member>
        <member name="M:AM.IO.IniFile.Line.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:AM.IO.IniFile.Line.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.IO.IniFile.Line.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.IO.IniFile.Line.Write(System.IO.TextWriter)">
            <summary>
            Write the line to the stream.
            </summary>
        </member>
        <member name="M:AM.IO.IniFile.Line.RestoreFromStream(System.IO.BinaryReader)">
            <inheritdoc cref="M:AM.Runtime.IHandmadeSerializable.RestoreFromStream(System.IO.BinaryReader)"/>
        </member>
        <member name="M:AM.IO.IniFile.Line.SaveToStream(System.IO.BinaryWriter)">
            <inheritdoc cref="M:AM.Runtime.IHandmadeSerializable.SaveToStream(System.IO.BinaryWriter)"/>
        </member>
        <member name="M:AM.IO.IniFile.Line.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="P:AM.IO.IniFile.Line.Key">
            <summary>
            Key (name) of the element.
            </summary>
        </member>
        <member name="P:AM.IO.IniFile.Line.Value">
            <summary>
            Value of the element.
            </summary>
        </member>
        <member name="P:AM.IO.IniFile.Line.Modified">
            <summary>
            Modification flag.
            </summary>
        </member>
        <member name="T:AM.IO.IniFile.Section">
            <summary>
            INI-file section.
            </summary>
        </member>
        <member name="M:AM.IO.IniFile.Section.Add(System.String,System.String)">
            <summary>
            Add new item to the section.
            </summary>
        </member>
        <member name="M:AM.IO.IniFile.Section.Add(AM.IO.IniFile.Line)">
            <summary>
            Add new line to the section.
            </summary>
        </member>
        <member name="M:AM.IO.IniFile.Section.ApplyTo(AM.IO.IniFile.Section)">
            <summary>
            Apply to other section.
            </summary>
        </member>
        <member name="M:AM.IO.IniFile.Section.Clear">
            <summary>
            Clear the section.
            </summary>
        </member>
        <member name="M:AM.IO.IniFile.Section.ContainsKey(System.String)">
            <summary>
            Whether the section have line with given key?
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AM.IO.IniFile.Section.GetValue(System.String,System.String)">
            <summary>
            Get value associated with specified key.
            </summary>
        </member>
        <member name="M:AM.IO.IniFile.Section.GetValue``1(System.String,``0)">
            <summary>
            Get value associated with given key.
            </summary>
        </member>
        <member name="M:AM.IO.IniFile.Section.Remove(System.String)">
            <summary>
            Remove specified key.
            </summary>
        </member>
        <member name="M:AM.IO.IniFile.Section.SetName(System.String)">
            <summary>
            Set name of the section.
            </summary>
        </member>
        <member name="M:AM.IO.IniFile.Section.SetValue(System.String,System.String)">
            <summary>
            Set value associated with given key.
            </summary>
        </member>
        <member name="M:AM.IO.IniFile.Section.SetValue``1(System.String,``0)">
            <summary>
            Set value associate with given key.
            </summary>
        </member>
        <member name="M:AM.IO.IniFile.Section.TryGetValue(System.String,System.String@)">
            <summary>
            Try to get value for given key.
            </summary>
        </member>
        <member name="M:AM.IO.IniFile.Section.RestoreFromStream(System.IO.BinaryReader)">
            <inheritdoc cref="M:AM.Runtime.IHandmadeSerializable.RestoreFromStream(System.IO.BinaryReader)"/>
        </member>
        <member name="M:AM.IO.IniFile.Section.SaveToStream(System.IO.BinaryWriter)">
            <inheritdoc cref="M:AM.Runtime.IHandmadeSerializable.SaveToStream(System.IO.BinaryWriter)"/>
        </member>
        <member name="M:AM.IO.IniFile.Section.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="P:AM.IO.IniFile.Section.Count">
            <summary>
            Count of lines.
            </summary>
        </member>
        <member name="P:AM.IO.IniFile.Section.Keys">
            <summary>
            All the keys of the section.
            </summary>
        </member>
        <member name="P:AM.IO.IniFile.Section.Modified">
            <summary>
            Section is modified?
            </summary>
        </member>
        <member name="P:AM.IO.IniFile.Section.Name">
            <summary>
            Section name.
            </summary>
        </member>
        <member name="P:AM.IO.IniFile.Section.Owner">
            <summary>
            INI-file.
            </summary>
        </member>
        <member name="P:AM.IO.IniFile.Section.Item(System.String)">
            <summary>
            Indexer.
            </summary>
        </member>
        <member name="T:AM.IO.InsistentFile">
            <summary>
            
            </summary>
        </member>
        <member name="F:AM.IO.InsistentFile.DefaultTimeout">
            <summary>
            Default value for <see cref="P:AM.IO.InsistentFile.Timeout"/> property.
            </summary>
        </member>
        <member name="F:AM.IO.InsistentFile.DefaultSleep">
            <summary>
            Default value for <see cref="P:AM.IO.InsistentFile.SleepInterval"/> property.
            </summary>
        </member>
        <member name="M:AM.IO.InsistentFile.#cctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.IO.InsistentFile.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <inheritdoc cref="M:System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)"/>.
        </member>
        <member name="M:AM.IO.InsistentFile.OpenForExclusiveRead(System.String)">
            <summary>
            Open specified file for exclusive reading.
            </summary>
        </member>
        <member name="M:AM.IO.InsistentFile.OpenForExclusiveWrite(System.String)">
            <summary>
            Open specified file for exclusive writing.
            </summary>
        </member>
        <member name="M:AM.IO.InsistentFile.OpenForSharedRead(System.String)">
            <summary>
            Open specified file for shared reading.
            </summary>
        </member>
        <member name="M:AM.IO.InsistentFile.OpenForSharedWrite(System.String)">
            <summary>
            Open specified file for shared reading/writing.
            </summary>
        </member>
        <member name="P:AM.IO.InsistentFile.SleepInterval">
            <summary>
            Interval to sleep between subsequential attempts,
            milliseconds.
            </summary>
        </member>
        <member name="P:AM.IO.InsistentFile.Timeout">
            <summary>
            Timeout for operations, milliseconds.
            </summary>
        </member>
        <member name="T:AM.IO.MultiStream">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.IO.MultiStream.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AM.IO.MultiStream"/> class.
            </summary>
        </member>
        <member name="M:AM.IO.MultiStream.Flush">
            <inheritdoc cref="M:System.IO.Stream.Flush"/>
        </member>
        <member name="M:AM.IO.MultiStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)"/>
        </member>
        <member name="M:AM.IO.MultiStream.SetLength(System.Int64)">
            <inheritdoc cref="M:System.IO.Stream.SetLength(System.Int64)"/>
        </member>
        <member name="M:AM.IO.MultiStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)"/>
        </member>
        <member name="M:AM.IO.MultiStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)"/>
        </member>
        <member name="M:AM.IO.MultiStream.Close">
            <inheritdoc cref="M:System.IO.Stream.Close"/>
        </member>
        <member name="M:AM.IO.MultiStream.Dispose(System.Boolean)">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="P:AM.IO.MultiStream.Streams">
            <summary>
            Gets the streams.
            </summary>
            <value>The streams.</value>
        </member>
        <member name="P:AM.IO.MultiStream.CanRead">
            <inheritdoc cref="P:System.IO.Stream.CanRead"/>
        </member>
        <member name="P:AM.IO.MultiStream.CanSeek">
            <inheritdoc cref="P:System.IO.Stream.CanSeek"/>
        </member>
        <member name="P:AM.IO.MultiStream.CanWrite">
            <inheritdoc cref="P:System.IO.Stream.CanWrite"/>
        </member>
        <member name="P:AM.IO.MultiStream.Length">
            <inheritdoc cref="P:System.IO.Stream.Length"/>
        </member>
        <member name="P:AM.IO.MultiStream.Position">
            <inheritdoc cref="P:System.IO.Stream.Position"/>
        </member>
        <member name="T:AM.IO.NonCloseableStream">
            <summary>
            Stream that likes to be non-closed.
            To close the stream call 
            <see cref="M:AM.IO.NonCloseable.NonCloseableStream.ReallyClose"/>.
            </summary>
        </member>
        <member name="M:AM.IO.NonCloseableStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the
            <see cref="T:AM.IO.NonCloseableStream"/> class.
            </summary>
        </member>
        <member name="M:AM.IO.NonCloseableStream.ReallyClose">
            <summary>
            Really closes the stream.
            </summary>
        </member>
        <member name="M:AM.IO.NonCloseableStream.Close">
            <summary>
            NOT closes the current stream and releases any resources 
            (such as sockets and file handles) associated with the current stream.
            </summary>
            <seealso cref="M:AM.IO.NonCloseable.NonCloseableStream.ReallyClose"/>
        </member>
        <member name="M:AM.IO.NonCloseableStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any 
            buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs. </exception>
        </member>
        <member name="M:AM.IO.NonCloseableStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream 
            and advances the position within the stream by the 
            number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When 
            this method returns, the buffer contains the specified 
            byte array with the values between offset and 
            (offset + count - 1) replaced by the bytes read from 
            the current source.</param>
            <param name="offset">The zero-based byte offset 
            in buffer at which to begin storing the data read from 
            the current stream.</param>
            <param name="count">The maximum number of 
            bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can 
            be less than the number of bytes requested if that many 
            bytes are not currently available, or zero (0) if the end of 
            the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentException">The sum 
            of offset and count is larger than the buffer length. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods 
            were called after the stream was closed. </exception>
            <exception cref="T:System.NotSupportedException">The stream 
            does not support reading. </exception>
            <exception cref="T:System.ArgumentNullException">buffer 
            is <c>null</c>. </exception>
            <exception cref="T:System.IO.IOException">An I/O error 
            occurs. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            offset or count is negative. </exception>
        </member>
        <member name="M:AM.IO.NonCloseableStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the origin parameter.
            </param>
            <param name="origin">A value of type 
            <see cref="T:System.IO.SeekOrigin"></see> indicating the reference 
            point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. 
            </exception>
            <exception cref="T:System.NotSupportedException">The stream 
            does not support seeking, such as if the stream is constructed from 
            a pipe or console output. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods 
            were called after the stream was closed. </exception>
        </member>
        <member name="M:AM.IO.NonCloseableStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of 
            the current stream in bytes.</param>
            <exception cref="T:System.NotSupportedException">
            The stream does not support both writing and seeking, such as 
            if the stream is constructed from a pipe or console output. 
            </exception>
            <exception cref="T:System.IO.IOException">An I/O 
            error occurs. </exception>
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:AM.IO.NonCloseableStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances 
            the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method 
            copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset 
            in buffer at which to begin copying bytes to the current stream.
            </param>
            <param name="count">The number of bytes to be written 
            to the current stream.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. 
            </exception>
            <exception cref="T:System.NotSupportedException">The stream 
            does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods 
            were called after the stream was closed. </exception>
            <exception cref="T:System.ArgumentNullException">buffer 
            is <c>null</c>. </exception>
            <exception cref="T:System.ArgumentException">The sum 
            of offset and count is greater than the buffer length. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            offset or count is negative. </exception>
        </member>
        <member name="M:AM.IO.NonCloseableStream.System#IDisposable#Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="P:AM.IO.NonCloseableStream.CanRead">
            <summary>
            Gets a value indicating whether the current
            stream supports reading.
            </summary>
        </member>
        <member name="P:AM.IO.NonCloseableStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <value></value>
            <returns><c>true</c> if the stream supports seeking; 
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:AM.IO.NonCloseableStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <value></value>
            <returns><c>true</c> if the stream supports writing; 
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:AM.IO.NonCloseableStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <value></value>
            <returns>A long value representing the 
            length of the stream in bytes.</returns>
            <exception cref="T:System.NotSupportedException">
            A class derived from Stream does not support seeking. 
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed. </exception>
        </member>
        <member name="P:AM.IO.NonCloseableStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <value></value>
            <returns>The current position within the stream.</returns>
            <exception cref="T:System.IO.IOException">An I/O 
            error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream 
            does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods 
            were called after the stream was closed. </exception>
        </member>
        <member name="T:AM.IO.NonCloseableStreamReader">
            <summary>
            Non-closeable stream reader.
            </summary>
        </member>
        <member name="M:AM.IO.NonCloseableStreamReader.#ctor(System.IO.Stream)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.IO.NonCloseableStreamReader.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.IO.NonCloseableStreamReader.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.IO.NonCloseableStreamReader.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.IO.NonCloseableStreamReader.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.IO.NonCloseableStreamReader.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.IO.NonCloseableStreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.IO.NonCloseableStreamReader.#ctor(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.IO.NonCloseableStreamReader.#ctor(System.IO.StreamReader)">
            <summary>
            Constructor.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:AM.IO.NonCloseableStreamReader.ReallyClose">
            <summary>
            Really close the reader.
            </summary>
        </member>
        <member name="M:AM.IO.NonCloseableStreamReader.Close">
            <summary>
            NOT closes the <see cref="T:System.IO.StreamReader"></see> 
            object and the underlying stream, and releases any system resources 
            associated with the reader.
            </summary>
        </member>
        <member name="M:AM.IO.NonCloseableStreamReader.System#IDisposable#Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="T:AM.IO.NonCloseable.NonCloseableTextReader">
            <summary>
            Non-closeable <see cref="T:System.IO.TextReader"/>.
            Call <see cref="M:AM.IO.NonCloseable.NonCloseableTextReader.ReallyClose"/> to close it.
            </summary>
        </member>
        <member name="M:AM.IO.NonCloseable.NonCloseableTextReader.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:AM.IO.NonCloseable.NonCloseableTextReader"/> class.
            </summary>
            <param name="innerReader">The inner reader.</param>
        </member>
        <member name="M:AM.IO.NonCloseable.NonCloseableTextReader.ReallyClose">
            <summary>
            Really closes the reader.
            </summary>
        </member>
        <member name="M:AM.IO.NonCloseable.NonCloseableTextReader.Close">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.IO.NonCloseable.NonCloseableTextReader.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:AM.IO.NonCloseable.NonCloseableTextReader.Peek">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AM.IO.NonCloseable.NonCloseableTextReader.Read">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AM.IO.NonCloseable.NonCloseableTextReader.Read(System.Char[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AM.IO.NonCloseable.NonCloseableTextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AM.IO.NonCloseable.NonCloseableTextReader.ReadLine">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AM.IO.NonCloseable.NonCloseableTextReader.ReadToEnd">
            <summary>
            Reads all characters from the current position to the end 
            of the TextReader and returns them as one string.
            </summary>
            <returns>
            A string containing all characters from the current position 
            to the end of the TextReader.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The number of characters in the next line is larger than <see cref="F:System.Int32.MaxValue"></see></exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.OutOfMemoryException">There is insufficient memory to allocate a buffer for the returned string. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextReader"></see> is closed. </exception>
        </member>
        <member name="M:AM.IO.NonCloseable.NonCloseableTextReader.System#IDisposable#Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="T:AM.IO.NotifyStream">
            <summary>
            <see cref="T:System.IO.Stream"/> with write notifications.
            </summary>
        </member>
        <member name="M:AM.IO.NotifyStream.#ctor(System.IO.Stream)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.IO.NotifyStream.Finalize">
            <summary>
            Releases unmanaged resources and performs 
            other cleanup operations before the
            <see cref="T:AM.IO.NotifyStream"/> 
            is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:AM.IO.NotifyStream.OnStreamChanged">
            <summary>
            Called when stream content is changed.
            </summary>
        </member>
        <member name="M:AM.IO.NotifyStream.Flush">
            <inheritdoc />
        </member>
        <member name="M:AM.IO.NotifyStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AM.IO.NotifyStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc />
        </member>
        <member name="M:AM.IO.NotifyStream.SetLength(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:AM.IO.NotifyStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:AM.IO.NotifyStream.System#IDisposable#Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="E:AM.IO.NotifyStream.StreamChanged">
            <summary>
            Issued when stream content is changed.
            </summary>
        </member>
        <member name="P:AM.IO.NotifyStream.BaseStream">
            <summary>
            Base stream.
            </summary>
        </member>
        <member name="P:AM.IO.NotifyStream.CanRead">
            <inheritdoc />
        </member>
        <member name="P:AM.IO.NotifyStream.CanSeek">
            <inheritdoc />
        </member>
        <member name="P:AM.IO.NotifyStream.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:AM.IO.NotifyStream.Length">
            <inheritdoc />
        </member>
        <member name="P:AM.IO.NotifyStream.Position">
            <inheritdoc />
        </member>
        <member name="T:AM.IO.SafeSaveStream">
            <summary>
            Не перезаписывает имеющийся файл в случае неудачи.
            </summary>
        </member>
        <member name="M:AM.IO.SafeSaveStream.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.IO.SafeSaveStream.Dispose(System.Boolean)">
            <inheritdoc cref="M:System.IO.Stream.Dispose(System.Boolean)"/>
        </member>
        <member name="P:AM.IO.SafeSaveStream.OriginalFileName">
            <summary>
            Original filename.
            </summary>
        </member>
        <member name="P:AM.IO.SafeSaveStream.TemporaryFileName">
            <summary>
            Temporary filename.
            </summary>
        </member>
        <member name="T:AM.IO.StreamPacker">
            <summary>
            Упаковщик: пытается записать данные в поток, 
            используя по возможности меньше байт ( но до
            архиватора не дотягивает ).
            </summary>
            <remark>This class is not CLS-compliant.</remark>
        </member>
        <member name="M:AM.IO.StreamPacker.PackUInt32(System.IO.Stream,System.UInt32)">
            <summary>
            Выводит в поток 4-байтовое целое.
            </summary>
            <param name="stream">Поток. Может равняться null.</param>
            <param name="val">Целое.</param>
            <returns>Количество байт, необходимых для вывода.</returns>
        </member>
        <member name="M:AM.IO.StreamPacker.UnpackUInt32(System.IO.Stream)">
            <summary>
            Считывает 4-байтовое целое из потока.
            </summary>
            <param name="stream">Поток.</param>
            <returns>Считанное значение.</returns>
        </member>
        <member name="M:AM.IO.StreamPacker.PackUInt64(System.IO.Stream,System.UInt64)">
            <summary>
            Выводит в поток 8-байтовое целое.
            </summary>
            <param name="stream">Поток. Может равняться null.</param>
            <param name="val">Целое.</param>
            <returns>Количество байт, необходимых для вывода.</returns>
        </member>
        <member name="M:AM.IO.StreamPacker.UnpackUInt64(System.IO.Stream)">
            <summary>
            Считывает 8-байтовое целое из потока.
            </summary>
            <param name="stream">Поток.</param>
            <returns>Считанное целое.</returns>
        </member>
        <member name="M:AM.IO.StreamPacker.PackBytes(System.IO.Stream,System.Byte[])">
            <summary>
            Записывает массив байт в поток.
            </summary>
            <param name="stream">Поток.</param>
            <param name="bytes">Массив.</param>
            <returns>Количество байт, необходимых для вывода.</returns>
        </member>
        <member name="M:AM.IO.StreamPacker.UnpackBytes(System.IO.Stream)">
            <summary>
            Считывает массив байт из потока.
            </summary>
            <param name="stream">Поток.</param>
            <returns>Считанный массив.</returns>
        </member>
        <member name="M:AM.IO.StreamPacker.PackString(System.IO.Stream,System.Text.Encoding,System.String)">
            <summary>
            Записывает строку в поток в указанной кодировке.
            </summary>
            <param name="stream">Поток.</param>
            <param name="encoding">Кодировка.</param>
            <param name="text">Строка.</param>
            <returns>Количество байт, необходимых для вывода.</returns>
        </member>
        <member name="M:AM.IO.StreamPacker.PackString(System.IO.Stream,System.String)">
            <summary>
            Записывает строку в поток в UTF8.
            </summary>
            <param name="stream">Поток.</param>
            <param name="value">Строка.</param>
            <returns>Количество байт, необходимых для вывода.</returns>
        </member>
        <member name="M:AM.IO.StreamPacker.UnpackString(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Считывает строку из потока в заданной кодировке.
            </summary>
            <param name="stream">Поток.</param>
            <param name="encoding">Кодировка.</param>
            <returns>Считанная строка.</returns>
        </member>
        <member name="M:AM.IO.StreamPacker.UnpackString(System.IO.Stream)">
            <summary>
            Считывает строку из потока в UTF8.
            </summary>
            <param name="stream">Поток.</param>
            <returns>Считанная строка.</returns>
        </member>
        <member name="T:AM.IO.TextReaderUtility">
            <summary>
            Helpers for <see cref="T:System.IO.TextReader"/>.
            </summary>
        </member>
        <member name="M:AM.IO.TextReaderUtility.OpenRead(System.String,System.Text.Encoding)">
            <summary>
            Open file for reading.
            </summary>
        </member>
        <member name="M:AM.IO.TextReaderUtility.RequireLine(System.IO.TextReader)">
            <summary>
            Обязательное чтение строки.
            </summary>
        </member>
        <member name="T:AM.IO.TextWriterUtility">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.IO.TextWriterUtility.Append(System.String,System.Text.Encoding)">
            <summary>
            Open file for append.
            </summary>
        </member>
        <member name="M:AM.IO.TextWriterUtility.Create(System.String,System.Text.Encoding)">
            <summary>
            Open file for writing.
            </summary>
        </member>
        <member name="T:AM.IO.VersionStream">
            <summary>
            Versioning <see cref="T:System.IO.Stream"/>.
            </summary>
            <seealso cref="T:AM.IO.NotifyStream"/>
        </member>
        <member name="M:AM.IO.VersionStream.#ctor(System.IO.Stream)">
            <summary>
            Constructor
            </summary>
            <param name="baseStream"></param>
        </member>
        <member name="M:AM.IO.VersionStream.ResetVersion">
            <summary>
            Set version count to zero.
            </summary>
        </member>
        <member name="M:AM.IO.VersionStream.OnStreamChanged">
            <inheritdoc cref="M:AM.IO.NotifyStream.OnStreamChanged"/>
        </member>
        <member name="P:AM.IO.VersionStream.Version">
            <summary>
            Number of stream content modifications.
            </summary>
        </member>
        <member name="T:AM.ISynchronize">
            <summary>
            General interface of synchronizable objects.
            </summary>
        </member>
        <member name="P:AM.ISynchronize.SyncRoot">
            <summary>
            Synchronization root for the object.
            </summary>
            <remarks><para>Notes for implementers:</para>
            <list type="bullet">
            <item><see cref="P:AM.ISynchronize.SyncRoot"/> must be non-<c>null</c>.</item>
            <item><see cref="P:AM.ISynchronize.SyncRoot"/> must be unique for each
            synchronizable object.</item>
            </list>
            </remarks>
        </member>
        <member name="T:AM.IVerifiable">
            <summary>
            Interface for object state verification
            </summary>
        </member>
        <member name="M:AM.IVerifiable.Verify(System.Boolean)">
            <summary>
            Verify object state.
            </summary>
        </member>
        <member name="T:AM.Json.JsonUtility">
            <summary>
            Helper routines for JSON.
            </summary>
        </member>
        <member name="M:AM.Json.JsonUtility.ExpandTypes(Newtonsoft.Json.Linq.JObject,System.String,System.String)">
            <summary>
            Expand $type's.
            </summary>
        </member>
        <member name="M:AM.Json.JsonUtility.Include(Newtonsoft.Json.Linq.JObject,System.Action{Newtonsoft.Json.Linq.JProperty})">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Json.JsonUtility.Include(Newtonsoft.Json.Linq.JObject)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Json.JsonUtility.Include(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Json.JsonUtility.ReadArrayFromFile(System.String)">
            <summary>
            Read <see cref="T:Newtonsoft.Json.Linq.JArray"/> from specified
            local file.
            </summary>
        </member>
        <member name="M:AM.Json.JsonUtility.ReadObjectFromFile(System.String)">
            <summary>
            Read <see cref="T:Newtonsoft.Json.Linq.JObject"/> from specified
            local JSON file.
            </summary>
        </member>
        <member name="M:AM.Json.JsonUtility.ReadObjectFromFile``1(System.String)">
            <summary>
            Read arbitrary object from specified
            local JSON file.
            </summary>
        </member>
        <member name="M:AM.Json.JsonUtility.SaveArrayToFile(Newtonsoft.Json.Linq.JArray,System.String)">
            <summary>
            Save the <see cref="T:Newtonsoft.Json.Linq.JArray"/>
            to the specified local file.
            </summary>
        </member>
        <member name="M:AM.Json.JsonUtility.SaveObjectToFile(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Save object to the specified local JSON file.
            </summary>
        </member>
        <member name="M:AM.Json.JsonUtility.SaveObjectToFile(System.Object,System.String)">
            <summary>
            Save object to the specified local JSON file.
            </summary>
        </member>
        <member name="M:AM.Json.JsonUtility.Resolve(Newtonsoft.Json.Linq.JProperty,System.String)">
            <summary>
            Resolver for <see cref="M:AM.Json.JsonUtility.Include(Newtonsoft.Json.Linq.JObject,System.Action{Newtonsoft.Json.Linq.JProperty})"/>.
            </summary>
        </member>
        <member name="M:AM.Json.JsonUtility.Resolve(Newtonsoft.Json.Linq.JProperty)">
            <summary>
            Resolver for <see cref="M:AM.Json.JsonUtility.Include(Newtonsoft.Json.Linq.JObject,System.Action{Newtonsoft.Json.Linq.JProperty})"/>.
            </summary>
        </member>
        <member name="T:AM.Logging.ConsoleLogger">
            <summary>
            
            </summary>
        </member>
        <member name="T:AM.Logging.IAmLogger">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Logging.IAmLogger.Debug(System.String)">
            <summary>
            Debug.
            </summary>
        </member>
        <member name="M:AM.Logging.IAmLogger.Error(System.String)">
            <summary>
            Error.
            </summary>
        </member>
        <member name="M:AM.Logging.IAmLogger.Fatal(System.String)">
            <summary>
            Fatal error.
            </summary>
        </member>
        <member name="M:AM.Logging.IAmLogger.Info(System.String)">
            <summary>
            Information message.
            </summary>
        </member>
        <member name="M:AM.Logging.IAmLogger.Trace(System.String)">
            <summary>
            Trace.
            </summary>
        </member>
        <member name="M:AM.Logging.IAmLogger.Warn(System.String)">
            <summary>
            Warning.
            </summary>
        </member>
        <member name="M:AM.Logging.ConsoleLogger.Debug(System.String)">
            <inheritdoc cref="M:AM.Logging.IAmLogger.Debug(System.String)"/>
        </member>
        <member name="M:AM.Logging.ConsoleLogger.Error(System.String)">
            <inheritdoc cref="M:AM.Logging.IAmLogger.Error(System.String)"/>
        </member>
        <member name="M:AM.Logging.ConsoleLogger.Fatal(System.String)">
            <inheritdoc cref="M:AM.Logging.IAmLogger.Fatal(System.String)"/>
        </member>
        <member name="M:AM.Logging.ConsoleLogger.Info(System.String)">
            <inheritdoc cref="M:AM.Logging.IAmLogger.Info(System.String)"/>
        </member>
        <member name="M:AM.Logging.ConsoleLogger.Trace(System.String)">
            <inheritdoc cref="M:AM.Logging.IAmLogger.Trace(System.String)"/>
        </member>
        <member name="M:AM.Logging.ConsoleLogger.Warn(System.String)">
            <inheritdoc cref="M:AM.Logging.IAmLogger.Warn(System.String)"/>
        </member>
        <member name="T:AM.Logging.DebugLogger">
            <summary>
            <see cref="T:AM.Logging.IAmLogger"/> using
            <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)"/>
            </summary>
        </member>
        <member name="M:AM.Logging.DebugLogger.Debug(System.String)">
            <inheritdoc cref="M:AM.Logging.IAmLogger.Debug(System.String)"/>
        </member>
        <member name="M:AM.Logging.DebugLogger.Error(System.String)">
            <inheritdoc cref="M:AM.Logging.IAmLogger.Error(System.String)"/>
        </member>
        <member name="M:AM.Logging.DebugLogger.Fatal(System.String)">
            <inheritdoc cref="M:AM.Logging.IAmLogger.Fatal(System.String)"/>
        </member>
        <member name="M:AM.Logging.DebugLogger.Info(System.String)">
            <inheritdoc cref="M:AM.Logging.IAmLogger.Info(System.String)"/>
        </member>
        <member name="M:AM.Logging.DebugLogger.Trace(System.String)">
            <inheritdoc cref="M:AM.Logging.IAmLogger.Trace(System.String)"/>
        </member>
        <member name="M:AM.Logging.DebugLogger.Warn(System.String)">
            <inheritdoc cref="M:AM.Logging.IAmLogger.Warn(System.String)"/>
        </member>
        <member name="T:AM.Logging.FileLogger">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Logging.FileLogger.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Logging.FileLogger.WriteLine(System.String)">
            <summary>
            Write one line.
            </summary>
        </member>
        <member name="M:AM.Logging.FileLogger.Debug(System.String)">
            <inheritdoc cref="M:AM.Logging.IAmLogger.Debug(System.String)"/>
        </member>
        <member name="M:AM.Logging.FileLogger.Error(System.String)">
            <inheritdoc cref="M:AM.Logging.IAmLogger.Error(System.String)"/>
        </member>
        <member name="M:AM.Logging.FileLogger.Fatal(System.String)">
            <inheritdoc cref="M:AM.Logging.IAmLogger.Fatal(System.String)"/>
        </member>
        <member name="M:AM.Logging.FileLogger.Info(System.String)">
            <inheritdoc cref="M:AM.Logging.IAmLogger.Info(System.String)"/>
        </member>
        <member name="M:AM.Logging.FileLogger.Trace(System.String)">
            <inheritdoc cref="M:AM.Logging.IAmLogger.Trace(System.String)"/>
        </member>
        <member name="M:AM.Logging.FileLogger.Warn(System.String)">
            <inheritdoc cref="M:AM.Logging.IAmLogger.Warn(System.String)"/>
        </member>
        <member name="P:AM.Logging.FileLogger.FileName">
            <summary>
            File name.
            </summary>
        </member>
        <member name="T:AM.Logging.Log">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Logging.Log.ApplyDefaultsForConsoleApplication">
            <summary>
            Apply defaults for console application.
            </summary>
        </member>
        <member name="M:AM.Logging.Log.ApplyDefaultsForServiceApplication">
            <summary>
            Apply defaults for console application.
            </summary>
        </member>
        <member name="M:AM.Logging.Log.ApplyDefaultsForWindowedApplication">
            <summary>
            Apply defaults for console application.
            </summary>
        </member>
        <member name="M:AM.Logging.Log.Debug(System.String)">
            <summary>
            Debug message.
            </summary>
        </member>
        <member name="M:AM.Logging.Log.Error(System.String)">
            <summary>
            Error message.
            </summary>
        </member>
        <member name="M:AM.Logging.Log.Fatal(System.String)">
            <summary>
            Fatal error message.
            </summary>
        </member>
        <member name="M:AM.Logging.Log.Info(System.String)">
            <summary>
            Information message.
            </summary>
        </member>
        <member name="M:AM.Logging.Log.SetLogger(AM.Logging.IAmLogger)">
            <summary>
            Set new logger.
            </summary>
            <returns>Previous logger</returns>
        </member>
        <member name="M:AM.Logging.Log.Trace(System.String)">
            <summary>
            Trace message.
            </summary>
        </member>
        <member name="M:AM.Logging.Log.TraceException(System.String,System.Exception)">
            <summary>
            Trace the exception.
            </summary>
        </member>
        <member name="M:AM.Logging.Log.Warn(System.String)">
            <summary>
            Warning message.
            </summary>
        </member>
        <member name="P:AM.Logging.Log.Logger">
            <summary>
            Logger.
            </summary>
        </member>
        <member name="T:AM.Logging.NullLogger">
            <summary>
            Null logger.
            </summary>
        </member>
        <member name="M:AM.Logging.NullLogger.Debug(System.String)">
            <inheritdoc cref="M:AM.Logging.IAmLogger.Debug(System.String)"/>
        </member>
        <member name="M:AM.Logging.NullLogger.Error(System.String)">
            <inheritdoc cref="M:AM.Logging.IAmLogger.Error(System.String)"/>
        </member>
        <member name="M:AM.Logging.NullLogger.Fatal(System.String)">
            <inheritdoc cref="M:AM.Logging.IAmLogger.Fatal(System.String)"/>
        </member>
        <member name="M:AM.Logging.NullLogger.Info(System.String)">
            <inheritdoc cref="M:AM.Logging.IAmLogger.Info(System.String)"/>
        </member>
        <member name="M:AM.Logging.NullLogger.Trace(System.String)">
            <inheritdoc cref="M:AM.Logging.IAmLogger.Trace(System.String)"/>
        </member>
        <member name="M:AM.Logging.NullLogger.Warn(System.String)">
            <inheritdoc cref="M:AM.Logging.IAmLogger.Warn(System.String)"/>
        </member>
        <member name="T:AM.Logging.TeeLogger">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Logging.TeeLogger.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Logging.TeeLogger.Debug(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AM.Logging.TeeLogger.Error(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AM.Logging.TeeLogger.Fatal(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AM.Logging.TeeLogger.Info(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AM.Logging.TeeLogger.Trace(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AM.Logging.TeeLogger.Warn(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:AM.Logging.TeeLogger.Loggers">
            <summary>
            Loggers.
            </summary>
        </member>
        <member name="T:AM.Logging.TraceLogger">
            <summary>
            <see cref="T:AM.Logging.IAmLogger"/> that uses
            <see cref="M:System.Diagnostics.Trace.WriteLine(System.String)"/>
            </summary>
        </member>
        <member name="M:AM.Logging.TraceLogger.Debug(System.String)">
            <inheritdoc cref="M:AM.Logging.IAmLogger.Debug(System.String)"/>
        </member>
        <member name="M:AM.Logging.TraceLogger.Error(System.String)">
            <inheritdoc cref="M:AM.Logging.IAmLogger.Error(System.String)"/>
        </member>
        <member name="M:AM.Logging.TraceLogger.Fatal(System.String)">
            <inheritdoc cref="M:AM.Logging.IAmLogger.Fatal(System.String)"/>
        </member>
        <member name="M:AM.Logging.TraceLogger.Info(System.String)">
            <inheritdoc cref="M:AM.Logging.IAmLogger.Info(System.String)"/>
        </member>
        <member name="M:AM.Logging.TraceLogger.Trace(System.String)">
            <inheritdoc cref="M:AM.Logging.IAmLogger.Trace(System.String)"/>
        </member>
        <member name="M:AM.Logging.TraceLogger.Warn(System.String)">
            <inheritdoc cref="M:AM.Logging.IAmLogger.Warn(System.String)"/>
        </member>
        <member name="T:AM.Mathematics.MathUtility">
            <summary>
            Some useful math.
            </summary>
        </member>
        <member name="M:AM.Mathematics.MathUtility.DegreesToRadians(System.Double)">
            <summary>
            Перевод угла из градусов в радианы.
            </summary>
        </member>
        <member name="M:AM.Mathematics.MathUtility.RadiansToDegrees(System.Double)">
            <summary>
            Перевод угла из радиан в градусы.
            </summary>
        </member>
        <member name="M:AM.Mathematics.MathUtility.Factorize(System.UInt64)">
            <summary>
            Разложение целого числа на простые множители. 
            </summary>
            <param name="number"></param>
            <returns>Массив множителей. Если число простое,
            возвращаемый массив содержит только это число.</returns>
            <remarks>Единица и само число в список не включается.
            Множитель помещается в список столько раз, сколько 
            на него удалось разделить нацело.
            </remarks>
        </member>
        <member name="M:AM.Mathematics.MathUtility.ACosh(System.Double)">
            <summary>
            Обратный гиперболический косинус.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:AM.Mathematics.MathUtility.ASinh(System.Double)">
            <summary>
            Обратный гиперболический синус.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:AM.Mathematics.MathUtility.ATanh(System.Double)">
            <summary>
            Обратный гиперболический тангенс.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:AM.Mathematics.MathUtility.ACTanh(System.Double)">
            <summary>
            Обратный гиперболический котангенс.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:AM.Mathematics.MathUtility.J0(System.Double)">
            <summary>
            Returns the Bessel function of order 0 of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:AM.Mathematics.MathUtility.J1(System.Double)">
            <summary>
            Returns the Bessel function of order 1 of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:AM.Mathematics.MathUtility.Jn(System.Int32,System.Double)">
            <summary>
            Returns the Bessel function of order n of the specified number.
            </summary>
            <param name="n"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:AM.Mathematics.MathUtility.Y0(System.Double)">
            <summary>
            Returns the Bessel function of the second kind, 
            of order 0 of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:AM.Mathematics.MathUtility.Y1(System.Double)">
            <summary>
            Returns the Bessel function of the second kind, 
            of order 1 of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:AM.Mathematics.MathUtility.Yn(System.Int32,System.Double)">
            <summary>
            Returns the Bessel function of the second kind, 
            of order n of the specified number.
            </summary>
            <param name="n"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:AM.MessageEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.MessageEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:AM.MessageEventArgs"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="P:AM.MessageEventArgs.Message">
            <summary>
            Gets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="T:AM.MessageEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:AM.NonNullValue`1">
            <summary>
            Must not be <c>null</c>.
            </summary>
        </member>
        <member name="M:AM.NonNullValue`1.#ctor(`0)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:AM.NonNullValue`1.GetValue">
            <summary>
            Get the value.
            </summary>
        </member>
        <member name="M:AM.NonNullValue`1.SetValue(`0)">
            <summary>
            Set the value.
            </summary>
        </member>
        <member name="M:AM.NonNullValue`1.op_Implicit(`0)~AM.NonNullValue{`0}">
            <summary>
            Implicit conversion.
            </summary>
        </member>
        <member name="M:AM.NonNullValue`1.op_Implicit(AM.NonNullValue{`0})~`0">
            <summary>
            Implicit conversion.
            </summary>
        </member>
        <member name="M:AM.NonNullValue`1.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="P:AM.NonNullValue`1.Value">
            <summary>
            Value itself.
            </summary>
        </member>
        <member name="T:AM.ObjectDumper">
            <summary>
            Object dumper for debug purposes.
            </summary>
        </member>
        <member name="M:AM.ObjectDumper.#ctor(System.IO.TextWriter,System.Int32)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.ObjectDumper.WriteObject(System.String,System.Object)">
            <summary>
            Writes the object.
            </summary>
            <param name="prefix">The prefix.</param>
            <param name="element">The element.</param>
        </member>
        <member name="M:AM.ObjectDumper.Write(System.Object,System.Int32,System.IO.TextWriter)">
            <summary>
            Writes the specified element.
            </summary>
            <param name="element">The element.</param>
            <param name="depth">The depth.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:AM.ObjectDumper.Write(System.Object,System.Int32)">
            <summary>
            Writes the specified element.
            </summary>
            <param name="element">The element.</param>
            <param name="depth">The depth.</param>
        </member>
        <member name="M:AM.ObjectDumper.Write(System.Object)">
            <summary>
            Writes the specified element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="T:AM.Operator`1">
            <summary>
            Experimental operator helpers.
            </summary>
        </member>
        <member name="P:AM.Operator`1.New">
            <summary>
            Operator "new".
            </summary>
        </member>
        <member name="T:AM.Optional`1">
            <summary>
            
            </summary>
            <remarks>
            Borrowed from StackOverflow:
            http://stackoverflow.com/questions/16199227/optional-return-in-c-net
            </remarks>
        </member>
        <member name="F:AM.Optional`1.HasValue">
            <summary>
            Has value?
            </summary>
        </member>
        <member name="M:AM.Optional`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Optional`1.op_Explicit(AM.Optional{`0})~`0">
            <summary>
            Convert Optional to value.
            </summary>
        </member>
        <member name="M:AM.Optional`1.op_Implicit(`0)~AM.Optional{`0}">
            <summary>
            Convert value to Optional.
            </summary>
        </member>
        <member name="M:AM.Optional`1.Equals(AM.Optional{`0})">
            <inheritdoc cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:AM.Optional`1.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:AM.Optional`1.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:AM.Optional`1.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="P:AM.Optional`1.Value">
            <summary>
            Value itself.
            </summary>
        </member>
        <member name="T:AM.Parameters.Parameter">
            <summary>
            Parameter.
            </summary>
        </member>
        <member name="M:AM.Parameters.Parameter.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Parameters.Parameter.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:AM.Parameters.Parameter.RestoreFromStream(System.IO.BinaryReader)">
            <summary>
            Restore the object state from the specified stream.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:AM.Parameters.Parameter.SaveToStream(System.IO.BinaryWriter)">
            <summary>
            Save the object state to the specified stream.
            </summary>
        </member>
        <member name="M:AM.Parameters.Parameter.Verify(System.Boolean)">
            <summary>
            Verify the object state.
            </summary>
        </member>
        <member name="M:AM.Parameters.Parameter.ToString">
            <summary>
            Returns a <see cref="T:System.String"/>
            that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/>
            that represents this instance.</returns>
        </member>
        <member name="P:AM.Parameters.Parameter.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="P:AM.Parameters.Parameter.Value">
            <summary>
            Value.
            </summary>
            <remarks>Can be <c>string.Empty</c>.</remarks>
        </member>
        <member name="T:AM.Parameters.ParameterUtility">
            <summary>
            Useful routines for parameter parsing/encoding.
            </summary>
        </member>
        <member name="F:AM.Parameters.ParameterUtility.EscapeCharacter">
            <summary>
            Escape character.
            </summary>
        </member>
        <member name="F:AM.Parameters.ParameterUtility.NameSeparator">
            <summary>
            Name separator.
            </summary>
        </member>
        <member name="F:AM.Parameters.ParameterUtility.ValueSeparator">
            <summary>
            Value separator.
            </summary>
        </member>
        <member name="M:AM.Parameters.ParameterUtility.Encode(AM.Parameters.Parameter[])">
            <summary>
            Encode parameters to sting representation.
            </summary>
        </member>
        <member name="M:AM.Parameters.ParameterUtility.GetParameter(AM.Parameters.Parameter[],System.String,System.String)">
            <summary>
            Get the parameter with specified name.
            </summary>
        </member>
        <member name="M:AM.Parameters.ParameterUtility.GetParameter``1(AM.Parameters.Parameter[],System.String,``0)">
            <summary>
            Get the parameter with specified name.
            </summary>
        </member>
        <member name="M:AM.Parameters.ParameterUtility.GetParameter``1(AM.Parameters.Parameter[],System.String)">
            <summary>
            Get the parameter with specified name.
            </summary>
        </member>
        <member name="M:AM.Parameters.ParameterUtility.ParseString(System.String)">
            <summary>
            Parse specified string.
            </summary>
        </member>
        <member name="T:AM.ReadOnlyException">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.ReadOnlyException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.ReadOnlyException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.ReadOnlyException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:AM.Reflection.AssemblyUtility">
            <summary>
            Collection of assembly manipulation routines.
            </summary>
        </member>
        <member name="M:AM.Reflection.AssemblyUtility.CheckForToken(System.Reflection.Assembly,System.Byte[])">
            <summary>
            Check an assembly to see if it has the given public key token.
            </summary>
            <remarks>Does not check to make sure the assembly's signature 
            is valid.</remarks>
        </member>
        <member name="M:AM.Reflection.AssemblyUtility.CheckForToken(System.String,System.Byte[])">
            <summary>
            Check an assembly to see if it has the given public key token.
            </summary>
        </member>
        <member name="M:AM.Reflection.AssemblyUtility.IsDebugAssembly(System.Reflection.Assembly)">
            <summary>
            Determines whether the specified assembly is debug version.
            </summary>
            <param name="assembly">The assembly to check.</param>
            <returns>
            	<c>true</c> if the specified assembly is debug version; 
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:AM.Reflection.AssemblyUtility.IsMicrosoftSigned(System.Reflection.Assembly)">
            <summary>
            Check an assembly whether it has Microsoft public key token.
            </summary>
        </member>
        <member name="M:AM.Reflection.AssemblyUtility.IsMicrosoftSigned(System.String)">
            <summary>
            Check an assembly whether it has Microsoft public key token.
            </summary>
        </member>
        <member name="M:AM.Reflection.AssemblyUtility.LoadFile(System.String)">
            <summary>
            Load assembly from the file.
            </summary>
        </member>
        <member name="T:AM.Reflection.EnumMemberInfo">
            <summary>
            Information about <see cref="T:System.Enum"/> member.
            </summary>
        </member>
        <member name="M:AM.Reflection.EnumMemberInfo.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:AM.Reflection.EnumMemberInfo"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="displayName">Name of the display.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:AM.Reflection.EnumMemberInfo.Parse(System.Type)">
            <summary>
            Parses the specified enum type.
            </summary>
            <param name="enumType">Type of the enum.</param>
            <returns></returns>
        </member>
        <member name="M:AM.Reflection.EnumMemberInfo.SortByDisplayName(AM.Reflection.EnumMemberInfo[])">
            <summary>
            Sorts the name of the by display.
            </summary>
            <param name="members">The members.</param>
        </member>
        <member name="M:AM.Reflection.EnumMemberInfo.SortByName(AM.Reflection.EnumMemberInfo[])">
            <summary>
            Sorts the name of the by.
            </summary>
            <param name="members">The members.</param>
        </member>
        <member name="M:AM.Reflection.EnumMemberInfo.SortByValue(AM.Reflection.EnumMemberInfo[])">
            <summary>
            Sorts the by value.
            </summary>
            <param name="members">The members.</param>
        </member>
        <member name="M:AM.Reflection.EnumMemberInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/>
            that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents 
            the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:AM.Reflection.EnumMemberInfo.DisplayName">
            <summary>
            Gets the display name of the enum member.
            </summary>
            <value>Display name of the enum member.</value>
        </member>
        <member name="P:AM.Reflection.EnumMemberInfo.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:AM.Reflection.EnumMemberInfo.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:AM.Reflection.EnumMemberInfo.MemberComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating 
            whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.
            </param>
            <param name="y">The second object to compare.
            </param>
            <returns>
            Value Condition Less than zero x is less than y. 
            Zero x equals y. Greater than zero x is greater than y.
            </returns>
            <exception cref="T:System.ArgumentException">
            Neither x nor y implements the 
            <see cref="T:System.IComparable"/> interface.
            -or- x and y are of different types and neither one can 
            handle comparisons with the other. </exception>
        </member>
        <member name="T:AM.Reflection.FieldAccessor`2">
            <summary>
            Get access to private fields via reflection.
            </summary>
            <typeparam name="TTarget">Main object type.</typeparam>
            <typeparam name="TField">Field type</typeparam>
        </member>
        <member name="M:AM.Reflection.FieldAccessor`2.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:AM.Reflection.FieldAccessor`2"/> 
            class.
            </summary>
            <param name="fieldName">Name of the field.</param>
        </member>
        <member name="M:AM.Reflection.FieldAccessor`2.Get(`0)">
            <summary>
            Gets the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:AM.Reflection.FieldAccessor`2.Set(`0,`1)">
            <summary>
            Sets the specified target.
            </summary>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:AM.Reflection.FieldAccessor`2.FieldName">
            <summary>
            Gets or sets the name of the field.
            </summary>
            <value>The name of the field.</value>
        </member>
        <member name="T:AM.Reflection.PropertyAccessor`2">
             <summary>
             Some hacking: get access to private properties (via reflection).
             </summary>
             <typeparam name="T">Main object type.</typeparam>
             <typeparam name="V">Property type.</typeparam>
             <example>
             <code>
             using System;
             using AM.Reflection;
            
             class Canary
             {
                 public int myProp;
                 private int MyProp
                 {
                     get
                     {
                         return myProp;
                     }
                     set
                     {
                         myProp = value;
                     }
                 }
             }
             
             class Program
             {
                 static void Main ( string [] args )
                 {
                     Canary canary = new Canary ();
                     PropertyAccessor&lt;Canary, int&gt; pa
                        = new PropertyAccessor&lt;Canary, int&gt; ( canary, "MyProp" );
                     pa.Value = 2;
                     Console.WriteLine ( canary.myProp );
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:AM.Reflection.PropertyAccessor`2.#ctor(`0,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="target"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:AM.Reflection.PropertyAccessor`2.OnGettingValue(`1)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AM.Reflection.PropertyAccessor`2.OnSettingValue(`1)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AM.Reflection.PropertyAccessor`2.OnTargetChanged(`0)">
            <summary>
            
            </summary>
            <param name="previousTarget"></param>
        </member>
        <member name="M:AM.Reflection.PropertyAccessor`2.SetTarget(`0)">
            <summary>
            Set new <see cref="P:AM.Reflection.PropertyAccessor`2.Target"/>
            </summary>
        </member>
        <member name="E:AM.Reflection.PropertyAccessor`2.GettingValue">
            <summary>
            Fired when getting value.
            </summary>
        </member>
        <member name="E:AM.Reflection.PropertyAccessor`2.SettingValue">
            <summary>
            Fired when setting value.
            </summary>
        </member>
        <member name="E:AM.Reflection.PropertyAccessor`2.TargetChanged">
            <summary>
            Fired when target changed.
            </summary>
        </member>
        <member name="P:AM.Reflection.PropertyAccessor`2.Target">
            <summary>
             Target.
            </summary>
        </member>
        <member name="P:AM.Reflection.PropertyAccessor`2.Info">
            <summary>
             Property info.
            </summary>
        </member>
        <member name="P:AM.Reflection.PropertyAccessor`2.Value">
            <summary>
            Property value.
            </summary>
        </member>
        <member name="T:AM.Reflection.PropertyAccessor`2.AccessHandler">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="value"></param>
        </member>
        <member name="T:AM.Reflection.PropertyAccessor`2.TargetHandler">
            <summary>
            
            </summary>
            <param name="accessor"></param>
            <param name="previousTarget"></param>
        </member>
        <member name="T:AM.Reflection.PropertyOrField">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Reflection.PropertyOrField.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Reflection.PropertyOrField.#ctor(System.Reflection.FieldInfo)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Reflection.PropertyOrField.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Reflection.PropertyOrField.GetCustomAttribute``1(System.Boolean)">
            <summary>
            Gets the custom attribute.
            </summary>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <returns>First found attribute or <c>null</c>.</returns>
        </member>
        <member name="M:AM.Reflection.PropertyOrField.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="M:AM.Reflection.PropertyOrField.HaveAttribute``1(System.Boolean)">
            <summary>
            Checks whether the <see cref="T:AM.Reflection.PropertyOrField"/>
            haves the attribute.
            </summary>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
        </member>
        <member name="M:AM.Reflection.PropertyOrField.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
        </member>
        <member name="M:AM.Reflection.PropertyOrField.System#IComparable{AM#Reflection#PropertyOrField}#CompareTo(AM.Reflection.PropertyOrField)">
            <inheritdoc cref="M:System.IComparable`1.CompareTo(`0)"/>
        </member>
        <member name="M:AM.Reflection.PropertyOrField.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="P:AM.Reflection.PropertyOrField.FieldInfo">
            <summary>
            Gets the field info.
            </summary>
            <value>The field info.</value>
        </member>
        <member name="P:AM.Reflection.PropertyOrField.IsIndexed">
            <summary>
            Gets a value indicating whether this instance is indexed.
            </summary>
            <value>
            <c>true</c> if this instance is indexed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AM.Reflection.PropertyOrField.IsProperty">
            <summary>
            Gets a value indicating whether this instance is property.
            </summary>
            <value>
            <c>true</c> if this instance is property; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AM.Reflection.PropertyOrField.MemberInfo">
            <summary>
            Gets the member info.
            </summary>
        </member>
        <member name="P:AM.Reflection.PropertyOrField.MemberType">
            <summary>
            Gets the type of the member.
            </summary>
        </member>
        <member name="P:AM.Reflection.PropertyOrField.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:AM.Reflection.PropertyOrField.PropertyInfo">
            <summary>
            Gets the property info.
            </summary>
            <value>The property info.</value>
        </member>
        <member name="P:AM.Reflection.PropertyOrField.ReadOnly">
            <summary>
            Gets a value indicating whether [read only].
            </summary>
            <value><c>true</c> if [read only]; 
            otherwise, <c>false</c>.</value>
        </member>
        <member name="T:AM.Reflection.ReflectionUtility">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Reflection.ReflectionUtility.Bridge(System.Type)">
            <summary>
            Bridge for NETCORE and UAP.
            </summary>
        </member>
        <member name="M:AM.Reflection.ReflectionUtility.GetCustomAttribute``1(System.Type)">
            <summary>
            Get the custom attribute.
            </summary>
        </member>
        <member name="M:AM.Reflection.ReflectionUtility.GetCustomAttribute``1(System.Type,System.Boolean)">
            <summary>
            Get the custom attribute.
            </summary>
        </member>
        <member name="M:AM.Reflection.ReflectionUtility.GetCustomAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Gets the custom attribute.
            </summary>
        </member>
        <member name="M:AM.Reflection.ReflectionUtility.GetCustomAttribute``1(System.Reflection.FieldInfo)">
            <summary>
            Gets the custom attribute.
            </summary>
        </member>
        <member name="M:AM.Reflection.ReflectionUtility.GetCustomAttribute``1(System.Reflection.PropertyInfo)">
            <summary>
            Gets the custom attribute.
            </summary>
        </member>
        <member name="M:AM.Reflection.ReflectionUtility.GetFieldValue``1(``0,System.String)">
            <summary>
            Get field value either public or private.
            </summary>
        </member>
        <member name="M:AM.Reflection.ReflectionUtility.HasAttribute``1(System.Type,System.Boolean)">
            <summary>
            Determines whether the specified type has the attribute.
            </summary>
        </member>
        <member name="M:AM.Reflection.ReflectionUtility.HasAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the specified member has the attribute.
            </summary>
        </member>
        <member name="M:AM.Reflection.ReflectionUtility.SetFieldValue``2(``0,System.String,``1)">
            <summary>
            Set field value either public or private.
            </summary>
        </member>
        <member name="M:AM.Reflection.ReflectionUtility.GetPropertyValue``1(``0,System.String)">
            <summary>
            Get property value either public or private.
            </summary>
        </member>
        <member name="M:AM.Reflection.ReflectionUtility.GetPropertiesAndFields(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Gets the properties and fields.
            </summary>
        </member>
        <member name="M:AM.Reflection.ReflectionUtility.SetPropertyValue``2(``0,System.String,``1)">
            <summary>
            Set property value either public or private.
            </summary>
        </member>
        <member name="T:AM.Resources.LocalizationManager">
            <summary>
            Localization manager. Inspired by same name RSDN code.
            </summary>
        </member>
        <member name="M:AM.Resources.LocalizationManager.GetResourceManager(System.Reflection.Assembly,System.String)">
            <summary>
            Get resource manager for given assembly and resource file.
            </summary>
            <param name="assembly">Assembly.</param>
            <param name="resFile">Resource file.</param>
            <returns>Resource manager.</returns>
        </member>
        <member name="M:AM.Resources.LocalizationManager.GetString(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Get localized string.
            </summary>
            <param name="asm">Assembly</param>
            <param name="resFile">Resource file.</param>
            <param name="resName">Resource name.</param>
            <returns>Localized string.</returns>
        </member>
        <member name="M:AM.Resources.LocalizationManager.GetString(System.String,System.String)">
            <summary>
            Get localized string.
            </summary>
            <param name="resFile">Resource file (located in
            calling assembly).</param>
            <param name="resName">Resource name.</param>
            <returns>Localized string.</returns>
        </member>
        <member name="M:AM.Resources.LocalizationManager.GetString(System.Type,System.String)">
            <summary>
            Get localized string.
            </summary>
            <param name="resClass">Class type.</param>
            <param name="resName">Resource name.</param>
            <returns>Localized string.</returns>
        </member>
        <member name="P:AM.Resources.LocalizationManager.Instance">
            <summary>
            Singleton.
            </summary>
        </member>
        <member name="P:AM.Resources.LocalizationManager.Item(System.Type,System.String)">
            <summary>
            Get localized string.
            </summary>
        </member>
        <member name="P:AM.Resources.LocalizationManager.Item(System.String,System.String)">
            <summary>
            Get localized string.
            </summary>
        </member>
        <member name="P:AM.Resources.LocalizationManager.Item(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Get localized string.
            </summary>
        </member>
        <member name="T:AM.Runtime.HandmadeSerializer">
            <summary>
            Simple serializer.
            </summary>
        </member>
        <member name="M:AM.Runtime.HandmadeSerializer.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Runtime.HandmadeSerializer.#ctor(AM.Runtime.PrefixLength)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Runtime.HandmadeSerializer.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserialize object.
            </summary>
        </member>
        <member name="M:AM.Runtime.HandmadeSerializer.DeserializeArray(System.IO.BinaryReader)">
            <summary>
            Deserialize array of objects.
            </summary>
        </member>
        <member name="M:AM.Runtime.HandmadeSerializer.GetTypeName(System.Object)">
            <summary>
            Get name of specified type.
            </summary>
        </member>
        <member name="M:AM.Runtime.HandmadeSerializer.Serialize(System.IO.BinaryWriter,AM.Runtime.IHandmadeSerializable)">
            <summary>
            Serialize the object.
            </summary>
        </member>
        <member name="M:AM.Runtime.HandmadeSerializer.Serialize(System.IO.BinaryWriter,AM.Runtime.IHandmadeSerializable[])">
            <summary>
            Serialize the object.
            </summary>
        </member>
        <member name="P:AM.Runtime.HandmadeSerializer.Namespace">
            <summary>
            Namespace for short type names.
            </summary>
        </member>
        <member name="P:AM.Runtime.HandmadeSerializer.PrefixLength">
            <summary>
            Prefix length.
            </summary>
        </member>
        <member name="T:AM.Runtime.ITreeSerialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Runtime.ITreeSerialize.DeserializeTree(System.IO.BinaryReader)">
            <summary>
            Deserialize.
            </summary>
        </member>
        <member name="M:AM.Runtime.ITreeSerialize.SerializeTree(System.IO.BinaryWriter)">
            <summary>
            Serialize.
            </summary>
        </member>
        <member name="T:AM.Runtime.NumberUnion">
            <summary>
            Cheap trick with number overlap for conversion purposes.
            </summary>
        </member>
        <member name="F:AM.Runtime.NumberUnion.Byte0">
            <summary>
            
            </summary>
        </member>
        <member name="F:AM.Runtime.NumberUnion.Byte1">
            <summary>
            
            </summary>
        </member>
        <member name="F:AM.Runtime.NumberUnion.Byte2">
            <summary>
            
            </summary>
        </member>
        <member name="F:AM.Runtime.NumberUnion.Byte3">
            <summary>
            
            </summary>
        </member>
        <member name="F:AM.Runtime.NumberUnion.Byte4">
            <summary>
            
            </summary>
        </member>
        <member name="F:AM.Runtime.NumberUnion.Byte5">
            <summary>
            
            </summary>
        </member>
        <member name="F:AM.Runtime.NumberUnion.Byte6">
            <summary>
            
            </summary>
        </member>
        <member name="F:AM.Runtime.NumberUnion.Byte7">
            <summary>
            
            </summary>
        </member>
        <member name="F:AM.Runtime.NumberUnion.Byte8">
            <summary>
            
            </summary>
        </member>
        <member name="F:AM.Runtime.NumberUnion.Byte9">
            <summary>
            
            </summary>
        </member>
        <member name="F:AM.Runtime.NumberUnion.Byte10">
            <summary>
            
            </summary>
        </member>
        <member name="F:AM.Runtime.NumberUnion.Byte11">
            <summary>
            
            </summary>
        </member>
        <member name="F:AM.Runtime.NumberUnion.Byte12">
            <summary>
            
            </summary>
        </member>
        <member name="F:AM.Runtime.NumberUnion.Byte13">
            <summary>
            
            </summary>
        </member>
        <member name="F:AM.Runtime.NumberUnion.Byte14">
            <summary>
            
            </summary>
        </member>
        <member name="F:AM.Runtime.NumberUnion.Byte15">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Runtime.NumberUnion.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:AM.Runtime.NumberUnion.SignedByte">
            <summary>
            
            </summary>
        </member>
        <member name="F:AM.Runtime.NumberUnion.UnsignedByte">
            <summary>
            
            </summary>
        </member>
        <member name="F:AM.Runtime.NumberUnion.SignedInt16">
            <summary>
            
            </summary>
        </member>
        <member name="F:AM.Runtime.NumberUnion.UnsignedInt16">
            <summary>
            
            </summary>
        </member>
        <member name="F:AM.Runtime.NumberUnion.SignedInt32">
            <summary>
            
            </summary>
        </member>
        <member name="F:AM.Runtime.NumberUnion.UnsignedInt32">
            <summary>
            
            </summary>
        </member>
        <member name="F:AM.Runtime.NumberUnion.SignedInt64">
            <summary>
            
            </summary>
        </member>
        <member name="F:AM.Runtime.NumberUnion.UnsignedInt64">
            <summary>
            
            </summary>
        </member>
        <member name="F:AM.Runtime.NumberUnion.Single">
            <summary>
            
            </summary>
        </member>
        <member name="F:AM.Runtime.NumberUnion.Double">
            <summary>
            
            </summary>
        </member>
        <member name="F:AM.Runtime.NumberUnion.Decimal">
            <summary>
            
            </summary>
        </member>
        <member name="T:AM.Runtime.PinnedStructure`1">
            <summary>
            A helper class for working with structures that need to be
            pinned to prevent the GC from moving them.
            </summary>
            <remarks>
            Inspired by Marc Clifton article at CodeProject
            http://www.codeproject.com/useritems/PinnedObject.asp
            </remarks>
            <example>
            <para>This example illustrates manipulation a 
            <see cref="T:AM.Runtime.PinnedStructure`1"/> using C++
            style pointer syntax withing an unsafe code block.
            The code illustrates:
            </para>
            <list type="bullet">
            <item>Assigning a new structure to the pinned object
            (testing the ManagedObject setter).
            </item>
            <item>Getting the pointer and manipulating the structure
            via the pointer (testing the Pointer getter).
            </item>
            <item>Getting the structure (testing the ManagedObject getter).
            </item>
            </list>
            <code>
            using System;
            
            using AM.Runtime;
            
            public struct DummyStructure
            {
            public int Afield;
            }
            
            public static class Test
            {
            public static void Main ()
            {
            	PinnedStructure&lt;DummyStructure&gt; pin
            		= new PinnedStructure&lt;DummyStructure&gt; ();
            	DummyStructure dummy = new DummyStructure ();
            	dummy.AField = 1;
            	pin.ManagedObject = dummy;
            	
            	unsafe
            	{
            		DummyStructure *p = (DummyStructure*) pin.Pointer;
            		++p-&gt;AField;
            	}
            	
            	Console.WriteLine ( pin.ManagedObject.AField );
            }
            }
            </code>
            </example>
        </member>
        <member name="M:AM.Runtime.PinnedStructure`1.#ctor">
            <summary>
            Initializes a new instance of the 
            <see cref="T:AM.Runtime.PinnedStructure`1"/> class.
            </summary>
        </member>
        <member name="M:AM.Runtime.PinnedStructure`1.Finalize">
            <summary>
            Releases unmanaged resources and performs other 
            cleanup operations before the
            <see cref="T:AM.Runtime.PinnedStructure`1"/> 
            is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:AM.Runtime.PinnedStructure`1.Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="P:AM.Runtime.PinnedStructure`1.IsDisposed">
            <summary>
            Gets a value indicating whether 
            this instance is disposed.
            </summary>
            <value>
            <c>true</c> if this instance is disposed;
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AM.Runtime.PinnedStructure`1.ManagedObject">
            <summary>
            Gets or sets the managed object.
            </summary>
        </member>
        <member name="P:AM.Runtime.PinnedStructure`1.Pointer">
            <summary>
            Gets the pointer to the managed object.
            </summary>
        </member>
        <member name="T:AM.Runtime.PrefixLength">
            <summary>
            
            </summary>
        </member>
        <member name="F:AM.Runtime.PrefixLength.Short">
            <summary>
            Class name only.
            </summary>
        </member>
        <member name="F:AM.Runtime.PrefixLength.Moderate">
            <summary>
            Class name with namespace.
            </summary>
        </member>
        <member name="F:AM.Runtime.PrefixLength.Full">
            <summary>
            Assembly-qualified name.
            </summary>
        </member>
        <member name="T:AM.Runtime.SerializationUtility">
            <summary>
            Хелперы, связанные с сериализацией и десериализацией.
            </summary>
        </member>
        <member name="M:AM.Runtime.SerializationUtility.RestoreArray``1(System.IO.BinaryReader)">
            <summary>
            Считывание массива из потока.
            </summary>
        </member>
        <member name="M:AM.Runtime.SerializationUtility.RestoreArrayFromFile``1(System.String)">
            <summary>
            Считывание массива из файла.
            </summary>
        </member>
        <member name="M:AM.Runtime.SerializationUtility.RestoreArrayFromZipFile``1(System.String)">
            <summary>
            Считывание массива из файла.
            </summary>
        </member>
        <member name="M:AM.Runtime.SerializationUtility.RestoreArrayFromMemory``1(System.Byte[])">
            <summary>
            Считывание массива из памяти.
            </summary>
        </member>
        <member name="M:AM.Runtime.SerializationUtility.RestoreArrayFromZipMemory``1(System.Byte[])">
            <summary>
            Считывание массива из памяти.
            </summary>
        </member>
        <member name="M:AM.Runtime.SerializationUtility.RestoreNullable``1(System.IO.BinaryReader)">
            <summary>
            Считывание из потока обнуляемого объекта.
            </summary>
        </member>
        <member name="M:AM.Runtime.SerializationUtility.RestoreObjectFromFile``1(System.String)">
            <summary>
            Считывание объекта из файла.
            </summary>
        </member>
        <member name="M:AM.Runtime.SerializationUtility.RestoreObjectFromZipFile``1(System.String)">
            <summary>
            Считывание объекта из файла.
            </summary>
        </member>
        <member name="M:AM.Runtime.SerializationUtility.RestoreObjectFromMemory``1(System.Byte[])">
            <summary>
            Считывание объекта из памяти.
            </summary>
        </member>
        <member name="M:AM.Runtime.SerializationUtility.RestoreObjectFromString``1(System.String)">
            <summary>
            Считывание объекта из строки.
            </summary>
        </member>
        <member name="M:AM.Runtime.SerializationUtility.RestoreObjectFromZipMemory``1(System.Byte[])">
            <summary>
            Считывание объекта из памяти.
            </summary>
        </member>
        <member name="M:AM.Runtime.SerializationUtility.SaveToStream``1(``0[],System.IO.BinaryWriter)">
            <summary>
            Сохранение в поток массива элементов.
            </summary>
        </member>
        <member name="M:AM.Runtime.SerializationUtility.SaveToFile``1(``0,System.String)">
            <summary>
            Сохранение в файл объекта,
            умеющего сериализоваться вручную.
            </summary>
        </member>
        <member name="M:AM.Runtime.SerializationUtility.SaveToZipFile``1(``0,System.String)">
            <summary>
            Сохранение в файл объекта,
            умеющего сериализоваться вручную.
            </summary>
        </member>
        <member name="M:AM.Runtime.SerializationUtility.SaveToFile``1(``0[],System.String)">
            <summary>
            Сохранение в файл массива объектов,
            умеющих сериализоваться вручную.
            </summary>
        </member>
        <member name="M:AM.Runtime.SerializationUtility.SaveToMemory``1(``0)">
            <summary>
            Сохранение объекта.
            </summary>
        </member>
        <member name="M:AM.Runtime.SerializationUtility.SaveToMemory``1(``0[])">
            <summary>
            Сохранение массива объектов.
            </summary>
        </member>
        <member name="M:AM.Runtime.SerializationUtility.SaveToString``1(``0)">
            <summary>
            Сохранение объекта в строке.
            </summary>
        </member>
        <member name="M:AM.Runtime.SerializationUtility.SaveToZipFile``1(``0[],System.String)">
            <summary>
            Сохранение в файл массива объектов
            с одновременной упаковкой.
            </summary>
        </member>
        <member name="M:AM.Runtime.SerializationUtility.SaveToZipMemory``1(``0)">
            <summary>
            Сохранение массива объектов.
            </summary>
        </member>
        <member name="M:AM.Runtime.SerializationUtility.SaveToZipMemory``1(``0[])">
            <summary>
            Сохранение массива объектов.
            </summary>
        </member>
        <member name="M:AM.Runtime.SerializationUtility.WriteNullable``1(System.IO.BinaryWriter,``0)">
            <summary>
            Сохранение в поток обнуляемого объекта.
            </summary>
        </member>
        <member name="T:AM.Runtime.Singleton">
            <summary>
            Хранилище объектов по принципу "каждого типа по одной штуке".
            </summary>
        </member>
        <member name="M:AM.Runtime.Singleton.HaveInstance``1">
            <summary>
            Do we have instance of specified type?
            </summary>
        </member>
        <member name="M:AM.Runtime.Singleton.Instance``1">
            <summary>
            Выдает объект указанного типа.
            </summary>
        </member>
        <member name="T:AM.IOC.ServiceRepository">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.IOC.ServiceRepository.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.IOC.ServiceRepository.Clear">
            <summary>
            Clear the repository.
            </summary>
        </member>
        <member name="M:AM.IOC.ServiceRepository.Register(System.Type,System.Object)">
            <summary>
            Register service of given type.
            </summary>
        </member>
        <member name="M:AM.IOC.ServiceRepository.Register``1(``0)">
            <summary>
            Register service of given type.
            </summary>
        </member>
        <member name="M:AM.IOC.ServiceRepository.Unregister(System.Type)">
            <summary>
            Unregister service of given type.
            </summary>
        </member>
        <member name="M:AM.IOC.ServiceRepository.Unregister``1">
            <summary>
            Unregister service of given type.
            </summary>
        </member>
        <member name="M:AM.IOC.ServiceRepository.Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="T:AM.Text.HtmlText">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Text.HtmlText.Encode(System.String)">
            <summary>
            Encode html entities.
            </summary>
        </member>
        <member name="M:AM.Text.HtmlText.HtmlToPlainText(System.String)">
            <summary>
            Convert HTML to plain text by stripping tags.
            </summary>
        </member>
        <member name="T:AM.Text.Hyphenation.EnglishHyphenator">
            <summary>
            Simple <see cref="T:AM.Text.Hyphenation.Hyphenator"/> for English language.
            </summary>
        </member>
        <member name="T:AM.Text.Hyphenation.Hyphenator">
            <summary>
            Abstract hyphenator.
            </summary>
        </member>
        <member name="M:AM.Text.Hyphenation.Hyphenator.RecognizeWord(System.String)">
            <summary>
            Determines whether the <see cref="T:AM.Text.Hyphenation.Hyphenator"/>
            can split specified word.
            </summary>
            <param name="theWord">Word to check.</param>
            <returns><c>true</c> if word can be processed;
            otherwise <c>false</c>.</returns>
        </member>
        <member name="M:AM.Text.Hyphenation.Hyphenator.Hyphenate(System.String)">
            <summary>
            Hyphenates the word.
            </summary>
            <param name="word">Word to hyphenate.</param>
            <returns>Array of positions where hyphen can be inserted.
            </returns>
        </member>
        <member name="M:AM.Text.Hyphenation.Hyphenator.ShowHyphenated(System.String,System.Int32[])">
            <summary>
            Show the word in hyphenated form.
            </summary>
            <param name="word">Word to hyphenate.</param>
            <param name="positions">Possible positions of hyphen.
            </param>
            <returns>Hyphenated word.</returns>
        </member>
        <member name="P:AM.Text.Hyphenation.Hyphenator.LanguageName">
            <summary>
            Gets the language name (e. g. "English" or "Russian").
            </summary>
            <value>The name of the language.</value>
        </member>
        <member name="M:AM.Text.Hyphenation.EnglishHyphenator.RecognizeWord(System.String)">
            <summary>
            Determines whether the <see cref="T:AM.Text.Hyphenation.Hyphenator"/>
            can split specified word.
            </summary>
            <param name="theWord">Word to check.</param>
            <returns>
            	<c>true</c> if word can be processed;
            otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:AM.Text.Hyphenation.EnglishHyphenator.Hyphenate(System.String)">
            <summary>
            Hyphenates the word.
            </summary>
            <param name="word">Word to hyphenate.</param>
            <returns>
            Array of positions where hyphen can be inserted.
            </returns>
        </member>
        <member name="P:AM.Text.Hyphenation.EnglishHyphenator.LanguageName">
            <summary>
            Gets the language name ("English" for this case).
            </summary>
            <value>The name of the language ("english for this case).
            </value>
        </member>
        <member name="T:AM.Text.Hyphenation.RussianHyphenator">
            <summary>
            Simple <see cref="T:AM.Text.Hyphenation.Hyphenator"/> for Russian language.
            </summary>
        </member>
        <member name="M:AM.Text.Hyphenation.RussianHyphenator.RecognizeWord(System.String)">
            <summary>
            
            </summary>
            <param name="theWord"></param>
            <returns></returns>
        </member>
        <member name="M:AM.Text.Hyphenation.RussianHyphenator.Hyphenate(System.String)">
            <summary>
            Переносы для русского языка.
            </summary>
        </member>
        <member name="P:AM.Text.Hyphenation.RussianHyphenator.LanguageName">
            <summary>
            
            </summary>
        </member>
        <member name="T:AM.Text.InvariantFormat">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Text.InvariantFormat.Format(System.String,System.Object)">
            <summary>
            Format string.
            </summary>
        </member>
        <member name="M:AM.Text.InvariantFormat.Format(System.String,System.Object,System.Object)">
            <summary>
            Format string.
            </summary>
        </member>
        <member name="M:AM.Text.InvariantFormat.Format(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Format string.
            </summary>
        </member>
        <member name="M:AM.Text.InvariantFormat.Format(System.String,System.Object[])">
            <summary>
            Format string.
            </summary>
        </member>
        <member name="M:AM.Text.InvariantFormat.Format(System.String,System.Int32)">
            <summary>
            Format integer.
            </summary>
        </member>
        <member name="M:AM.Text.InvariantFormat.Format(System.String,System.Double)">
            <summary>
            Format double.
            </summary>
        </member>
        <member name="M:AM.Text.InvariantFormat.Format(System.Int32)">
            <summary>
            Format integer.
            </summary>
        </member>
        <member name="M:AM.Text.InvariantFormat.Format(System.Double)">
            <summary>
            Format double.
            </summary>
        </member>
        <member name="T:AM.Text.NewLine">
            <summary>
            New line symbol in different OSes.
            </summary>
        </member>
        <member name="F:AM.Text.NewLine.Apple">
            <summary>
            Apple.
            </summary>
        </member>
        <member name="F:AM.Text.NewLine.CarriageReturn">
            <summary>
            Carriage Return.
            </summary>
        </member>
        <member name="F:AM.Text.NewLine.CR">
            <summary>
            Carriage Return.
            </summary>
        </member>
        <member name="F:AM.Text.NewLine.CRLF">
            <summary>
            Carriage Return + Line Feed.
            </summary>
        </member>
        <member name="F:AM.Text.NewLine.LF">
            <summary>
            Line Feed.
            </summary>
        </member>
        <member name="F:AM.Text.NewLine.LineFeed">
            <summary>
            Line Feed.
            </summary>
        </member>
        <member name="F:AM.Text.NewLine.Linux">
            <summary>
            Linux.
            </summary>
        </member>
        <member name="F:AM.Text.NewLine.MacOS">
            <summary>
            Mac OS.
            </summary>
        </member>
        <member name="F:AM.Text.NewLine.MsDos">
            <summary>
            MS-DOS.
            </summary>
        </member>
        <member name="F:AM.Text.NewLine.Unix">
            <summary>
            UNIX.
            </summary>
        </member>
        <member name="F:AM.Text.NewLine.Windows">
            <summary>
            Windows.
            </summary>
        </member>
        <member name="M:AM.Text.NewLine.DosToUnix(System.String)">
            <summary>
            Change MS-DOS to UNIX line endings.
            </summary>
        </member>
        <member name="M:AM.Text.NewLine.RemoveLineBreaks(System.String)">
            <summary>
            Remove NewLine symbol.
            </summary>
        </member>
        <member name="M:AM.Text.NewLine.UnixToDos(System.String)">
            <summary>
            Change UNIX to MS-DOS line endings.
            </summary>
        </member>
        <member name="T:AM.Text.Output.OutputWriter">
            <summary>
            Wrapper for <see cref="T:AM.Text.Output.AbstractOutput"/>.
            </summary>
        </member>
        <member name="M:AM.Text.Output.OutputWriter.#ctor(AM.Text.Output.AbstractOutput)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Text.Output.OutputWriter.WriteLine">
            <summary>
            Writes a line terminator to the text string or stream.
            </summary>
        </member>
        <member name="M:AM.Text.Output.OutputWriter.Write(System.String)">
            <summary>
            Writes a string to the text string or stream.
            </summary>
            <param name="value">The string to write.</param>
        </member>
        <member name="M:AM.Text.Output.OutputWriter.WriteLine(System.String)">
            <summary>
            Writes a string followed by a line terminator to the text string or stream.
            </summary>
            <param name="value">The string to write. If <paramref name="value" /> is null, only the line terminator is written.</param>
        </member>
        <member name="M:AM.Text.Output.OutputWriter.Write(System.Char)">
            <summary>
            Writes a character to the text string or stream.
            </summary>
            <param name="value">The character to write to the text stream.</param>
        </member>
        <member name="M:AM.Text.Output.OutputWriter.Write(System.Char[])">
            <summary>
            Writes a character array to the text string or stream.
            </summary>
            <param name="buffer">The character array to write to the text stream.</param>
        </member>
        <member name="M:AM.Text.Output.OutputWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a subarray of characters to the text string or stream.
            </summary>
            <param name="buffer">The character array to write data from.</param>
            <param name="index">The character position in the buffer at which to start retrieving data.</param>
            <param name="count">The number of characters to write.</param>
        </member>
        <member name="M:AM.Text.Output.OutputWriter.Dispose(System.Boolean)">
            <inheritdoc cref="M:System.IO.TextWriter.Dispose(System.Boolean)"/>
        </member>
        <member name="P:AM.Text.Output.OutputWriter.Output">
            <summary>
            Inner <see cref="T:AM.Text.Output.AbstractOutput"/>.
            </summary>
        </member>
        <member name="P:AM.Text.Output.OutputWriter.Encoding">
            <summary>
            When overridden in a derived class,
            returns the character encoding in which the output is written.
            </summary>
        </member>
        <member name="T:AM.Text.Output.StreamOutput">
            <summary>
            Output to stream.
            </summary>
        </member>
        <member name="T:AM.Text.Output.AbstractOutput">
            <summary>
            Абстрактный объект текстового вывода. 
            Например, консоль или текстовое окно.
            </summary>
        </member>
        <member name="M:AM.Text.Output.AbstractOutput.Clear">
            <summary>
            Очищает вывод, например, окно.
            Надо переопределить в потомке.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AM.Text.Output.AbstractOutput.Configure(System.String)">
            <summary>
            Конфигурирование объекта.
            Надо переопределить в потомке.
            </summary>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:AM.Text.Output.AbstractOutput.Write(System.String)">
            <summary>
            Метод, который нужно переопределить
            в потомке.
            </summary>
            <param name="text"></param>
            <returns>Возвращает сам объект
            вывода.</returns>
        </member>
        <member name="M:AM.Text.Output.AbstractOutput.WriteError(System.String)">
            <summary>
            Выводит ошибку. Например, красным цветом.
            Надо переопределить в потомке.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:AM.Text.Output.AbstractOutput.Write(System.String,System.Object[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Text.Output.AbstractOutput.WriteError(System.String,System.Object[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Text.Output.AbstractOutput.WriteLine(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:AM.Text.Output.AbstractOutput.WriteLine(System.String,System.Object[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Text.Output.AbstractOutput.WriteErrorLine(System.String,System.Object[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Text.Output.AbstractOutput.Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="P:AM.Text.Output.AbstractOutput.HaveError">
            <summary>
            Флаг: был ли вывод с помощью WriteError.
            </summary>
        </member>
        <member name="P:AM.Text.Output.AbstractOutput.Current">
            <summary>
            Current <see cref="T:AM.Text.Output.AbstractOutput"/>.
            </summary>
        </member>
        <member name="P:AM.Text.Output.AbstractOutput.Null">
            <summary>
            
            </summary>
        </member>
        <member name="P:AM.Text.Output.AbstractOutput.Console">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Text.Output.StreamOutput.#ctor(System.IO.TextWriter)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Text.Output.StreamOutput.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Text.Output.StreamOutput.Clear">
            <summary>
            Очищает вывод, например, окно.
            Надо переопределить в потомке.
            </summary>
        </member>
        <member name="M:AM.Text.Output.StreamOutput.Configure(System.String)">
            <summary>
            Конфигурирование объекта.
            Надо переопределить в потомке.
            </summary>
        </member>
        <member name="M:AM.Text.Output.StreamOutput.Write(System.String)">
            <summary>
            Метод, который нужно переопределить
            в потомке.
            </summary>
        </member>
        <member name="M:AM.Text.Output.StreamOutput.WriteError(System.String)">
            <summary>
            Выводит ошибку. Например, красным цветом.
            Надо переопределить в потомке.
            </summary>
        </member>
        <member name="M:AM.Text.Output.StreamOutput.Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="P:AM.Text.Output.StreamOutput.Writer">
            <summary>
            Inner writer.
            </summary>
        </member>
        <member name="P:AM.Text.Output.StreamOutput.HaveError">
            <summary>
            Флаг: был ли вывод с помощью WriteError.
            </summary>
        </member>
        <member name="T:AM.Text.Output.TextOutput">
            <summary>
            Вывод в текстовую строку.
            </summary>
        </member>
        <member name="M:AM.Text.Output.TextOutput.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:AM.Text.Output.TextOutput"/> class.
            </summary>
        </member>
        <member name="M:AM.Text.Output.TextOutput.Clear">
            <summary>
            Очищает вывод, например, окно.
            Надо переопределить в потомке.
            </summary>
        </member>
        <member name="M:AM.Text.Output.TextOutput.Configure(System.String)">
            <summary>
            Конфигурирование объекта.
            Надо переопределить в потомке.
            </summary>
        </member>
        <member name="M:AM.Text.Output.TextOutput.Write(System.String)">
            <summary>
            Метод, который нужно переопределить
            в потомке.
            </summary>
        </member>
        <member name="M:AM.Text.Output.TextOutput.WriteError(System.String)">
            <summary>
            Выводит ошибку. Например, красным цветом.
            Надо переопределить в потомке.
            </summary>
        </member>
        <member name="M:AM.Text.Output.TextOutput.ToString">
            <summary>
            Returns a <see cref="T:System.String"/>
            that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/>
            that represents this instance.</returns>
        </member>
        <member name="P:AM.Text.Output.TextOutput.HaveError">
            <summary>
            Флаг: был ли вывод с помощью WriteError.
            </summary>
        </member>
        <member name="T:AM.Text.Output.TimestampedOutput">
            <summary>
            Output that appends timestamp.
            </summary>
        </member>
        <member name="F:AM.Text.Output.TimestampedOutput.DefaultFormat">
            <summary>
            Default format.
            </summary>
        </member>
        <member name="M:AM.Text.Output.TimestampedOutput.#ctor(AM.Text.Output.AbstractOutput)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Text.Output.TimestampedOutput.Clear">
            <summary>
            Очищает вывод, например, окно.
            Надо переопределить в потомке.
            </summary>
        </member>
        <member name="M:AM.Text.Output.TimestampedOutput.Configure(System.String)">
            <summary>
            Configures the specified configuration.
            </summary>
        </member>
        <member name="M:AM.Text.Output.TimestampedOutput.Write(System.String)">
            <summary>
            Метод, который нужно переопределить
            в потомке.
            </summary>
        </member>
        <member name="M:AM.Text.Output.TimestampedOutput.WriteError(System.String)">
            <summary>
            Выводит ошибку. Например, красным цветом.
            Надо переопределить в потомке.
            </summary>
        </member>
        <member name="P:AM.Text.Output.TimestampedOutput.InnerOutput">
            <summary>
            Inner output.
            </summary>
        </member>
        <member name="P:AM.Text.Output.TimestampedOutput.Format">
            <summary>
            Format
            </summary>
        </member>
        <member name="P:AM.Text.Output.TimestampedOutput.HaveError">
            <summary>
            Флаг: был ли вывод с помощью WriteError.
            </summary>
        </member>
        <member name="T:AM.Text.RichText">
            <summary>
            Rich text support.
            </summary>
        </member>
        <member name="F:AM.Text.RichText.CentralEuropeanPrologue">
            <summary>
            Central European prologue for RTF file.
            </summary>
        </member>
        <member name="F:AM.Text.RichText.CommonPrologue">
            <summary>
            Common prologue for RTF file.
            </summary>
        </member>
        <member name="F:AM.Text.RichText.WesternEuropeanPrologue">
            <summary>
            Western European prologue for RTF file.
            </summary>
        </member>
        <member name="F:AM.Text.RichText.RussianPrologue">
            <summary>
            Russian prologue for RTF file.
            </summary>
        </member>
        <member name="M:AM.Text.RichText.Encode(System.String)">
            <summary>
            Encode text.
            </summary>
        </member>
        <member name="T:AM.Text.RichTextStripper">
            <summary>
            
            </summary>
            <remarks>Inspired by https://chrisbenard.net/2014/08/20/extract-text-from-rtf-in-c-net/
            </remarks>
        </member>
        <member name="M:AM.Text.RichTextStripper.StripRichTextFormat(System.String)">
            <summary>
            Strip RTF Tags from RTF Text
            </summary>
        </member>
        <member name="T:AM.Text.RussianFormat">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Text.RussianFormat.Format(System.String,System.Object)">
            <summary>
            Format string.
            </summary>
        </member>
        <member name="M:AM.Text.RussianFormat.Format(System.String,System.Object,System.Object)">
            <summary>
            Format string.
            </summary>
        </member>
        <member name="M:AM.Text.RussianFormat.Format(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Format string.
            </summary>
        </member>
        <member name="M:AM.Text.RussianFormat.Format(System.String,System.Object[])">
            <summary>
            Format string.
            </summary>
        </member>
        <member name="M:AM.Text.RussianFormat.Format(System.String,System.Int32)">
            <summary>
            Format integer.
            </summary>
        </member>
        <member name="M:AM.Text.RussianFormat.Format(System.String,System.Double)">
            <summary>
            Format double.
            </summary>
        </member>
        <member name="M:AM.Text.RussianFormat.Format(System.Int32)">
            <summary>
            Format integer.
            </summary>
        </member>
        <member name="M:AM.Text.RussianFormat.Format(System.Double)">
            <summary>
            Format double.
            </summary>
        </member>
        <member name="T:AM.Text.SourceCodeUtility">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Text.SourceCodeUtility.ToSourceCode(System.Byte)">
            <summary>
            Convert byte value to C# source code.
            </summary>
        </member>
        <member name="M:AM.Text.SourceCodeUtility.ToSourceCode(System.Byte[])">
            <summary>
            Convert array of bytes to C# source code.
            </summary>
        </member>
        <member name="M:AM.Text.SourceCodeUtility.EncodeCharacter(System.Char)">
            <summary>
            Encode one character.
            </summary>
        </member>
        <member name="M:AM.Text.SourceCodeUtility.ToSourceCode(System.Char)">
            <summary>
            Convert the character to C# source code.
            </summary>
        </member>
        <member name="M:AM.Text.SourceCodeUtility.ToSourceCode(System.Char[])">
            <summary>
            Convert array of characters to C# source code.
            </summary>
        </member>
        <member name="M:AM.Text.SourceCodeUtility.ToSourceCode(System.Int32[])">
            <summary>
            Convert array of 32-bit integers to C# source code.
            </summary>
        </member>
        <member name="T:AM.Text.StreamParser">
            <summary>
            Считывание из потока чисел, идентификаторов
            и прочего.
            </summary>
        </member>
        <member name="F:AM.Text.StreamParser.EOF">
            <summary>
            End of stream reached.
            </summary>
        </member>
        <member name="M:AM.Text.StreamParser.#ctor(System.IO.TextReader)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Text.StreamParser.#ctor(System.IO.TextReader,System.Boolean)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Text.StreamParser.FromFile(System.String,System.Text.Encoding)">
            <summary>
            Construct the <see cref="T:AM.Text.StreamParser"/>
            from the local text file.
            </summary>
        </member>
        <member name="M:AM.Text.StreamParser.FromString(System.String)">
            <summary>
            Construct the <see cref="T:AM.Text.StreamParser"/>
            from the given text.
            </summary>
        </member>
        <member name="M:AM.Text.StreamParser.IsControl">
            <summary>
            Управляющий символ?
            </summary>
        </member>
        <member name="M:AM.Text.StreamParser.IsDigit">
            <summary>
            Цифра?
            </summary>
        </member>
        <member name="M:AM.Text.StreamParser.IsLetter">
            <summary>
            Буква?
            </summary>
        </member>
        <member name="M:AM.Text.StreamParser.IsLetterOrDigit">
            <summary>
            Буква или цифра?
            </summary>
        </member>
        <member name="M:AM.Text.StreamParser.IsNumber">
            <summary>
            Часть числа?
            </summary>
        </member>
        <member name="M:AM.Text.StreamParser.IsPunctuation">
            <summary>
            Знак пунктуации?
            </summary>
        </member>
        <member name="M:AM.Text.StreamParser.IsSeparator">
            <summary>
            Разделитель?
            </summary>
        </member>
        <member name="M:AM.Text.StreamParser.IsSurrogate">
            <summary>
            Суррогат?
            </summary>
        </member>
        <member name="M:AM.Text.StreamParser.IsSymbol">
            <summary>
            Символ?
            </summary>
        </member>
        <member name="M:AM.Text.StreamParser.IsWhiteSpace">
            <summary>
            Пробельный символ?
            </summary>
        </member>
        <member name="M:AM.Text.StreamParser.PeekChar">
            <summary>
            Peek one character from stream.
            </summary>
        </member>
        <member name="M:AM.Text.StreamParser.ReadChar">
            <summary>
            Read one character from stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AM.Text.StreamParser.ReadDecimal(System.IFormatProvider)">
            <summary>
            Read fixed point number from stream.
            </summary>
        </member>
        <member name="M:AM.Text.StreamParser.ReadDecimal">
            <summary>
            Read fixed point number from stream.
            </summary>
        </member>
        <member name="M:AM.Text.StreamParser.ReadDouble(System.IFormatProvider)">
            <summary>
            Read floating point number from stream.
            </summary>
        </member>
        <member name="M:AM.Text.StreamParser.ReadDouble">
            <summary>
            Read floating point number from stream.
            </summary>
        </member>
        <member name="M:AM.Text.StreamParser.ReadInt16">
            <summary>
            Read 16-bit signed integer from stream.
            </summary>
        </member>
        <member name="M:AM.Text.StreamParser.ReadInt32">
            <summary>
            Read 32-bit signed integer from stream.
            </summary>
        </member>
        <member name="M:AM.Text.StreamParser.ReadInt64">
            <summary>
            Read 64-bit signed integer from stream.
            </summary>
        </member>
        <member name="M:AM.Text.StreamParser.ReadSingle(System.IFormatProvider)">
            <summary>
            Read floating point number from stream.
            </summary>
        </member>
        <member name="M:AM.Text.StreamParser.ReadSingle">
            <summary>
            Read floating point number from stream.
            </summary>
        </member>
        <member name="M:AM.Text.StreamParser.ReadUInt16">
            <summary>
            Read 16-bit unsigned integer from stream.
            </summary>
        </member>
        <member name="M:AM.Text.StreamParser.ReadUInt32">
            <summary>
            Read 16-bit unsigned integer from stream.
            </summary>
        </member>
        <member name="M:AM.Text.StreamParser.ReadUInt64">
            <summary>
            Read 64-bit unsigned integer from stream.
            </summary>
        </member>
        <member name="M:AM.Text.StreamParser.SkipControl">
            <summary>
            Пропускаем управляющие символы.
            </summary>
        </member>
        <member name="M:AM.Text.StreamParser.SkipPunctuation">
            <summary>
            Пропускаем пунктуацию.
            </summary>
        </member>
        <member name="M:AM.Text.StreamParser.SkipWhitespace">
            <summary>
            Пропускаем пробельные символы.
            </summary>
        </member>
        <member name="M:AM.Text.StreamParser.Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="P:AM.Text.StreamParser.EndOfStream">
            <summary>
            Is end of stream reached.
            </summary>
        </member>
        <member name="P:AM.Text.StreamParser.Reader">
            <summary>
            Underlying <see cref="T:System.IO.TextReader"/>
            </summary>
        </member>
        <member name="T:AM.Text.StringBuilderCache">
            <summary>
            Inspired by the Microsoft internal class
            http://referencesource.microsoft.com/#mscorlib/system/text/stringbuildercache.cs
            </summary>
        </member>
        <member name="M:AM.Text.StringBuilderCache.Acquire">
            <summary>
            Acquire the <see cref="T:System.Text.StringBuilder"/>.
            </summary>
        </member>
        <member name="M:AM.Text.StringBuilderCache.GetStringAndRelease(System.Text.StringBuilder)">
            <summary>
            Get string and release the <see cref="T:System.Text.StringBuilder"/>.
            </summary>
        </member>
        <member name="M:AM.Text.StringBuilderCache.Release(System.Text.StringBuilder)">
            <summary>
            Release the <see cref="T:System.Text.StringBuilder"/>.
            </summary>
        </member>
        <member name="T:AM.Text.TextBuffer">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Text.TextBuffer.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Text.TextBuffer.Backspace">
            <summary>
            Delete last char (if present).
            </summary>
        </member>
        <member name="M:AM.Text.TextBuffer.Clear">
            <summary>
            Clear all text in the buffer.
            </summary>
        </member>
        <member name="M:AM.Text.TextBuffer.GetLastChar">
            <summary>
            Get last char.
            </summary>
        </member>
        <member name="M:AM.Text.TextBuffer.PrecededByEmptyLine">
            <summary>
            Предваряется явным переводом строки?
            </summary>
        </member>
        <member name="M:AM.Text.TextBuffer.RemoveEmptyLines">
            <summary>
            Remove sequential empty lines.
            </summary>
        </member>
        <member name="M:AM.Text.TextBuffer.Write(System.Char)">
            <summary>
            Write the character.
            </summary>
        </member>
        <member name="M:AM.Text.TextBuffer.Write(System.String)">
            <summary>
            Write the text.
            </summary>
        </member>
        <member name="M:AM.Text.TextBuffer.Write(System.String,System.Object[])">
            <summary>
            Write formatted text.
            </summary>
        </member>
        <member name="M:AM.Text.TextBuffer.WriteLine">
            <summary>
            Write new line symbol.
            </summary>
        </member>
        <member name="M:AM.Text.TextBuffer.WriteLine(System.String)">
            <summary>
            Write text followed by new line symbol.
            </summary>
        </member>
        <member name="M:AM.Text.TextBuffer.WriteLine(System.String,System.Object[])">
            <summary>
            Write formatted text followed by new line symbol.
            </summary>
        </member>
        <member name="M:AM.Text.TextBuffer.ToString">
            <inheritdoc/>
        </member>
        <member name="P:AM.Text.TextBuffer.Column">
            <summary>
            Column number (starting from 1).
            </summary>
        </member>
        <member name="P:AM.Text.TextBuffer.Length">
            <summary>
            Length (number of characters stored).
            </summary>
        </member>
        <member name="P:AM.Text.TextBuffer.Row">
            <summary>
            Row number (starting from 1).
            </summary>
        </member>
        <member name="T:AM.Text.TextKind">
            <summary>
            Kind of the text.
            </summary>
        </member>
        <member name="F:AM.Text.TextKind.PlainText">
            <summary>
            Plain text.
            </summary>
        </member>
        <member name="F:AM.Text.TextKind.RichText">
            <summary>
            Rich text (RTF).
            </summary>
        </member>
        <member name="F:AM.Text.TextKind.Html">
            <summary>
            HTML text.
            </summary>
        </member>
        <member name="T:AM.Text.TextNavigator">
            <summary>
            Навигатор по тексту.
            </summary>
        </member>
        <member name="F:AM.Text.TextNavigator.EOF">
            <summary>
            Признак конца текста.
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.Clone">
            <summary>
            Clone the navigator.
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.FromFile(System.String,System.Text.Encoding)">
            <summary>
            Навигатор по текстовому файлу.
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.FromFile(System.String)">
            <summary>
            Навигатор по текстовому файлу.
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.GetRemainingText">
            <summary>
            Выдать остаток текста.
            </summary>
            <returns><c>null</c>, если достигнут конец текста.
            </returns>
        </member>
        <member name="M:AM.Text.TextNavigator.IsControl">
            <summary>
            Управляющий символ?
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.IsDigit">
            <summary>
            Цифра?
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.IsLetter">
            <summary>
            Буква?
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.IsLetterOrDigit">
            <summary>
            Буква или цифра?
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.IsNumber">
            <summary>
            Часть числа?
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.IsPunctuation">
            <summary>
            Знак пунктуации?
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.IsSeparator">
            <summary>
            Разделитель?
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.IsSurrogate">
            <summary>
            Суррогат?
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.IsSymbol">
            <summary>
            Символ?
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.IsWhiteSpace">
            <summary>
            Пробельный символ?
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.LookAhead">
            <summary>
            Заглядывание вперёд на 1 позицию.
            </summary>
            <remarks>Это на 1 позицию дальше,
            чем <see cref="M:AM.Text.TextNavigator.PeekChar"/>
            </remarks>
        </member>
        <member name="M:AM.Text.TextNavigator.LookAhead(System.Int32)">
            <summary>
            Заглядывание вперёд.
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.LookBehind">
            <summary>
            Заглядывание назад.
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.LookBehind(System.Int32)">
            <summary>
            Заглядывание назад.
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.Move(System.Int32)">
            <summary>
            Смещение указателя.
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.PeekChar">
            <summary>
            Подглядывание текущего символа.
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.PeekCharNoCrLf">
            <summary>
            Подглядывание текущего символа за исключением CR/LF.
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.PeekString(System.Int32)">
            <summary>
            Подглядывание строки вплоть до указанной длины.
            </summary>
            <returns><c>null</c>, если достигнут конец текста.
            </returns>
        </member>
        <member name="M:AM.Text.TextNavigator.PeekStringNoCrLf(System.Int32)">
            <summary>
            Подглядывание строки вплоть до указанной длины.
            </summary>
            <returns><c>null</c>, если достигнут конец текста.
            </returns>
        </member>
        <member name="M:AM.Text.TextNavigator.PeekTo(System.Char)">
            <summary>
            Подглядывание вплоть до указанного символа
            (включая его).
            </summary>
            <returns><c>null</c>, если достигнут конец текста.
            </returns>
        </member>
        <member name="M:AM.Text.TextNavigator.PeekTo(System.Char[])">
            <summary>
            Подглядывание вплоть до указанных символов
            (включая их).
            </summary>
            <returns><c>null</c>, если достигнут конец текста.
            </returns>
        </member>
        <member name="M:AM.Text.TextNavigator.PeekUntil(System.Char)">
            <summary>
            Подглядывание вплоть до указанного символа.
            </summary>
            <returns><c>null</c>, если достигнут конец текста.
            </returns>
        </member>
        <member name="M:AM.Text.TextNavigator.PeekUntil(System.Char[])">
            <summary>
            Подглядывание вплоть до указанных символов.
            </summary>
            <returns><c>null</c>, если достигнут конец текста.
            </returns>
        </member>
        <member name="M:AM.Text.TextNavigator.ReadChar">
            <summary>
            Считывание символа.
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.ReadCharNoCrLf">
            <summary>
            Считывание следующего символа, исключая CR/LF.
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.ReadEscapedUntil(System.Char,System.Char)">
            <summary>
            Считывание экранированной строки вплоть до разделителя
            (не включая его).
            </summary>
            <returns><c>null</c>, если достигнут конец текста.
            </returns>
        </member>
        <member name="M:AM.Text.TextNavigator.ReadFrom(System.Char,System.Char)">
            <summary>
            Считывание начиная с открывающего символа
            до закрывающего (включая их).
            </summary>
            <returns><c>null</c>, если достигнут конец текста.
            Пустая строка, если нет открывающего
            или закрывающего символа.
            </returns>
        </member>
        <member name="M:AM.Text.TextNavigator.ReadFrom(System.Char[],System.Char[])">
            <summary>
            Считывание начиная с открывающего символа
            до закрывающего (включая их).
            </summary>
            <returns><c>null</c>, если достигнут конец текста.
            Пустая строка, если нет открывающего
            или закрывающего символа.
            </returns>
        </member>
        <member name="M:AM.Text.TextNavigator.ReadInteger">
            <summary>
            Чтение беззнакового целого.
            </summary>
            <returns><c>null</c>, если достигнут конец текста.
            Пустую строку, если не число.</returns>
        </member>
        <member name="M:AM.Text.TextNavigator.ReadLine">
            <summary>
            Чтение до конца строки.
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.ReadString(System.Int32)">
            <summary>
            Чтение строки вплоть до указанной длины.
            </summary>
            <returns><c>null</c>, если достигнут конец текста.
            </returns>
        </member>
        <member name="M:AM.Text.TextNavigator.ReadTo(System.Char)">
            <summary>
            Считывание вплоть до указанного символа
            (включая его).
            </summary>
            <returns><c>null</c>, если достигнут конец текста.
            </returns>
        </member>
        <member name="M:AM.Text.TextNavigator.ReadTo(System.String)">
            <summary>
            Считывание вплоть до указанного разделителя
            (разделитель не помещается в возвращаемое значение,
            однако, считывается).
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.ReadTo(System.Char[])">
            <summary>
            Считывание вплоть до указанного символа
            (включая один из них).
            </summary>
            <returns><c>null</c>, если достигнут конец текста.
            </returns>
        </member>
        <member name="M:AM.Text.TextNavigator.ReadUntil(System.Char)">
            <summary>
            Считывание вплоть до указанного символа
            (не включая его).
            </summary>
            <returns><c>null</c>, если достигнут конец текста.
            </returns>
        </member>
        <member name="M:AM.Text.TextNavigator.ReadUntilNoCrLf(System.Char)">
            <summary>
            Считывание вплоть до указанного символа
            (не включая его).
            </summary>
            <returns><c>null</c>, если достигнут конец текста.
            </returns>
        </member>
        <member name="M:AM.Text.TextNavigator.ReadUntil(System.Char[])">
            <summary>
            Считывание вплоть до указанных символов
            (не включая их).
            </summary>
            <remarks><c>null</c>, если достигнут конец текста.
            </remarks>
        </member>
        <member name="M:AM.Text.TextNavigator.ReadUntil(System.Char[],System.Char[],System.Char[])">
            <summary>
            Считывание вплоть до указанных символов
            (не включая их).
            </summary>
            <remarks><c>null</c>, если достигнут конец текста.
            </remarks>
        </member>
        <member name="M:AM.Text.TextNavigator.ReadUntilWhiteSpace">
            <summary>
            Считывание строки, пока не будет
            встречен пробельный символ или конец текста.
            </summary>
            <returns><c>null</c>, если достигнут конец текста.
            </returns>
        </member>
        <member name="M:AM.Text.TextNavigator.ReadWhile(System.Char)">
            <summary>
            Считывание, пока встречается указанный символ.
            </summary>
            <returns><c>null</c>, если достигнут конец текста.
            </returns>
        </member>
        <member name="M:AM.Text.TextNavigator.ReadWhile(System.Char[])">
            <summary>
            Считывание, пока встречается указанные символы.
            </summary>
            <returns><c>null</c>, если достигнут конец текста.
            </returns>
        </member>
        <member name="M:AM.Text.TextNavigator.ReadWord">
            <summary>
            Read word.
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.ReadWord(System.Char[])">
            <summary>
            Read word.
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.RecentText(System.Int32)">
            <summary>
            Get recent text.
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.RestorePosition(AM.Text.TextPosition)">
            <summary>
            Restore previously saved position.
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.SavePosition">
            <summary>
            Save current position.
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.SkipChar(System.Char)">
            <summary>
            Пропускает один символ, если он совпадает с указанным.
            </summary>
            <returns><c>true</c>, если символ был съеден успешно
            </returns>
        </member>
        <member name="M:AM.Text.TextNavigator.SkipChar(System.Char[])">
            <summary>
            Пропускает один символ, если он совпадает с любым
            из указанных.
            </summary>
            <returns><c>true</c>, если символ был съеден успешно
            </returns>
        </member>
        <member name="M:AM.Text.TextNavigator.SkipControl">
            <summary>
            Пропускаем управляющие символы.
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.SkipPunctuation">
            <summary>
            Пропускаем пунктуацию.
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.SkipNonWord">
            <summary>
            Skip non-word characters.
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.SkipNonWord(System.Char[])">
            <summary>
            Skip non-word characters.
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.SkipRange(System.Char,System.Char)">
            <summary>
            Пропускаем произвольное количество символов
            из указанного диапазона.
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.SkipWhile(System.Char)">
            <summary>
            Пропустить указанный символ.
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.SkipWhile(System.Char[])">
            <summary>
            Пропустить указанные символы.
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.SkipWhileNot(System.Char[])">
            <summary>
            Пропустить, пока не встретятся указанные символы.
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.SkipWhitespace">
            <summary>
            Пропускаем пробельные символы.
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.SkipWhitespaceAndPunctuation">
            <summary>
            Пропускаем пробельные символы и пунктуацию.
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.SplitByGoodCharacters(System.Char[])">
            <summary>
            Split text by given good characters.
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.SplitToWords">
            <summary>
            Split the remaining text to array of words.
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.SplitToWords(System.Char[])">
            <summary>
            Split the remaining text to array of words.
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.Substring(System.Int32,System.Int32)">
            <summary>
            Get substring.
            </summary>
        </member>
        <member name="M:AM.Text.TextNavigator.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="P:AM.Text.TextNavigator.Column">
            <summary>
            Текущая колонка текста. Нумерация с 1.
            </summary>
        </member>
        <member name="P:AM.Text.TextNavigator.IsEOF">
            <summary>
            Текст закончился?
            </summary>
        </member>
        <member name="P:AM.Text.TextNavigator.Length">
            <summary>
            Длина текста.
            </summary>
        </member>
        <member name="P:AM.Text.TextNavigator.Line">
            <summary>
            Текущая строка текста. Нумерация с 1.
            </summary>
        </member>
        <member name="P:AM.Text.TextNavigator.Position">
            <summary>
            Текущая позиция.
            </summary>
        </member>
        <member name="P:AM.Text.TextNavigator.Text">
            <summary>
            Обрабатываемый текст.
            </summary>
        </member>
        <member name="T:AM.Text.TextPosition">
            <summary>
            Position in <see cref="T:AM.Text.TextNavigator"/>.
            </summary>
        </member>
        <member name="M:AM.Text.TextPosition.#ctor(AM.Text.TextNavigator)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Text.TextPosition.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="P:AM.Text.TextPosition.Column">
            <summary>
            Column number.
            </summary>
        </member>
        <member name="P:AM.Text.TextPosition.Line">
            <summary>
            Line number.
            </summary>
        </member>
        <member name="P:AM.Text.TextPosition.Position">
            <summary>
            Absolute position.
            </summary>
        </member>
        <member name="T:AM.Text.TextSeparator">
            <summary>
            Separates nested text from inner.
            </summary>
        </member>
        <member name="F:AM.Text.TextSeparator.DefaultClose">
            <summary>
            Default closing sequence.
            </summary>
        </member>
        <member name="F:AM.Text.TextSeparator.DefaultOpen">
            <summary>
            Default opening sequence.
            </summary>
        </member>
        <member name="M:AM.Text.TextSeparator.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Text.TextSeparator.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Text.TextSeparator.HandleChunk(System.Boolean,System.String)">
            <summary>
            Handle text chunk.
            </summary>
            <remarks>Must be overridden.</remarks>
        </member>
        <member name="M:AM.Text.TextSeparator.SeparateText(System.String)">
            <summary>
            Separate text.
            </summary>
        </member>
        <member name="M:AM.Text.TextSeparator.SeparateText(System.IO.TextReader)">
            <summary>
            Separate text.
            </summary>
        </member>
        <member name="P:AM.Text.TextSeparator.Close">
            <summary>
            Closing sequence.
            </summary>
        </member>
        <member name="P:AM.Text.TextSeparator.Open">
            <summary>
            Nested text opening sequence.
            </summary>
        </member>
        <member name="T:AM.Text.TextUtility">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Text.TextUtility.DetermineTextKind(System.String)">
            <summary>
            Determine kind of the text.
            </summary>
        </member>
        <member name="T:AM.Text.Tokenizer.StringTokenizer">
            <summary>
            Tokenizes text.
            </summary>
        </member>
        <member name="F:AM.Text.Tokenizer.StringTokenizer.EOF">
            <summary>
            Признак конца текста.
            </summary>
        </member>
        <member name="M:AM.Text.Tokenizer.StringTokenizer.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Text.Tokenizer.StringTokenizer.GetAllTokens">
            <summary>
            Get all tokens.
            </summary>
        </member>
        <member name="M:AM.Text.Tokenizer.StringTokenizer.PeekChar">
            <summary>
            Заглядывание на один символ вперед.
            </summary>
            <returns>EOF, если достигнут конец текста.</returns>
        </member>
        <member name="M:AM.Text.Tokenizer.StringTokenizer.ReadChar">
            <summary>
            Чтение одного символа с продвижением вперед.
            </summary>
            <returns>EOF, если достигнут конец текста.</returns>
        </member>
        <member name="M:AM.Text.Tokenizer.StringTokenizer.NextToken">
            <summary>
            Get the next token.
            </summary>
        </member>
        <member name="M:AM.Text.Tokenizer.StringTokenizer.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through
            the collection.
            </summary>
        </member>
        <member name="P:AM.Text.Tokenizer.StringTokenizer.Settings">
            <summary>
            Tokenizer settings.
            </summary>
        </member>
        <member name="T:AM.Text.Tokenizer.Token">
            <summary>
            Текстовый токен.
            </summary>
        </member>
        <member name="M:AM.Text.Tokenizer.Token.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Text.Tokenizer.Token.#ctor(AM.Text.Tokenizer.TokenKind,System.String,System.Int32,System.Int32)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:AM.Text.Tokenizer.Token.Convert(System.String[])">
            <summary>
            Convert array of words to array of tokens.
            </summary>
        </member>
        <member name="M:AM.Text.Tokenizer.Token.FromNavigator(AM.Text.TextNavigator,System.String)">
            <summary>
            Create token from <see cref="T:AM.Text.TextNavigator"/>.
            </summary>
        </member>
        <member name="M:AM.Text.Tokenizer.Token.FromNavigator(AM.Text.TextNavigator,AM.Text.Tokenizer.TokenKind,System.String)">
            <summary>
            Create token from <see cref="T:AM.Text.TextNavigator"/>.
            </summary>
        </member>
        <member name="M:AM.Text.Tokenizer.Token.op_Implicit(AM.Text.Tokenizer.Token)~System.String">
            <summary>
            Convert token to string.
            </summary>
        </member>
        <member name="M:AM.Text.Tokenizer.Token.op_Implicit(System.String)~AM.Text.Tokenizer.Token">
            <summary>
            Convert text to token.
            </summary>
        </member>
        <member name="M:AM.Text.Tokenizer.Token.RestoreFromStream(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="M:AM.Text.Tokenizer.Token.SaveToStream(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:AM.Text.Tokenizer.Token.ToString">
            <inheritdoc />
        </member>
        <member name="P:AM.Text.Tokenizer.Token.Kind">
            <summary>
            Тип токена.
            </summary>
        </member>
        <member name="P:AM.Text.Tokenizer.Token.Column">
            <summary>
            Номер колонки.
            </summary>
        </member>
        <member name="P:AM.Text.Tokenizer.Token.Line">
            <summary>
            Номер строки.
            </summary>
        </member>
        <member name="P:AM.Text.Tokenizer.Token.Value">
            <summary>
            Значение.
            </summary>
        </member>
        <member name="P:AM.Text.Tokenizer.Token.IsEOF">
            <summary>
            Признак конца текста?
            </summary>
        </member>
        <member name="T:AM.Sequence">
            <summary>
            Inspired by LINQ Sequence.cs.
            </summary>
        </member>
        <member name="M:AM.Sequence.FirstOr``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            First or given item of sequence.
            </summary>
        </member>
        <member name="M:AM.Sequence.FromItem``1(``0)">
            <summary>
            Sequence of one element.
            </summary>
        </member>
        <member name="M:AM.Sequence.FromItems``1(``0,``0)">
            <summary>
            Sequence of two items.
            </summary>
        </member>
        <member name="M:AM.Sequence.FromItems``1(``0,``0,``0)">
            <summary>
            Sequence of three items.
            </summary>
        </member>
        <member name="M:AM.Sequence.FromItems``1(``0[])">
            <summary>
            Make sequence of given items.
            </summary>
        </member>
        <member name="M:AM.Sequence.MaxOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Get max or default value for the sequence.
            </summary>
        </member>
        <member name="M:AM.Sequence.MaxOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``1)">
            <summary>
            Get max or default value for the sequence.
            </summary>
        </member>
        <member name="M:AM.Sequence.NonNullItems``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Отбирает из последовательности только
            ненулевые элементы.
            </summary>
        </member>
        <member name="M:AM.Sequence.NonEmptyLines(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Отбирает из последовательности только непустые строки.
            </summary>
        </member>
        <member name="M:AM.Sequence.Repeat``1(``0,System.Int32)">
            <summary>
            Repeats the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="count">The count.</param>
            <returns>Sequence of specified values.</returns>
        </member>
        <member name="M:AM.Sequence.Repeat``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Repeats the specified list.
            </summary>
        </member>
        <member name="M:AM.Sequence.Replace``1(System.Collections.Generic.IEnumerable{``0},``0,``0)">
            <summary>
            Replaces items in the specified list.
            </summary>
            <param name="list">The list to process to.</param>
            <param name="replaceFrom">Item to replace from.</param>
            <param name="replaceTo">Replacement.</param>
            <returns>List with replaced items.</returns>
        </member>
        <member name="M:AM.Sequence.Segment``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Extracts segment from the specified list.
            </summary>
            <param name="list">The list.</param>
            <param name="offset">The offset.</param>
            <param name="count">The count.</param>
            <returns>Segment.</returns>
        </member>
        <member name="M:AM.Sequence.Tee``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Добавляем некоторое действие к каждому
            элементу последовательности.
            </summary>
        </member>
        <member name="M:AM.Sequence.Tee``1(System.Collections.Generic.IEnumerable{``0},System.Action{System.Int32,``0})">
            <summary>
            Добавляем некоторое действие к каждому
            элементу последовательности.
            </summary>
        </member>
        <member name="M:AM.Sequence.Separate(System.Collections.IEnumerable,System.Object)">
            <summary>
            Separate the sequence with given separator.
            </summary>
        </member>
        <member name="M:AM.Sequence.Slice``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Slice the sequence to pieces
            with given size.
            </summary>
        </member>
        <member name="T:AM.Text.NumberText">
            <summary>
            String containing numbers separated
            by non-numeric fragments.
            </summary>
        </member>
        <member name="F:AM.Text.NumberText.DefaultIndex">
            <summary>
            Default index.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.AppendChunk(System.String,System.Int64,System.Int32)">
            <summary>
            Appends the chunk.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.AppendChunk(System.String)">
            <summary>
            Append chunk to the number tail.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.AppendChunk(System.Int64)">
            <summary>
            Append chunk to the number tail.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.Clone">
            <summary>
            Clone the number.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.GetDifference(AM.Text.NumberText)">
            <summary>
            Gets the difference.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.GetLength(System.Int32)">
            <summary>
            Gets the length.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.GetPrefix(System.Int32)">
            <summary>
            Gets the prefix.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.GetValue(System.Int32)">
            <summary>
            Gets the numeric value.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.HaveChunk(System.Int32)">
            <summary>
            Do we have the chunk with the given index?
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.HavePrefix(System.Int32)">
            <summary>
            Do we have the prefix in the chunk
            with the given index?
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.HaveValue(System.Int32)">
            <summary>
            Do we have numeric value in the chunk
            with the given index?
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.Increment">
            <summary>
            Увеличение на единицу последнего сегмента.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.Increment(System.Int32)">
            <summary>
            Увеличение последнего сегмента на указанное число.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.Increment(System.Int32,System.Int32)">
            <summary>
            Increments numeric value in the chunk with
            the specified index.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.Increment(System.Int32,System.Int64)">
            <summary>
            Increments numeric value in the chunk with
            the specified index.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.Parse(System.String)">
            <summary>
            Parse the specified text.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.ParseRanges(System.String)">
            <summary>
            Parses the specified tex for ranges.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.RemoveChunk(System.Int32)">
            <summary>
            Remove the chunk with the specified index.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.SetLength(System.Int32,System.Int32)">
            <summary>
            Set length for text conversion of
            numeric value in the specified chunk.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.SetPrefix(System.Int32,System.String)">
            <summary>
            Set the prefix for the specified chunk.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.SetValue(System.Int32,System.Int64)">
            <summary>
            Set the numeric value for the specified chunk.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.Verify">
            <summary>
            Verify the object state.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.Sort(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Soft given text lines.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.Sort(System.Collections.Generic.IEnumerable{AM.Text.NumberText})">
            <summary>
            Soft given numbers.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.op_Implicit(System.String)~AM.Text.NumberText">
            <summary>
            Implicit conversion operator.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.CompareTo(AM.Text.NumberText)">
            <summary>
            Compares the current instance with another
            object of the same type and returns an integer
            that indicates whether the current instance
            precedes, follows, or occurs in the same position
            in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with
            this instance.</param>
            <returns>A value that indicates the relative
            order of the objects being compared. The return
            value has these meanings: Value Meaning
            Less than zero This instance precedes
            <paramref name="other" /> in the sort order.
            Zero This instance occurs in the same position
            in the sort order as <paramref name="other" />.
            Greater than zero This instance follows
            <paramref name="other" /> in the sort order.</returns>
        </member>
        <member name="M:AM.Text.NumberText.CompareTo(System.Int64)">
            <summary>
            Compares to the <see cref="T:System.Int64"/>.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.CompareTo(System.String)">
            <summary>
            Compares to the <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.Compare(System.String,System.String)">
            <summary>
            Compares two specified strings.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.Max(AM.Text.NumberText,AM.Text.NumberText)">
            <summary>
            Compute maximal value.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.Min(AM.Text.NumberText,AM.Text.NumberText)">
            <summary>
            Compute minimal value.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.op_Equality(AM.Text.NumberText,AM.Text.NumberText)">
            <summary>
            Implements the == operator.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.op_Equality(AM.Text.NumberText,System.String)">
            <summary>
            Implements the == operator.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.op_Equality(AM.Text.NumberText,System.Int32)">
            <summary>
            Implements the == operator.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.op_Inequality(AM.Text.NumberText,AM.Text.NumberText)">
            <summary>
            Implements the != operator.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.op_Inequality(AM.Text.NumberText,System.String)">
            <summary>
            Implements the != operator.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.op_Inequality(AM.Text.NumberText,System.Int32)">
            <summary>
            Implements the != operator.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.op_LessThan(AM.Text.NumberText,AM.Text.NumberText)">
            <summary>
            Implements the &lt; operator.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.op_LessThan(AM.Text.NumberText,System.String)">
            <summary>
            Implements the &lt; operator.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.op_LessThanOrEqual(AM.Text.NumberText,AM.Text.NumberText)">
            <summary>
            Implements the &lt;= operator.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.op_LessThan(AM.Text.NumberText,System.Int32)">
            <summary>
            Implements the &lt; operator.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.op_GreaterThan(AM.Text.NumberText,AM.Text.NumberText)">
            <summary>
            Implements the &gt; operator.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.op_GreaterThan(AM.Text.NumberText,System.String)">
            <summary>
            Implements the &gt; operator.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.op_GreaterThan(AM.Text.NumberText,System.Int32)">
            <summary>
            Implements the &gt; operator.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.op_GreaterThanOrEqual(AM.Text.NumberText,AM.Text.NumberText)">
            <summary>
            Implements the &gt;= operator.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.Equals(AM.Text.NumberText)">
            <summary>
            Indicates whether the current object is equal
            to another object of the same type.
            </summary>
            <param name="other">An object to compare with
            this object.</param>
            <returns>true if the current object is equal
            to the <paramref name="other" /> parameter;
            otherwise, false.</returns>
        </member>
        <member name="M:AM.Text.NumberText.Equals(System.Object)">
            <summary>
            Determines whether the specified
            <see cref="T:System.Object"/> is equal to this
            instance.
            </summary>
            <param name="obj">The object to compare with
            the current object.</param>
            <returns><c>true</c> if the specified
            <see cref="T:System.Object"/> is equal to this
            instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:AM.Text.NumberText.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance,
            suitable for use in hashing algorithms and data
            structures like a hash table.</returns>
        </member>
        <member name="M:AM.Text.NumberText.op_Addition(AM.Text.NumberText,System.Int32)">
            <summary>
            Implements the + operator.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.op_Subtraction(AM.Text.NumberText,AM.Text.NumberText)">
            <summary>
            Implements the - operator.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through
            the collection.
            </summary>
            <returns>An enumerator that can be used
            to iterate through the collection.</returns>
        </member>
        <member name="M:AM.Text.NumberText.RestoreFromStream(System.IO.BinaryReader)">
            <summary>
            Restore object state from the given stream.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.SaveToStream(System.IO.BinaryWriter)">
            <summary>
            Save object state to the given stream.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.Verify(System.Boolean)">
            <summary>
            Verify the object state.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.ToString">
            <inheritdoc/>
        </member>
        <member name="P:AM.Text.NumberText.Empty">
            <summary>
            Пустое ли число?
            </summary>
        </member>
        <member name="P:AM.Text.NumberText.LastIndex">
            <summary>
            Номер последнего сегмента.
            </summary>
        </member>
        <member name="P:AM.Text.NumberText.Length">
            <summary>
            Количество сегментов, из которых состоит число.
            </summary>
        </member>
        <member name="P:AM.Text.NumberText.TextOnly">
            <summary>
            Contains only text (prefix)?
            </summary>
        </member>
        <member name="P:AM.Text.NumberText.ValueOnly">
            <summary>
            Contains only numeric value?
            </summary>
        </member>
        <member name="T:AM.Text.NumberText.Chunk">
            <summary>
            Fragment: a prefix plus a number.
            </summary>
        </member>
        <member name="M:AM.Text.NumberText.Chunk.RestoreFromStream(System.IO.BinaryReader)">
            <inheritdoc cref="M:AM.Runtime.IHandmadeSerializable.RestoreFromStream(System.IO.BinaryReader)"/>
        </member>
        <member name="M:AM.Text.NumberText.Chunk.SaveToStream(System.IO.BinaryWriter)">
            <inheritdoc cref="M:AM.Runtime.IHandmadeSerializable.SaveToStream(System.IO.BinaryWriter)"/>
        </member>
        <member name="M:AM.Text.NumberText.Chunk.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="P:AM.Text.NumberText.Chunk.Prefix">
            <summary>
            Prefix.
            </summary>
        </member>
        <member name="P:AM.Text.NumberText.Chunk.HaveValue">
            <summary>
            Have value?
            </summary>
        </member>
        <member name="P:AM.Text.NumberText.Chunk.Value">
            <summary>
            Numeric value itself.
            </summary>
        </member>
        <member name="P:AM.Text.NumberText.Chunk.Length">
            <summary>
            Length (used when converting value to string).
            </summary>
        </member>
        <member name="T:AM.Text.Output.ConsoleOutput">
            <summary>
            Консольный вывод.
            </summary>
        </member>
        <member name="M:AM.Text.Output.ConsoleOutput.Clear">
            <inheritdoc cref="M:AM.Text.Output.AbstractOutput.Clear"/>
        </member>
        <member name="M:AM.Text.Output.ConsoleOutput.Configure(System.String)">
            <inheritdoc cref="M:AM.Text.Output.AbstractOutput.Configure(System.String)"/>
        </member>
        <member name="M:AM.Text.Output.ConsoleOutput.Write(System.String)">
            <inheritdoc cref="M:AM.Text.Output.AbstractOutput.Write(System.String)"/>
        </member>
        <member name="M:AM.Text.Output.ConsoleOutput.WriteError(System.String)">
            <inheritdoc cref="M:AM.Text.Output.AbstractOutput.WriteError(System.String)"/>
        </member>
        <member name="P:AM.Text.Output.ConsoleOutput.HaveError">
            <inheritdoc cref="P:AM.Text.Output.AbstractOutput.HaveError"/>
        </member>
        <member name="T:AM.Text.Output.DummyOutput">
            <summary>
            Выходной поток, который не даёт закрыться
            другому потоку.
            </summary>
        </member>
        <member name="M:AM.Text.Output.DummyOutput.#ctor(AM.Text.Output.AbstractOutput)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:AM.Text.Output.DummyOutput.Clear">
            <summary>
            Очищает вывод, например, окно.
            Надо переопределить в потомке.
            </summary>
        </member>
        <member name="M:AM.Text.Output.DummyOutput.Configure(System.String)">
            <summary>
            Конфигурирование объекта.
            Надо переопределить в потомке.
            </summary>
        </member>
        <member name="M:AM.Text.Output.DummyOutput.Write(System.String)">
            <summary>
            Метод, который нужно переопределить
            в потомке.
            </summary>
        </member>
        <member name="M:AM.Text.Output.DummyOutput.WriteError(System.String)">
            <summary>
            Writes the error.
            </summary>
        </member>
        <member name="P:AM.Text.Output.DummyOutput.Inner">
            <summary>
            Внутренний поток.
            </summary>
        </member>
        <member name="P:AM.Text.Output.DummyOutput.HaveError">
            <summary>
            Флаг: был ли вывод с помощью WriteError.
            </summary>
        </member>
        <member name="T:AM.Text.Output.FileOutput">
            <summary>
            Файловый вывод.
            </summary>
        </member>
        <member name="M:AM.Text.Output.FileOutput.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:AM.Text.Output.FileOutput.#ctor(System.String)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:AM.Text.Output.FileOutput.Close">
            <summary>
            Закрытие файла.
            </summary>
        </member>
        <member name="M:AM.Text.Output.FileOutput.Open(System.String,System.Boolean)">
            <summary>
            Открытие файла.
            </summary>
        </member>
        <member name="M:AM.Text.Output.FileOutput.Open(System.String)">
            <summary>
            Открытие файла.
            </summary>
        </member>
        <member name="M:AM.Text.Output.FileOutput.Open(System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Открытие файла.
            </summary>
        </member>
        <member name="M:AM.Text.Output.FileOutput.Open(System.String,System.Text.Encoding)">
            <summary>
            Открытие файла.
            </summary>
        </member>
        <member name="M:AM.Text.Output.FileOutput.Clear">
            <summary>
            Очищает вывод, например, окно.
            Надо переопределить в потомке.
            </summary>
        </member>
        <member name="M:AM.Text.Output.FileOutput.Configure(System.String)">
            <summary>
            Конфигурирование объекта.
            Надо переопределить в потомке.
            </summary>
        </member>
        <member name="M:AM.Text.Output.FileOutput.Write(System.String)">
            <summary>
            Метод, который нужно переопределить
            в потомке.
            </summary>
        </member>
        <member name="M:AM.Text.Output.FileOutput.WriteError(System.String)">
            <summary>
            Выводит ошибку. Например, красным цветом.
            Надо переопределить в потомке.
            </summary>
        </member>
        <member name="M:AM.Text.Output.FileOutput.Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="P:AM.Text.Output.FileOutput.FileName">
            <summary>
            Имя файла.
            </summary>
        </member>
        <member name="P:AM.Text.Output.FileOutput.HaveError">
            <summary>
            Флаг: был ли вывод с помощью WriteError.
            </summary>
        </member>
        <member name="T:AM.Text.Output.NullOutput">
            <summary>
            Пустой объект вывода.
            </summary>
        </member>
        <member name="M:AM.Text.Output.NullOutput.Clear">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AM.Text.Output.NullOutput.Configure(System.String)">
            <summary>
            
            </summary>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:AM.Text.Output.NullOutput.Write(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:AM.Text.Output.NullOutput.WriteError(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="P:AM.Text.Output.NullOutput.HaveError">
            <summary>
            
            </summary>
        </member>
        <member name="T:AM.Text.Output.TeeOutput">
            <summary>
            Расщепление (повтор) потока вывода.
            </summary>
        </member>
        <member name="M:AM.Text.Output.TeeOutput.#ctor">
            <summary>
            Конструктор по умолчанию.
            </summary>
        </member>
        <member name="M:AM.Text.Output.TeeOutput.#ctor(AM.Text.Output.AbstractOutput[])">
            <summary>
            Создание объекта с заранее установленным
            списком.
            </summary>
        </member>
        <member name="M:AM.Text.Output.TeeOutput.Clear">
            <summary>
            Очистка.
            </summary>
        </member>
        <member name="M:AM.Text.Output.TeeOutput.Configure(System.String)">
            <summary>
            Конфигурация.
            </summary>
        </member>
        <member name="M:AM.Text.Output.TeeOutput.Write(System.String)">
            <summary>
            Вывод.
            </summary>
        </member>
        <member name="M:AM.Text.Output.TeeOutput.WriteError(System.String)">
            <summary>
            Вывод.
            </summary>
        </member>
        <member name="M:AM.Text.Output.TeeOutput.Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="P:AM.Text.Output.TeeOutput.Output">
            <summary>
            Подчинённые потоки
            </summary>
        </member>
        <member name="P:AM.Text.Output.TeeOutput.HaveError">
            <summary>
            Есть ошибка?
            </summary>
        </member>
        <member name="T:AM.Text.Ranges.NumberRange">
            <summary>
            Range of numbers containing non-numeric fragments.
            </summary>
        </member>
        <member name="M:AM.Text.Ranges.NumberRange.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:AM.Text.Ranges.NumberRange.#ctor(AM.Text.NumberText)">
            <summary>
            Конструктор для диапазона, состоящего
            из одного числа.
            </summary>
        </member>
        <member name="M:AM.Text.Ranges.NumberRange.#ctor(AM.Text.NumberText,AM.Text.NumberText)">
            <summary>
            Конструктор для произвольного диапазона.
            </summary>
            <param name="start"></param>
            <param name="stop"></param>
        </member>
        <member name="M:AM.Text.Ranges.NumberRange.Contains(AM.Text.NumberText)">
            <summary>
            Проверка, содержит ли диапазон указанное значение.
            </summary>
        </member>
        <member name="M:AM.Text.Ranges.NumberRange.Parse(System.String)">
            <summary>
            Parse text representation.
            </summary>
        </member>
        <member name="M:AM.Text.Ranges.NumberRange.For(System.Action{AM.Text.NumberText})">
            <summary>
            Выполнение указанного действия на всём диапазоне.
            </summary>
        </member>
        <member name="M:AM.Text.Ranges.NumberRange.Intersect(AM.Text.Ranges.NumberRange)">
            <summary>
            Пересечение двух диапазонов.
            </summary>
        </member>
        <member name="M:AM.Text.Ranges.NumberRange.IsEmpty">
            <summary>
            Проверка, не пустой ли диапазон.
            </summary>
        </member>
        <member name="M:AM.Text.Ranges.NumberRange.Union(AM.Text.Ranges.NumberRange)">
            <summary>
            Объединение двух диапазонов.
            </summary>
        </member>
        <member name="M:AM.Text.Ranges.NumberRange.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through
            the collection.
            </summary>
        </member>
        <member name="M:AM.Text.Ranges.NumberRange.RestoreFromStream(System.IO.BinaryReader)">
            <inheritdoc cref="M:AM.Runtime.IHandmadeSerializable.RestoreFromStream(System.IO.BinaryReader)"/>
        </member>
        <member name="M:AM.Text.Ranges.NumberRange.SaveToStream(System.IO.BinaryWriter)">
            <inheritdoc cref="M:AM.Runtime.IHandmadeSerializable.SaveToStream(System.IO.BinaryWriter)"/>
        </member>
        <member name="M:AM.Text.Ranges.NumberRange.Equals(AM.Text.Ranges.NumberRange)">
            <inheritdoc cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:AM.Text.Ranges.NumberRange.Verify(System.Boolean)">
            <inheritdoc cref="M:AM.IVerifiable.Verify(System.Boolean)"/>
        </member>
        <member name="M:AM.Text.Ranges.NumberRange.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="P:AM.Text.Ranges.NumberRange.Delimiters">
            <summary>
            Delimiters.
            </summary>
        </member>
        <member name="P:AM.Text.Ranges.NumberRange.DelimitersOrMinus">
            <summary>
            Delimiters or minus sign.
            </summary>
        </member>
        <member name="P:AM.Text.Ranges.NumberRange.Start">
            <summary>
            Start value.
            </summary>
        </member>
        <member name="P:AM.Text.Ranges.NumberRange.Stop">
            <summary>
            Stop value. Can coincide
            with <see cref="P:AM.Text.Ranges.NumberRange.Start"/> value.
            </summary>
        </member>
        <member name="T:AM.Text.Ranges.NumberRangeCollection">
            <summary>
            Набор диапазонов чисел.
            </summary>
        </member>
        <member name="F:AM.Text.Ranges.NumberRangeCollection.DefaultDelimiter">
            <summary>
            Разделитель по умолчанию.
            </summary>
        </member>
        <member name="M:AM.Text.Ranges.NumberRangeCollection.#ctor">
            <summary>
            Конструктор по умолчанию.
            </summary>
        </member>
        <member name="M:AM.Text.Ranges.NumberRangeCollection.Add(AM.Text.Ranges.NumberRange)">
            <summary>
            Добавление диапазона в набор.
            </summary>
        </member>
        <member name="M:AM.Text.Ranges.NumberRangeCollection.Add(System.String,System.String)">
            <summary>
            Добавление диапазона в набор.
            </summary>
        </member>
        <member name="M:AM.Text.Ranges.NumberRangeCollection.Add(System.String)">
            <summary>
            Добавление диапазона в набор.
            </summary>
        </member>
        <member name="M:AM.Text.Ranges.NumberRangeCollection.Contains(AM.Text.NumberText)">
            <summary>
            Проверка, содержит ли набор указанное число.
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:AM.Text.Ranges.NumberRangeCollection.Parse(System.String)">
            <summary>
            Parse the text representation
            </summary>
        </member>
        <member name="M:AM.Text.Ranges.NumberRangeCollection.Cumulate(System.Collections.Generic.List{AM.Text.NumberText})">
            <summary>
            Кумуляция (сжатие).
            </summary>
        </member>
        <member name="M:AM.Text.Ranges.NumberRangeCollection.Cumulate(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Кумуляция (сжатие).
            </summary>
        </member>
        <member name="M:AM.Text.Ranges.NumberRangeCollection.For(System.Action{AM.Text.NumberText})">
            <summary>
            Выполнение указанного действия
            на всех диапазонах набора.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:AM.Text.Ranges.NumberRangeCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through
            the collection.
            </summary>
        </member>
        <member name="M:AM.Text.Ranges.NumberRangeCollection.RestoreFromStream(System.IO.BinaryReader)">
            <summary>
            Restore object state from the specified stream.
            </summary>
        </member>
        <member name="M:AM.Text.Ranges.NumberRangeCollection.SaveToStream(System.IO.BinaryWriter)">
            <summary>
            Save object state to the specified stream.
            </summary>
        </member>
        <member name="M:AM.Text.Ranges.NumberRangeCollection.ToString">
            <summary>
            Returns a <see cref="T:System.String"/>
            that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/>
            that represents this instance.</returns>
        </member>
        <member name="P:AM.Text.Ranges.NumberRangeCollection.Count">
            <summary>
            Gets the collection item count.
            </summary>
        </member>
        <member name="P:AM.Text.Ranges.NumberRangeCollection.Delimiter">
            <summary>
            Разделитель диапазонов.
            </summary>
        </member>
        <member name="T:AM.Text.Tokenizer.TokenizerException">
            <summary>
            Exception class for <see cref="T:AM.Text.Tokenizer.StringTokenizer"/>.
            </summary>
        </member>
        <member name="M:AM.Text.Tokenizer.TokenizerException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Text.Tokenizer.TokenizerException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Text.Tokenizer.TokenizerException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:AM.Text.Tokenizer.TokenizerSettings">
            <summary>
            Settings for <see cref="T:AM.Text.Tokenizer.StringTokenizer"/>
            </summary>
        </member>
        <member name="M:AM.Text.Tokenizer.TokenizerSettings.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:AM.Text.Tokenizer.TokenizerSettings.IgnoreNewLine">
            <summary>
            Ignore newline.
            </summary>
        </member>
        <member name="P:AM.Text.Tokenizer.TokenizerSettings.IgnoreWhitespace">
            <summary>
            Ignore whitespace.
            </summary>
        </member>
        <member name="P:AM.Text.Tokenizer.TokenizerSettings.IgnoreEOF">
            <summary>
            Ignore EOF in AllTokens().
            </summary>
        </member>
        <member name="P:AM.Text.Tokenizer.TokenizerSettings.SymbolChars">
            <summary>
            Symbol characters.
            </summary>
        </member>
        <member name="P:AM.Text.Tokenizer.TokenizerSettings.UnescapeStrings">
            <summary>
            Unescape strings.
            </summary>
        </member>
        <member name="P:AM.Text.Tokenizer.TokenizerSettings.TrimDelimiter">
            <summary>
            Trim delimiter
            </summary>
        </member>
        <member name="P:AM.Text.Tokenizer.TokenizerSettings.CombinedSymbols">
            <summary>
            Array of the combined symbols.
            </summary>
        </member>
        <member name="P:AM.Text.Tokenizer.TokenizerSettings.TrimQuotes">
            <summary>
            Trim quotes.
            </summary>
        </member>
        <member name="P:AM.Text.Tokenizer.TokenizerSettings.AcceptFloatingPoint">
            <summary>
            Accept floating point number.
            </summary>
        </member>
        <member name="T:AM.Text.Tokenizer.TokenKind">
            <summary>
            Тип токена.
            </summary>
        </member>
        <member name="F:AM.Text.Tokenizer.TokenKind.Unknown">
            <summary>
            Непонятно что.
            </summary>
        </member>
        <member name="F:AM.Text.Tokenizer.TokenKind.Word">
            <summary>
            Слово, например, идентификатор.
            </summary>
        </member>
        <member name="F:AM.Text.Tokenizer.TokenKind.Number">
            <summary>
            Число, в том числе с плавающей точкой.
            </summary>
        </member>
        <member name="F:AM.Text.Tokenizer.TokenKind.QuotedString">
            <summary>
            Строка в одинарных или двойных кавычках.
            </summary>
        </member>
        <member name="F:AM.Text.Tokenizer.TokenKind.Whitespace">
            <summary>
            Пробелы.
            </summary>
        </member>
        <member name="F:AM.Text.Tokenizer.TokenKind.Symbol">
            <summary>
            Символы вроде +, /, = и т. п.
            </summary>
        </member>
        <member name="F:AM.Text.Tokenizer.TokenKind.EOL">
            <summary>
            Перевод строки.
            </summary>
        </member>
        <member name="F:AM.Text.Tokenizer.TokenKind.EOF">
            <summary>
            Конец текста.
            </summary>
        </member>
        <member name="T:AM.Text.Tokenizer.TokenStream">
            <summary>
            Stream of tokens.
            </summary>
        </member>
        <member name="M:AM.Text.Tokenizer.TokenStream.#ctor(System.String[])">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Text.Tokenizer.TokenStream.#ctor(AM.Text.Tokenizer.Token[])">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Text.Tokenizer.TokenStream.MoveNext">
            <summary>
            Move to next token.
            </summary>
        </member>
        <member name="M:AM.Text.Tokenizer.TokenStream.Peek">
            <summary>
            Peek the next token.
            </summary>
        </member>
        <member name="P:AM.Text.Tokenizer.TokenStream.Current">
            <summary>
            Current token.
            </summary>
            <remarks><c>null</c> on end of stream.</remarks>
        </member>
        <member name="P:AM.Text.Tokenizer.TokenStream.HasNext">
            <summary>
            Has next token?
            </summary>
        </member>
        <member name="P:AM.Text.Tokenizer.TokenStream.Position">
            <summary>
            Position in the stream.
            </summary>
        </member>
        <member name="T:AM.Text.Transliterator">
            <summary>
            Транслитерируем кириллицу в латиницу.
            </summary>
        </member>
        <member name="M:AM.Text.Transliterator.Transliterate(System.String)">
            <summary>
            Transliterates the specified text.
            </summary>
        </member>
        <member name="T:AM.Threading.BusyGuard">
            <summary>
            Обёртка для ожидания и освобождения <see cref="T:AM.Threading.BusyState"/>.
            </summary>
        </member>
        <member name="M:AM.Threading.BusyGuard.#ctor(AM.Threading.BusyState)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Threading.BusyGuard.#ctor(AM.Threading.BusyState,System.TimeSpan)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Threading.BusyGuard.Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="P:AM.Threading.BusyGuard.State">
            <summary>
            State.
            </summary>
        </member>
        <member name="P:AM.Threading.BusyGuard.Timeout">
            <summary>
            Timeout.
            </summary>
        </member>
        <member name="T:AM.Threading.BusyState">
            <summary>
            Busy state indicator.
            </summary>
        </member>
        <member name="M:AM.Threading.BusyState.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Threading.BusyState.#ctor(System.Boolean)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Threading.BusyState.Run(System.Action)">
            <summary>
            Run some code.
            </summary>
        </member>
        <member name="M:AM.Threading.BusyState.RunAsync(System.Action)">
            <summary>
            Run some code in asychronous manner.
            </summary>
        </member>
        <member name="M:AM.Threading.BusyState.SetState(System.Boolean)">
            <summary>
            Change the state.
            </summary>
        </member>
        <member name="M:AM.Threading.BusyState.WaitAndGrab">
            <summary>
            Ожидаем, пока не освободится, и захватываем.
            </summary>
        </member>
        <member name="M:AM.Threading.BusyState.WaitAndGrab(System.TimeSpan)">
            <summary>
            Ожидаем, пока не освободится, затем захватываем.
            </summary>
        </member>
        <member name="M:AM.Threading.BusyState.WaitFreeState">
            <summary>
            Ожидаем, пока не освободится.
            </summary>
        </member>
        <member name="M:AM.Threading.BusyState.WaitFreeState(System.TimeSpan)">
            <summary>
            Ожидаем, пока не освободится.
            </summary>
        </member>
        <member name="M:AM.Threading.BusyState.op_Implicit(AM.Threading.BusyState)~System.Boolean">
            <summary>
            Implicit conversion operator.
            </summary>
        </member>
        <member name="M:AM.Threading.BusyState.op_Implicit(System.Boolean)~AM.Threading.BusyState">
            <summary>
            Implicit conversion operator.
            </summary>
        </member>
        <member name="M:AM.Threading.BusyState.RestoreFromStream(System.IO.BinaryReader)">
            <inheritdoc cref="M:AM.Runtime.IHandmadeSerializable.RestoreFromStream(System.IO.BinaryReader)"/>
        </member>
        <member name="M:AM.Threading.BusyState.SaveToStream(System.IO.BinaryWriter)">
            <inheritdoc cref="M:AM.Runtime.IHandmadeSerializable.SaveToStream(System.IO.BinaryWriter)"/>
        </member>
        <member name="M:AM.Threading.BusyState.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="E:AM.Threading.BusyState.StateChanged">
            <summary>
            Raised when the state has changed.
            </summary>
        </member>
        <member name="P:AM.Threading.BusyState.Busy">
            <summary>
            The state itself.
            </summary>
        </member>
        <member name="P:AM.Threading.BusyState.UseAsync">
            <summary>
            Whether to use asynchronous event handler.
            </summary>
        </member>
        <member name="P:AM.Threading.BusyState.WaitHandle">
            <summary>
            Хэндл для ожидания.
            </summary>
        </member>
        <member name="T:AM.Threading.StateGuard`1">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Threading.StateGuard`1.#ctor(AM.Threading.StateHolder{`0})">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Threading.StateGuard`1.Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="P:AM.Threading.StateGuard`1.CurrentValue">
            <summary>
            Current value.
            </summary>
        </member>
        <member name="P:AM.Threading.StateGuard`1.SavedValue">
            <summary>
            Saved value.
            </summary>
        </member>
        <member name="P:AM.Threading.StateGuard`1.State">
            <summary>
            State.
            </summary>
        </member>
        <member name="T:AM.Threading.StateHolder`1">
            <summary>
            Контейнер для хранения значения и отслеживания его изменений.
            </summary>
        </member>
        <member name="M:AM.Threading.StateHolder`1.#ctor">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:AM.Threading.StateHolder`1.#ctor(`0)">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:AM.Threading.StateHolder`1.SetValue(`0)">
            <summary>
            Установка нового значения
            </summary>
        </member>
        <member name="M:AM.Threading.StateHolder`1.op_Implicit(AM.Threading.StateHolder{`0})~`0">
            <summary>
            Implicit conversion operator.
            </summary>
        </member>
        <member name="M:AM.Threading.StateHolder`1.op_Implicit(`0)~AM.Threading.StateHolder{`0}">
            <summary>
            Implicit conversion operator.
            </summary>
        </member>
        <member name="M:AM.Threading.StateHolder`1.RestoreFromStream(System.IO.BinaryReader)">
            <inheritdoc cref="M:AM.Runtime.IHandmadeSerializable.RestoreFromStream(System.IO.BinaryReader)"/>
        </member>
        <member name="M:AM.Threading.StateHolder`1.SaveToStream(System.IO.BinaryWriter)">
            <inheritdoc cref="M:AM.Runtime.IHandmadeSerializable.SaveToStream(System.IO.BinaryWriter)"/>
        </member>
        <member name="M:AM.Threading.StateHolder`1.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="E:AM.Threading.StateHolder`1.ValueChanged">
            <summary>
            Вызывается при изменении значения.
            </summary>
        </member>
        <member name="P:AM.Threading.StateHolder`1.AllowNull">
            <summary>
            Allow <c>null</c> values?
            </summary>
        </member>
        <member name="P:AM.Threading.StateHolder`1.WaitHandle">
            <summary>
            Хэндл для ожидания изменения значения.
            </summary>
        </member>
        <member name="P:AM.Threading.StateHolder`1.Value">
            <summary>
            Value itself.
            </summary>
        </member>
        <member name="T:AM.Threading.Tasks.TaskProcessor">
            <summary>
            Simplest task processor.
            </summary>
        </member>
        <member name="M:AM.Threading.Tasks.TaskProcessor.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Threading.Tasks.TaskProcessor.Complete">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Threading.Tasks.TaskProcessor.Enqueue(System.Action)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Threading.Tasks.TaskProcessor.WaitForCompletion">
            <summary>
            Wait for completion.
            </summary>
        </member>
        <member name="P:AM.Threading.Tasks.TaskProcessor.Exceptions">
            <summary>
            Exceptions.
            </summary>
        </member>
        <member name="P:AM.Threading.Tasks.TaskProcessor.HaveErrors">
            <summary>
            Have errors?
            </summary>
        </member>
        <member name="T:AM.Threading.Tasks.TaskUtility">
            <summary>
            Extensions for <see cref="T:System.Threading.Tasks.Task"/> class.
            </summary>
        </member>
        <member name="M:AM.Threading.Tasks.TaskUtility.ConfigureSafe(System.Threading.Tasks.Task)">
            <summary>
            ConfigureAwait(false).
            </summary>
        </member>
        <member name="M:AM.Threading.Tasks.TaskUtility.ConfigureSafe``1(System.Threading.Tasks.Task{``0})">
            <summary>
            ConfigureAwait(false).
            </summary>
        </member>
        <member name="M:AM.Threading.Tasks.TaskUtility.DisposeTask(System.Threading.Tasks.Task)">
            <summary>
            Dispose the task.
            </summary>
        </member>
        <member name="M:AM.Threading.Tasks.TaskUtility.DisposeTask``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Dispose the task.
            </summary>
        </member>
        <member name="T:AM.Threading.ThreadMethod">
            <summary>
            Делегат для <see cref="T:AM.Threading.ThreadRunner"/>.
            </summary>
        </member>
        <member name="T:AM.Threading.ThreadRunner">
            <summary>
            Runs specified method (delegate) in new <see cref="T:System.Threading.Thread"/>.
            </summary>
        </member>
        <member name="M:AM.Threading.ThreadRunner.#ctor">
            <summary>
            Don't allow somebody to create instance.
            </summary>
        </member>
        <member name="M:AM.Threading.ThreadRunner.RunThread(AM.Threading.ThreadMethod,System.Object[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Threading.ThreadRunner.RunThread(System.Delegate,System.Object[])">
            <summary>
            Run the method on background.
            </summary>
        </member>
        <member name="M:AM.Threading.ThreadRunner.RunOnPool(AM.Threading.ThreadMethod,System.Object[])">
            <summary>
            Run the method on the system thread pool.
            </summary>
        </member>
        <member name="T:AM.Threading.ThreadUtility">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Threading.ThreadUtility.Sleep(System.Int32)">
            <summary>
            Sleep for specified milliseconds.
            </summary>
        </member>
        <member name="P:AM.Threading.ThreadUtility.ThreadId">
            <summary>
            Thread.CurrentThread.ManagedThreadId
            </summary>
        </member>
        <member name="T:AM.TimeSpanUtility">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.TimeSpanUtility.IsZero(System.TimeSpan)">
            <summary>
            Is zero-length time span?
            </summary>
        </member>
        <member name="M:AM.TimeSpanUtility.IsZeroOrLess(System.TimeSpan)">
            <summary>
            Is zero-length or less?
            </summary>
        </member>
        <member name="M:AM.TimeSpanUtility.LessThenZero(System.TimeSpan)">
            <summary>
            Is length of the time span less than zero?
            </summary>
            <param name="timeSpan"></param>
            <returns></returns>
        </member>
        <member name="M:AM.TimeSpanUtility.ToAutoString(System.TimeSpan)">
            <summary>
            Converts time span to string
            automatically selecting format
            according duration of the span.
            </summary>
        </member>
        <member name="M:AM.TimeSpanUtility.ToDayString(System.TimeSpan)">
            <summary>
            Converts time span using format 'dd:hh:mm:ss'
            </summary>
        </member>
        <member name="M:AM.TimeSpanUtility.ToHourString(System.TimeSpan)">
            <summary>
            Converts time span using format 'hh:mm:ss'
            </summary>
        </member>
        <member name="M:AM.TimeSpanUtility.ToMinuteString(System.TimeSpan)">
            <summary>
            Converts time span using format 'mm:ss'
            </summary>
        </member>
        <member name="M:AM.TimeSpanUtility.ToSecondString(System.TimeSpan)">
            <summary>
            Converts time span using format 's.ff'
            </summary>
        </member>
        <member name="M:AM.TimeSpanUtility.ToWholeSecondsString(System.TimeSpan)">
            <summary>
            Converts time span using format 's'
            </summary>
        </member>
        <member name="P:AM.TimeSpanUtility.OneDay">
            <summary>
            One day.
            </summary>
        </member>
        <member name="P:AM.TimeSpanUtility.OneHour">
            <summary>
            One hour.
            </summary>
        </member>
        <member name="P:AM.TimeSpanUtility.OneMinute">
            <summary>
            One minute.
            </summary>
        </member>
        <member name="P:AM.TimeSpanUtility.OneSecond">
            <summary>
            One second.
            </summary>
        </member>
        <member name="T:AM.TriState">
            <summary>
            Three-state logic.
            </summary>
            <remarks>See
            https://en.wikipedia.org/wiki/Three-state_logic
            </remarks>
        </member>
        <member name="F:AM.TriState.False">
            <summary>
            False.
            </summary>
        </member>
        <member name="F:AM.TriState.True">
            <summary>
            True.
            </summary>
        </member>
        <member name="F:AM.TriState.Undefined">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute">
            <summary>
            For compatibility only.
            </summary>
        </member>
        <member name="T:System.TypeInfo">
            <summary>
            Represents type declarations for class types, interface types, array types, value types,
            enumeration types, type parameters, generic type definitions, and open
            or closed constructed generic types.
            </summary>
        </member>
        <member name="F:System.TypeInfo._type">
            <summary>
            Target type
            </summary>
        </member>
        <member name="M:System.TypeInfo.#ctor(System.Type)">
            <summary>
            Constructs an instance of the <see cref="T:System.TypeInfo"/> representation of the specified type
            </summary>
            <param name="type">The type</param>
        </member>
        <member name="M:System.TypeInfo.IsInstanceOfType(System.Object)">
            <summary>
            Determines whether the specified object is an instance of the current type
            </summary>
            <param name="o">The object to compare with the current type</param>
            <returns>true if the current type is in the inheritance hierarchy of the object represented
            by <code>o</code>, or if the current type is an interface that <code>o</code> supports.
            false if neither of these conditions is the case, or if <code>o</code> is null, or if
            the current type is an open generic type
            (that is, <code>System.Type.ContainsGenericParameters</code> returns true).</returns>
        </member>
        <member name="P:System.TypeInfo.Assembly">
            <summary>
            Gets a <see cref="P:System.TypeInfo.Assembly"/> in which the type is declared.
            For generic types, gets the <see cref="P:System.TypeInfo.Assembly"/> in which the generic type is defined.
            </summary>
        </member>
        <member name="P:System.TypeInfo.IsGenericType">
            <summary>
            Gets a value indicating whether the current type is a generic type
            </summary>
        </member>
        <member name="P:System.TypeInfo.IsValueType">
            <summary>
            Gets a value indicating whether the current type is a value type
            </summary>
        </member>
        <member name="T:AM.UniversalComparer`1">
            <summary>
            Универсальный компаратор.
            </summary>
        </member>
        <member name="M:AM.UniversalComparer`1.#ctor(System.Func{`0,`0,System.Int32})">
            <summary>
            Конструктор.
            </summary>
        </member>
        <member name="M:AM.UniversalComparer`1.Compare(`0,`0)">
            <summary>
            Compares the specified values.
            </summary>
        </member>
        <member name="P:AM.UniversalComparer`1.Function">
            <summary>
            Используемый для сравнения делегат.
            </summary>
        </member>
        <member name="T:AM.Utility">
            <summary>
            Bunch of useful routines.
            </summary>
        </member>
        <member name="M:AM.Utility.DumpBytes(System.Byte[])">
            <summary>
            Шестнадцатиричный дамп массива байт.
            </summary>
        </member>
        <member name="M:AM.Utility.EnumerableEquals(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Compare two sequences.
            </summary>
            <remarks>Borrowed from StackOverflow:
            http://stackoverflow.com/questions/1680602/what-is-the-algorithm-used-by-the-memberwise-equality-test-in-net-structs
            </remarks>
        </member>
        <member name="M:AM.Utility.GetHashCodeAggregate``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Aggregate hashcode for some objects.
            </summary>
            <remarks>Borrowed from Tom DuPont:
            http://www.tomdupont.net/2014/02/how-to-combine-hashcodes.html
            </remarks>
        </member>
        <member name="M:AM.Utility.GetHashCodeAggregate``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Aggregate hashcode for some objects.
            </summary>
            <remarks>Borrowed from Tom DuPont:
            http://www.tomdupont.net/2014/02/how-to-combine-hashcodes.html
            </remarks>
        </member>
        <member name="M:AM.Utility.MemberwiseEquals(System.Object,System.Object)">
            <summary>
            Implementation of a memberwise comparison
            for objects.
            </summary>
            <remarks>Borrowed from StackOverflow:
            http://stackoverflow.com/questions/1680602/what-is-the-algorithm-used-by-the-memberwise-equality-test-in-net-structs
            </remarks>
        </member>
        <member name="M:AM.Utility.PropertyEquals(System.Object,System.Object)">
            <summary>
            Compares two object by public instance properties.
            </summary>
            <remarks>Borrowed from StackOverflow:
            http://stackoverflow.com/questions/506096/comparing-object-properties-in-c-sharp
            </remarks>
        </member>
        <member name="M:AM.Utility.GetItem``1(``0[],System.Int32,``0)">
            <summary>
            Выборка элемента из массива.
            </summary>
        </member>
        <member name="M:AM.Utility.GetItem``1(``0[],System.Int32)">
            <summary>
            Выборка элемента из массива.
            </summary>
        </member>
        <member name="M:AM.Utility.GetItem``1(System.Collections.Generic.IList{``0},System.Int32,``0)">
            <summary>
            Выборка элемента из списка.
            </summary>
        </member>
        <member name="M:AM.Utility.GetItem``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Выборка элемента из массива.
            </summary>
        </member>
        <member name="M:AM.Utility.IsOneOf``1(``0,``0[])">
            <summary>
            Determines whether is one of the specified values.
            </summary>
        </member>
        <member name="M:AM.Utility.NotDefault``1(``0)">
            <summary>
            Determines whether given object
            is default value.
            </summary>
        </member>
        <member name="M:AM.Utility.NotDefault``1(``0,``0)">
            <summary>
            Returns given value instead of
            default(T) if happens.
            </summary>
        </member>
        <member name="M:AM.Utility.NullableToString``1(``0)">
            <summary>
            Преобразование любого значения в строку.
            </summary>
            <returns>Для <c>null</c> возвращается <c>null</c>.
            </returns>
        </member>
        <member name="M:AM.Utility.NullableToVisibleString``1(``0)">
            <summary>
            Преобразование любого значения в строку.
            </summary>
            <returns>Для <c>null</c> возвращается "(null)".
            </returns>
        </member>
        <member name="M:AM.Utility.ThrowIfNull``1(``0)">
            <summary>
            Throw <see cref="T:System.ArgumentNullException"/>
            if given value is <c>null</c>.
            </summary>
        </member>
        <member name="M:AM.Utility.ThrowIfNull``2(``0)">
            <summary>
            Throw <see cref="T:System.ArgumentNullException"/>
            if given value is <c>null</c>.
            </summary>
        </member>
        <member name="M:AM.Utility.ThrowIfNull``1(``0,System.String)">
            <summary>
            Throw <see cref="T:System.ArgumentNullException"/>
            if given value is <c>null</c>.
            </summary>
        </member>
        <member name="M:AM.Utility.ToVisibleString``1(``0)">
            <summary>
            Преобразование любого значения в строку.
            </summary>
            <returns>Для <c>null</c> возвращается "(null)".
            </returns>
        </member>
        <member name="T:AM.ValueEventArgs`1">
            <summary>
            <see cref="T:System.EventArgs"/> with value field.
            </summary>
        </member>
        <member name="F:AM.ValueEventArgs`1.Empty">
            <summary>
            Empty event arguments.
            </summary>
        </member>
        <member name="M:AM.ValueEventArgs`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.ValueEventArgs`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.ValueEventArgs`1.ToString">
            <inheritdoc />
        </member>
        <member name="P:AM.ValueEventArgs`1.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="T:AM.ValueEventArgs`2">
            <summary>
            <see cref="T:System.EventArgs"/> with value field.
            </summary>
        </member>
        <member name="F:AM.ValueEventArgs`2.Empty">
            <summary>
            Empty event arguments.
            </summary>
        </member>
        <member name="M:AM.ValueEventArgs`2.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.ValueEventArgs`2.#ctor(`0,`1)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.ValueEventArgs`2.ToString">
            <inheritdoc />
        </member>
        <member name="P:AM.ValueEventArgs`2.Value1">
            <summary>
            Value.
            </summary>
        </member>
        <member name="P:AM.ValueEventArgs`2.Value2">
            <summary>
            Value.
            </summary>
        </member>
        <member name="T:AM.VerificationException">
            <summary>
            Exception for <see cref="T:AM.IVerifiable"/> interface.
            </summary>
        </member>
        <member name="M:AM.VerificationException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.VerificationException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.VerificationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:AM.Verifier`1">
            <summary>
            Helper for <see cref="T:AM.IVerifiable"/>
            </summary>
        </member>
        <member name="M:AM.Verifier`1.#ctor(`0,System.Boolean)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Verifier`1.Assert(System.Boolean)">
            <summary>
            Assert.
            </summary>
        </member>
        <member name="M:AM.Verifier`1.Assert(System.Boolean,System.String)">
            <summary>
            Assert.
            </summary>
        </member>
        <member name="M:AM.Verifier`1.Assert(System.Boolean,System.String,System.Object[])">
            <summary>
            Assert.
            </summary>
        </member>
        <member name="M:AM.Verifier`1.DirectoryExist(System.String,System.String)">
            <summary>
            Specified directory must exist.
            </summary>
        </member>
        <member name="M:AM.Verifier`1.FileExist(System.String,System.String)">
            <summary>
            Specified file must exist.
            </summary>
        </member>
        <member name="M:AM.Verifier`1.NotNull(System.Object)">
            <summary>
            Not null?
            </summary>
        </member>
        <member name="M:AM.Verifier`1.NotNull(System.Object,System.String)">
            <summary>
            Not null?
            </summary>
        </member>
        <member name="M:AM.Verifier`1.NotNullNorEmpty(System.String)">
            <summary>
            Not null?
            </summary>
        </member>
        <member name="M:AM.Verifier`1.NotNullNorEmpty(System.String,System.String)">
            <summary>
            Not null?
            </summary>
        </member>
        <member name="M:AM.Verifier`1.ReferenceEquals(System.Object,System.Object,System.String)">
            <summary>
            Reference equals?
            </summary>
        </member>
        <member name="M:AM.Verifier`1.Throw">
            <summary>
            Throw exception.
            </summary>
        </member>
        <member name="M:AM.Verifier`1.Throw(System.String)">
            <summary>
            Throw exception.
            </summary>
        </member>
        <member name="M:AM.Verifier`1.Throw(System.String,System.Object[])">
            <summary>
            Throw exception.
            </summary>
        </member>
        <member name="M:AM.Verifier`1.VerifySubObject(AM.IVerifiable)">
            <summary>
            Verify sub-object.
            </summary>
        </member>
        <member name="M:AM.Verifier`1.VerifySubObject(AM.IVerifiable,System.String)">
            <summary>
            Verify sub-object.
            </summary>
        </member>
        <member name="P:AM.Verifier`1.Prefix">
            <summary>
            Prefix.
            </summary>
        </member>
        <member name="P:AM.Verifier`1.Result">
            <summary>
            Result.
            </summary>
        </member>
        <member name="P:AM.Verifier`1.Target">
            <summary>
            Target.
            </summary>
        </member>
        <member name="P:AM.Verifier`1.ThrowOnError">
            <summary>
            Throw on error.
            </summary>
        </member>
        <member name="T:CodeJam.Code">
            <summary>
            Assertions class.
            </summary>
        </member>
        <member name="M:CodeJam.Code.Defined``1(``0,System.String)">
            <summary>
            Check whether <paramref name="value"/> is not defined.
            </summary>
            <typeparam name="T">Parameter type (must be System.Enum
            descendant).</typeparam>
            <param name="value">Value to check.</param>
            <param name="argumentName">Function argument name.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Throws <see cref="T:System.ArgumentOutOfRangeException"/>.
            </exception>
        </member>
        <member name="M:CodeJam.Code.FileExists(System.String,System.String)">
            <summary>
            Checks whether specified files exists.
            </summary>
            <param name="path">The path.</param>
            <param name="argumentName">Name of the argument.</param>
        </member>
        <member name="M:CodeJam.Code.InRange(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Checks whether <paramref name="argument"/> fits into
            specified range <paramref name="from"/> to <paramref name="to"/>.
            </summary>
            <param name="argument">The argument.</param>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="argumentName">Name of the argument.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Throws <see cref="T:System.ArgumentOutOfRangeException"/>.
            </exception>
        </member>
        <member name="M:CodeJam.Code.Nonnegative(System.Int32,System.String)">
            <summary>
            Check whether <paramref name="argument"/> is not negative.
            </summary>
            <param name="argument">Value to check.</param>
            <param name="argumentName">Function argument name.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Throws <see cref="T:System.ArgumentOutOfRangeException"/>.
            </exception>
        </member>
        <member name="M:CodeJam.Code.Nonnegative(System.Int64,System.String)">
            <summary>
            Check whether <paramref name="argument"/> is not negative.
            </summary>
            <param name="argument">Value to check.</param>
            <param name="argumentName">Function argument name.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Throws <see cref="T:System.ArgumentOutOfRangeException"/>.
            </exception>
        </member>
        <member name="M:CodeJam.Code.Nonnegative(System.Double,System.String)">
            <summary>
            Check whether <paramref name="argument"/> is not negative.
            </summary>
            <param name="argument">Value to check.</param>
            <param name="argumentName">Function argument name.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Throws <see cref="T:System.ArgumentOutOfRangeException"/>.
            </exception>
        </member>
        <member name="M:CodeJam.Code.Positive(System.Int32,System.String)">
            <summary>
            Check whether <paramref name="argument"/> is positive.
            </summary>
            <param name="argument">The argument.</param>
            <param name="argumentName">Name of the argument.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Throws <see cref="T:System.ArgumentOutOfRangeException"/>.
            </exception>
        </member>
        <member name="M:CodeJam.Code.Positive(System.Double,System.String)">
            <summary>
            Check whether <paramref name="argument"/> is positive.
            </summary>
            <param name="argument">The argument.</param>
            <param name="argumentName">Name of the argument.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Throws <see cref="T:System.ArgumentOutOfRangeException"/>.
            </exception>
        </member>
        <member name="M:CodeJam.Code.NotNull``1(``0,System.String)">
            <summary>
            Ensures that <paramref name="arg" /> != <c>null</c>
            </summary>
        </member>
        <member name="M:CodeJam.Code.NotNull``1(System.Nullable{``0},System.String)">
            <summary>
            Ensures that <paramref name="arg" /> != <c>null</c>
            </summary>
        </member>
        <member name="M:CodeJam.Code.NotNullNorEmpty(System.String,System.String)">
            <summary>
            Ensures that <paramref name="arg" /> is not null nor empty
            </summary>
        </member>
        <member name="M:CodeJam.Code.AssertArgument(System.Boolean,System.String,System.String)">
            <summary>
            Assertion for the argument value
            </summary>
        </member>
        <member name="M:CodeJam.Code.AssertArgument(System.Boolean,System.String,System.Func{System.String})">
            <summary>
            Assertion for the argument value
            </summary>
        </member>
        <member name="M:CodeJam.Code.AssertArgument(System.Boolean,System.String,System.String,System.Object[])">
            <summary>
            Assertion for the argument value
            </summary>
        </member>
        <member name="M:CodeJam.Code.InRange(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Assertion for the argument in range
            </summary>
        </member>
        <member name="M:CodeJam.Code.InRange(System.Int32,System.String,System.Int32)">
            <summary>
            Assertion for the argument in range
            </summary>
        </member>
        <member name="M:CodeJam.Code.ValidIndex(System.Int32,System.String)">
            <summary>
            Assertion for index in range
            </summary>
        </member>
        <member name="M:CodeJam.Code.ValidIndex(System.Int32,System.String,System.Int32)">
            <summary>
            Assertion for index in range
            </summary>
        </member>
        <member name="M:CodeJam.Code.ValidIndexPair(System.Int32,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Assertion for from-to index pair
            </summary>
        </member>
        <member name="M:CodeJam.Code.ValidIndexAndCount(System.Int32,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Assertion for startIndex-count pair
            </summary>
        </member>
        <member name="M:CodeJam.Code.AssertState(System.Boolean,System.String)">
            <summary>
            State assertion
            </summary>
        </member>
        <member name="M:CodeJam.Code.AssertState(System.Boolean,System.String,System.Object[])">
            <summary>
            State assertion
            </summary>
        </member>
        <member name="T:CodeJam.CodeExceptions">
            <summary>
            Exception factory class
            </summary>
        </member>
        <member name="M:CodeJam.CodeExceptions.BreakIfAttached">
            <summary>
            BreaksExecution if debugger attached
            </summary>
        </member>
        <member name="M:CodeJam.CodeExceptions.FormatMessage(System.String,System.Object[])">
            <summary>
            Formats message or returns <paramref name="messageFormat"/> as it is if <paramref name="args"/> are null or empty
            </summary>
        </member>
        <member name="M:CodeJam.CodeExceptions.ArgumentNull(System.String)">
            <summary>
            Creates <seealso cref="T:System.ArgumentNullException"/>
            </summary>
        </member>
        <member name="M:CodeJam.CodeExceptions.ArgumentNullOrEmpty(System.String)">
            <summary>
            Creates <seealso cref="T:System.ArgumentException"/> for empty string
            </summary>
        </member>
        <member name="M:CodeJam.CodeExceptions.ArgumentNullOrWhiteSpace(System.String)">
            <summary>
            Creates <seealso cref="T:System.ArgumentException"/> for empty (or whitespace) string
            </summary>
        </member>
        <member name="M:CodeJam.CodeExceptions.ArgumentOutOfRange(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates <seealso cref="T:System.ArgumentOutOfRangeException"/>
            </summary>
        </member>
        <member name="M:CodeJam.CodeExceptions.ArgumentOutOfRange(System.String,System.Int32,System.Int32)">
            <summary>
            Creates <seealso cref="T:System.ArgumentOutOfRangeException"/>
            </summary>
        </member>
        <member name="M:CodeJam.CodeExceptions.ArgumentOutOfRange``1(System.String,``0,``0,``0)">
            <summary>
            Creates <seealso cref="T:System.ArgumentOutOfRangeException"/>
            </summary>
        </member>
        <member name="M:CodeJam.CodeExceptions.ArgumentOutOfRange``1(System.String,``0,``0)">
            <summary>
            Creates <seealso cref="T:System.ArgumentOutOfRangeException"/>
            </summary>
        </member>
        <member name="M:CodeJam.CodeExceptions.IndexOutOfRange(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates <seealso cref="T:System.IndexOutOfRangeException"/>
            </summary>
        </member>
        <member name="M:CodeJam.CodeExceptions.Argument(System.String,System.String,System.Object[])">
            <summary>
            Creates <seealso cref="T:System.ArgumentException"/>
            </summary>
        </member>
        <member name="M:CodeJam.CodeExceptions.InvalidOperation(System.String,System.Object[])">
            <summary>
            Creates <seealso cref="T:System.InvalidOperationException"/>
            </summary>
        </member>
        <member name="M:CodeJam.CodeExceptions.UnexpectedArgumentValue``1(System.String,``0)">
            <summary>
            Creates <seealso cref="T:System.ArgumentOutOfRangeException"/>.
            Used to be thrown from the default: switch clause
            </summary>
        </member>
        <member name="M:CodeJam.CodeExceptions.UnexpectedArgumentValue``1(System.String,``0,System.String,System.Object[])">
            <summary>
            Creates <seealso cref="T:System.ArgumentOutOfRangeException"/>.
            Used to be thrown from default: switch clause
            </summary>
        </member>
        <member name="M:CodeJam.CodeExceptions.UnexpectedValue``1(``0)">
            <summary>
            Creates <seealso cref="T:System.InvalidOperationException"/>.
            Used to be thrown from the default: switch clause
            </summary>
        </member>
        <member name="M:CodeJam.CodeExceptions.UnexpectedValue(System.String,System.Object[])">
            <summary>
            Creates <seealso cref="T:System.InvalidOperationException"/>.
            Used to be thrown from default: switch clause
            </summary>
        </member>
        <member name="M:CodeJam.CodeExceptions.ObjectDisposed(System.Type)">
            <summary>
            Throw this if the object is disposed.
            </summary>
        </member>
        <member name="M:CodeJam.CodeExceptions.ObjectDisposed(System.Type,System.String,System.Object[])">
            <summary>
            Throw this if the object is disposed.
            </summary>
        </member>
        <member name="M:CodeJam.CodeExceptions.Unreachable(System.String,System.Object[])">
            <summary>
            Used to be thrown in places expected to be unreachable.
            </summary>
        </member>
        <member name="P:CodeJam.CodeExceptions.BreakOnException">
            <summary>
            If true, breaks execution on assertion failure.
            Enabled by default.
            </summary>
        </member>
        <member name="T:AM.Configuration.ConfigurationUtility">
            <summary>
            Some useful routines for System.Configuration.
            </summary>
        </member>
        <member name="M:AM.Configuration.ConfigurationUtility.FindSetting(System.String[])">
            <summary>
            Получаем сеттинг из возможных кандидатов.
            </summary>
        </member>
        <member name="M:AM.Configuration.ConfigurationUtility.GetBoolean(System.String,System.Boolean)">
            <summary>
            Get boolean value from application configuration.
            </summary>
        </member>
        <member name="M:AM.Configuration.ConfigurationUtility.GetInt16(System.String,System.Int16)">
            <summary>
            Get 16-bit integer value from application configuration.
            </summary>
        </member>
        <member name="M:AM.Configuration.ConfigurationUtility.GetUInt16(System.String,System.UInt16)">
            <summary>
            Get unsigned 16-bit integer.
            </summary>
        </member>
        <member name="M:AM.Configuration.ConfigurationUtility.GetInt32(System.String,System.Int32)">
            <summary>
            Get 32-bit integer value
            from application configuration.
            </summary>
        </member>
        <member name="M:AM.Configuration.ConfigurationUtility.GetUInt32(System.String,System.UInt32)">
            <summary>
            Get unsigned 32-bit integer value
            from application configuration.
            </summary>
        </member>
        <member name="M:AM.Configuration.ConfigurationUtility.GetInt64(System.String,System.Int64)">
            <summary>
            Get 64-bit integer value
            from application configuration.
            </summary>
        </member>
        <member name="M:AM.Configuration.ConfigurationUtility.GetUInt64(System.String,System.UInt64)">
            <summary>
            Get usingned 64-bit integer value
            from application configuration.
            </summary>
        </member>
        <member name="M:AM.Configuration.ConfigurationUtility.GetSingle(System.String,System.Single)">
            <summary>
            Get single-precision float value from application configuration.
            </summary>
        </member>
        <member name="M:AM.Configuration.ConfigurationUtility.GetDouble(System.String,System.Double)">
            <summary>
            Get double-precision float value from application configuration.
            </summary>
        </member>
        <member name="M:AM.Configuration.ConfigurationUtility.GetDecimal(System.String,System.Decimal)">
            <summary>
            Get decimal value from application configuration.
            </summary>
        </member>
        <member name="M:AM.Configuration.ConfigurationUtility.GetString(System.String,System.String)">
            <summary>
            Get string value from application configuration.
            </summary>
        </member>
        <member name="M:AM.Configuration.ConfigurationUtility.GetString(System.String)">
            <summary>
            Get string value from application configuration.
            </summary>
        </member>
        <member name="M:AM.Configuration.ConfigurationUtility.RequireString(System.String)">
            <summary>
            Get string value from application configuration.
            </summary>
        </member>
        <member name="M:AM.Configuration.ConfigurationUtility.GetDateTime(System.String,System.DateTime)">
            <summary>
            Get date or time value from application configuration.
            </summary>
        </member>
        <member name="P:AM.Configuration.ConfigurationUtility.ConfigFileName">
            <summary>
            Application.exe.config file name with full path.
            </summary>
        </member>
        <member name="T:AM.ConversionUtility">
            <summary>
            Type conversion helpers.
            </summary>
        </member>
        <member name="M:AM.ConversionUtility.CanConvertTo``1(System.Object)">
            <summary>
            Determines whether given value can be converted to
            the specified type.
            </summary>
            <param name="value">Value to be converted.</param>
            <returns>
            <c>true</c> if value can be converted;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:AM.ConversionUtility.ConvertTo``1(System.Object)">
            <summary>
            Converts given value to the specified type.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:AM.ConversionUtility.ToBoolean(System.Object)">
            <summary>
            Converts given object to boolean value.
            </summary>
            <param name="value">Object to be converted.</param>
            <returns>Converted value.</returns>
            <exception cref="T:System.FormatException">
            Value can't be converted.
            </exception>
        </member>
        <member name="T:AM.Diagnostics.ProcessUtility">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Diagnostics.ProcessUtility.RunAndReadStandardOutput(System.Diagnostics.ProcessStartInfo,System.String)">
            <summary>
            Запуск процесса с перехватом всего консольного вывода
            в строковую переменную.
            </summary>
            <param name="info"></param>
            <param name="standardInput">Если не null, задает
            содержимое стандартного ввода.</param>
            <returns></returns>
        </member>
        <member name="M:AM.Diagnostics.ProcessUtility.RunAndReadStandardOutput(System.Diagnostics.ProcessStartInfo)">
            <summary>
            Запуск процесса с перехватом всего консольного вывода
            в строковую переменную.
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:AM.Diagnostics.ProcessUtility.RunAndReadStandardOutput(System.String,System.String,System.String)">
            <summary>
            Запуск процесса с перехватом всего консольного вывода
            в строковую переменную.
            </summary>
            <param name="fileName"></param>
            <param name="arguments"></param>
            <param name="standardInput"></param>
            <returns></returns>
        </member>
        <member name="M:AM.Diagnostics.ProcessUtility.RunAndReadStandardOutput(System.String,System.String)">
            <summary>
            Запуск процесса с перехватом всего консольного вывода
            в строковую переменную.
            </summary>
            <param name="fileName"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:AM.Diagnostics.ProcessUtility.RunAndReadStandardOutputAndError(System.Diagnostics.ProcessStartInfo,System.String)">
            <summary>
            Запуск процесса с перехватом всего консольного вывода
            в строковую переменную.
            </summary>
            <param name="info"></param>
            <param name="standardInput">Если не null, задает
            содержимое стандартного ввода.</param>
            <returns></returns>
        </member>
        <member name="M:AM.Diagnostics.ProcessUtility.RunAndReadStandardOutputAndError(System.Diagnostics.ProcessStartInfo)">
            <summary>
            Запуск процесса с перехватом всего консольного вывода
            в строковую переменную.
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:AM.Diagnostics.ProcessUtility.RunAndReadStandardOutputAndError(System.String,System.String,System.String)">
            <summary>
            Запуск процесса с перехватом всего консольного вывода
            в строковую переменную.
            </summary>
            <param name="fileName"></param>
            <param name="arguments"></param>
            <param name="standardInfo"></param>
            <returns></returns>
        </member>
        <member name="M:AM.Diagnostics.ProcessUtility.RunAndReadStandardOutputAndError(System.String,System.String)">
            <summary>
            Запуск процесса с перехватом всего консольного вывода
            в строковую переменную.
            </summary>
            <param name="fileName"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:AM.Diagnostics.ProcessUtility.RunAndWait(System.Diagnostics.ProcessStartInfo,System.Int32)">
            <summary>
            Запускает процесс и ожидает его завершения.
            </summary>
            <param name="info"></param>
            <param name="milliseconds">Сколько ожидать.
            Неположительные значения = бесконечно.</param>
            <returns>Код, вовращенный процессом.
            Если с процессом не сложилось, возвращается -1.</returns>
        </member>
        <member name="M:AM.Diagnostics.ProcessUtility.RunAndWait(System.String,System.String,System.Int32)">
            <summary>
            Запускает процесс и ожидает его завершения.
            </summary>
            <param name="fileName"></param>
            <param name="arguments"></param>
            <param name="milliseconds">Сколько ожидать.
            Неположительные значения = бесконечно.</param>
            <returns>Код, возвращенный процессом. 
            Если с процессом как-то не сложилось, возвращается -1.</returns>
        </member>
        <member name="M:AM.Diagnostics.ProcessUtility.RunAndWait(System.String,System.String)">
            <summary>
            Запускает процесс и ожидает его завершения.
            </summary>
            <param name="fileName"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:AM.Diagnostics.ProcessUtility.RunAndWait(System.String)">
            <summary>
            Запускает процесс и ожидает его завершения.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="T:AM.EnvironmentUtility">
            <summary>
            Program environment study routines.
            </summary>
        </member>
        <member name="P:AM.EnvironmentUtility.Is32Bit">
            <summary>
            Gets a value indicating whether system is 32-bit.
            </summary>
            <value><c>true</c> if system is 32-bit; otherwise,
            <c>false</c>.</value>
        </member>
        <member name="P:AM.EnvironmentUtility.Is64Bit">
            <summary>
            Gets a value indicating whether system is 64-bit.
            </summary>
            <value><c>true</c> if system is 64-bit; otherwise,
            <c>false</c>.</value>
        </member>
        <member name="P:AM.EnvironmentUtility.OptimalParallelism">
            <summary>
            Optimal degree of parallelism.
            </summary>
        </member>
        <member name="P:AM.EnvironmentUtility.Uptime">
            <summary>
            System uptime.
            </summary>
            <value></value>
        </member>
        <member name="T:AM.EventUtility">
            <summary>
            Useful routines for event manipulations.
            </summary>
        </member>
        <member name="M:AM.EventUtility.Raise(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
            Raises the specified handler.
            </summary>
        </member>
        <member name="M:AM.EventUtility.Raise``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Raises the specified handler.
            </summary>
        </member>
        <member name="M:AM.EventUtility.Raise``1(System.EventHandler{``0},System.Object)">
            <summary>
            Raises the specified handler.
            </summary>
        </member>
        <member name="M:AM.EventUtility.Raise(System.EventHandler,System.Object)">
            <summary>
            Raises the specified handler.
            </summary>
        </member>
        <member name="M:AM.EventUtility.Raise``1(System.EventHandler{``0})">
            <summary>
            Raises the specified handler.
            </summary>
        </member>
        <member name="M:AM.EventUtility.RaiseAsync(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
            Raises the specified handler.
            </summary>
        </member>
        <member name="M:AM.EventUtility.RaiseAsync(System.EventHandler,System.Object)">
            <summary>
            Raises the specified handler.
            </summary>
        </member>
        <member name="M:AM.EventUtility.UnsubscribeAll(System.EventHandler)">
            <summary>
            Unsubscribe all handlers from the event.
            </summary>
        </member>
        <member name="T:AM.Globalization.BuiltinCultures">
            <summary>
            
            </summary>
        </member>
        <member name="P:AM.Globalization.BuiltinCultures.AmericanEnglish">
            <summary>
            Gets the american english.
            </summary>
        </member>
        <member name="P:AM.Globalization.BuiltinCultures.Russian">
            <summary>
            Gets the russian culture.
            </summary>
        </member>
        <member name="T:AM.Globalization.CultureCode">
            <summary>
            
            </summary>
        </member>
        <member name="F:AM.Globalization.CultureCode.AmericanEnglish">
            <summary>
            
            </summary>
        </member>
        <member name="F:AM.Globalization.CultureCode.Russian">
            <summary>
            
            </summary>
        </member>
        <member name="T:AM.Globalization.RussianStringComparer">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Globalization.RussianStringComparer.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:AM.Globalization.RussianStringComparer"/>
            class.
            </summary>
            <param name="considerYo">if set to <c>true</c> 
            [consider yo].</param>
            <param name="ignoreCase">if set to <c>true</c>
            [ignore case].</param>
        </member>
        <member name="M:AM.Globalization.RussianStringComparer.Compare(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AM.Globalization.RussianStringComparer.Equals(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AM.Globalization.RussianStringComparer.GetHashCode(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:AM.Globalization.RussianStringComparer.ConsiderYo">
            <summary>
             Consider YO letter?
            </summary>
        </member>
        <member name="P:AM.Globalization.RussianStringComparer.IgnoreCase">
            <summary>
             Ignore case?
            </summary>
        </member>
        <member name="T:AM.IO.FileUtility">
            <summary>
            File manipulation routines.
            </summary>
        </member>
        <member name="M:AM.IO.FileUtility.Compare(System.String,System.String)">
            <summary>
            Побайтовое сравнение двух файлов.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns>0, если файлы побайтово совпадают.
            </returns>
        </member>
        <member name="M:AM.IO.FileUtility.Copy(System.String,System.String,System.Boolean)">
            <summary>
            Copies the specified source file to the specified
            destination.
            </summary>
            <param name="sourceName">Name of the source file.
            </param>
            <param name="targetName">Name of the target file.
            </param>
            <param name="overwrite"><c>true</c> if the 
            destination file can be overwritten; otherwise, 
            <c>false</c>.</param>
        </member>
        <member name="M:AM.IO.FileUtility.CopyNewer(System.String,System.String,System.Boolean)">
            <summary>
            Copies given file only if source is newer than destination.
            </summary>
            <param name="sourcePath">The source path.</param>
            <param name="targetPath">The target path.</param>
            <param name="backup">If set to <c>true</c> 
            create backup copy of destination file.</param>
            <returns><c>true</c> if file copied; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:AM.IO.FileUtility.CopyWithBackup(System.String,System.String)">
            <summary>
            Copies given file and creates backup copy of target file.
            </summary>
            <param name="sourcePath">The source path.</param>
            <param name="targetPath">The target path.</param>
            <returns>Name of backup file or <c>null</c>
            if no backup created.</returns>
        </member>
        <member name="M:AM.IO.FileUtility.CreateBackup(System.String,System.Boolean)">
            <summary>
            Creates backup copy for given file.
            </summary>
            <param name="path">The path.</param>
            <param name="rename">If set to <c>true</c> 
            given file will be renamed; otherwise it will be copied.</param>
            <returns>Name of the backup file.</returns>
        </member>
        <member name="M:AM.IO.FileUtility.DeleteIfExists(System.String)">
            <summary>
            Deletes specified file if it exists.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:AM.IO.FileUtility.FindFileInPath(System.String,System.String,System.Char)">
            <summary>
            Find file in path.
            </summary>
        </member>
        <member name="M:AM.IO.FileUtility.GetNotExistentFileName(System.String,System.String)">
            <summary>
            Gets the name of the not existent file.
            </summary>
            <param name="original">The original.</param>
            <param name="suffix">The suffix.</param>
            <returns>Name of not existent file.</returns>
        </member>
        <member name="M:AM.IO.FileUtility.ReadAllBytes(System.String)">
            <summary>
            Read all bytes from the file.
            </summary>
            <remarks>For WinMobile compatibility.</remarks>
        </member>
        <member name="M:AM.IO.FileUtility.ReadAllLines(System.String,System.Text.Encoding)">
            <summary>
            Read all lines from the file.
            </summary>
            <remarks>For WinMobile compatibility.</remarks>
        </member>
        <member name="M:AM.IO.FileUtility.ReadAllText(System.String,System.Text.Encoding)">
            <summary>
            Read all text from the text
            </summary>
            <remarks> For WinMobile compatibility.</remarks>
        </member>
        <member name="M:AM.IO.FileUtility.Touch(System.String)">
            <summary>
            Sets file modification date to current date.
            </summary>
            <param name="fileName">Name of the file.</param>
            <remarks>If no such file exists it will be created.</remarks>
        </member>
        <member name="M:AM.IO.FileUtility.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            Write all the bytes to the file.
            </summary>
        </member>
        <member name="T:AM.IO.PathUtility">
            <summary>
            Path manipulation routines.
            </summary>
        </member>
        <member name="M:AM.IO.PathUtility.AppendBackslash(System.String)">
            <summary>
            Appends trailing backslash (if none exists)
            to given path.
            </summary>
            <param name="path">Path to convert.</param>
            <returns>Converted path.</returns>
            <remarks>Path need NOT to be existent.</remarks>
        </member>
        <member name="M:AM.IO.PathUtility.Combine(System.String[])">
            <summary>
            Combine strings as path.
            </summary>
        </member>
        <member name="M:AM.IO.PathUtility.ConvertSlashes(System.String)">
            <summary>
            Converts ordinary slashes to backslashes.
            </summary>
            <param name="path">Path to convert.</param>
            <returns>Converted path.</returns>
            <remarks>Path need NOT to be existent.</remarks>
        </member>
        <member name="M:AM.IO.PathUtility.MapPath(System.String)">
            <summary>
            Maps the path relative to the executable name.
            </summary>
        </member>
        <member name="M:AM.IO.PathUtility.StripExtension(System.String)">
            <summary>
            Strips extension from given path.
            </summary>
        </member>
        <member name="M:AM.IO.PathUtility.StripTrailingBackslash(System.String)">
            <summary>
            Removes trailing backslash (if exists) from the path.
            </summary>
            <param name="path">Path to convert.</param>
            <returns>Converted path.</returns>
            <remarks>Path need NOT to be existent.</remarks>
        </member>
        <member name="T:AM.IO.StreamUtility">
            <summary>
            Stream manipulation routines.
            </summary>
        </member>
        <member name="M:AM.IO.StreamUtility.Append(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Appends one's stream contents (starting from current position)
            to another stream.
            </summary>
            <param name="sourceStream">The source stream.</param>
            <param name="destinationStream">The destination stream.</param>
            <param name="chunkSize">Size of the chunk. 
            If <paramref name="chunkSize"/> is less that 0, it will
            be chosen by routine.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sourceStream"/> or 
            <paramref name="destinationStream"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:AM.IO.StreamUtility.Compare(System.IO.Stream,System.IO.Stream)">
            <summary>
            Compares two <see cref="T:System.IO.Stream"/>'s from current position.
            </summary>
            <param name="firstStream">The first stream.</param>
            <param name="secondStream">The second stream.</param>
            <returns>0, if both streams are identical.</returns>
        </member>
        <member name="M:AM.IO.StreamUtility.Copy(System.IO.Stream,System.IO.Stream)">
            <summary>
            Appends one's stream contents (starting from current position)
            to another stream.
            </summary>
            <param name="sourceStream">The source stream.</param>
            <param name="destinationStream">The destination stream.</param>
        </member>
        <member name="M:AM.IO.StreamUtility.ReadAsMuchAsPossible(System.IO.Stream,System.Int32)">
            <summary>
            Read as up to <paramref name="maximum"/> bytes 
            from the given stream.
            </summary>
            <param name="stream">Stream to read from.</param>
            <param name="maximum">Maximum bytes to read.</param>
            <returns>Readed data.</returns>
            <remarks>Don't make <paramref name="maximum"/>
            <c>Int32.Max</c> or so.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="maximum"/> is less than zero.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:AM.IO.StreamUtility.ReadBoolean(System.IO.Stream)">
            <summary>
            Reads <see cref="T:System.Boolean"/> value from the <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">Stream to read from.</param>
            <returns>Readed value.</returns>
            <remarks>Value must be written by <see cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.Boolean)"/>
            or compatible method.</remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException">An error during stream input
            happens.</exception>
            <seealso cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.Boolean)"/>
        </member>
        <member name="M:AM.IO.StreamUtility.ReadBytes(System.IO.Stream,System.Int32)">
            <summary>
            Read some bytes from the stream.
            </summary>
        </member>
        <member name="M:AM.IO.StreamUtility.ReadInt16(System.IO.Stream)">
            <summary>
            Reads <see cref="T:System.Int16"/> value from the <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">Stream to read from.</param>
            <returns>Readed value.</returns>
            <remarks>Value must be written by <see cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.Int16)"/>
            or compatible method.</remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException">An error during stream input
            happens.</exception>
            <seealso cref="M:AM.IO.StreamUtility.ReadUInt16(System.IO.Stream)"/>
            <seealso cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.Int16)"/>
        </member>
        <member name="M:AM.IO.StreamUtility.ReadUInt16(System.IO.Stream)">
            <summary>
            Reads <see cref="T:System.UInt16"/> value from the <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">Stream to read from.</param>
            <returns>Readed value.</returns>
            <remarks>Value must be written by <see cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.UInt16)"/>
            or compatible method.</remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException">An error during stream input
            happens.</exception>
            <seealso cref="M:AM.IO.StreamUtility.ReadInt16(System.IO.Stream)"/>
            <seealso cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.UInt16)"/>
        </member>
        <member name="M:AM.IO.StreamUtility.ReadInt32(System.IO.Stream)">
            <summary>
            Reads <see cref="T:System.Int32"/> value from the <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">Stream to read from.</param>
            <returns>Readed value.</returns>
            <remarks>Value must be written by <see cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.Int32)"/>
            or compatible method.</remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException">An error during stream input
            happens.</exception>
            <seealso cref="M:AM.IO.StreamUtility.ReadUInt32(System.IO.Stream)"/>
            <seealso cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.Int32)"/>
        </member>
        <member name="M:AM.IO.StreamUtility.ReadUInt32(System.IO.Stream)">
            <summary>
            Reads <see cref="T:System.UInt32"/> value from the <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">Stream to read from.</param>
            <returns>Readed value.</returns>
            <remarks>Value must be written by <see cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.UInt32)"/>
            or compatible method.</remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException">An error during stream input
            happens.</exception>
            <seealso cref="M:AM.IO.StreamUtility.ReadInt32(System.IO.Stream)"/>
            <seealso cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.UInt32)"/>
        </member>
        <member name="M:AM.IO.StreamUtility.ReadInt64(System.IO.Stream)">
            <summary>
            Reads <see cref="T:System.Int64"/> value from the <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">Stream to read from.</param>
            <returns>Readed value.</returns>
            <remarks>Value must be written by <see cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.Int64)"/>
            or compatible method.</remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException">An error during stream input
            happens.</exception>
            <seealso cref="M:AM.IO.StreamUtility.ReadUInt64(System.IO.Stream)"/>
            <seealso cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.Int64)"/>
        </member>
        <member name="M:AM.IO.StreamUtility.ReadUInt64(System.IO.Stream)">
            <summary>
            Reads <see cref="T:System.UInt64"/> value from the <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">Stream to read from.</param>
            <returns>Readed value.</returns>
            <remarks>Value must be written by <see cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.UInt64)"/>
            or compatible method.</remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException">An error during stream input
            happens.</exception>
            <seealso cref="M:AM.IO.StreamUtility.ReadInt64(System.IO.Stream)"/>
            <seealso cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.UInt64)"/>
        </member>
        <member name="M:AM.IO.StreamUtility.ReadSingle(System.IO.Stream)">
            <summary>
            Reads <see cref="T:System.Single"/> value from the <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">Stream to read from.</param>
            <returns>Readed value.</returns>
            <remarks>Value must be written by <see cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.Single)"/>
            or compatible method.</remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException">An error during stream input
            happens.</exception>
            <seealso cref="M:AM.IO.StreamUtility.ReadDouble(System.IO.Stream)"/>
            <seealso cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.Single)"/>
        </member>
        <member name="M:AM.IO.StreamUtility.ReadDouble(System.IO.Stream)">
            <summary>
            Reads <see cref="T:System.Double"/> value from the <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">Stream to read from.</param>
            <returns>Readed value.</returns>
            <remarks>Value must be written by <see cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.Double)"/>
            or compatible method.</remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException">An error during stream input
            happens.</exception>
            <seealso cref="M:AM.IO.StreamUtility.ReadSingle(System.IO.Stream)"/>
            <seealso cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.Double)"/>
        </member>
        <member name="M:AM.IO.StreamUtility.ReadString(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Reads <see cref="T:System.String"/> value from the <see cref="T:System.IO.Stream"/>
            using specified <see cref="T:System.Text.Encoding"/>.
            </summary>
            <param name="stream">Stream to read from.</param>
            <param name="encoding">Encoding to use.</param>
            <returns>Readed value.</returns>
            <remarks>Value must be written by 
            <see cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.String,System.Text.Encoding)"/> or compatible method.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Either
            <paramref name="stream"/> or <paramref name="encoding"/>
            is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException">An error during stream input
            happens.</exception>
            <seealso cref="M:AM.IO.StreamUtility.ReadString(System.IO.Stream)"/>
            <seealso cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.String,System.Text.Encoding)"/>
        </member>
        <member name="M:AM.IO.StreamUtility.ReadString(System.IO.Stream)">
            <summary>
            Reads <see cref="T:System.Boolean"/> value from the <see cref="T:System.IO.Stream"/>
            using UTF-8 <see cref="T:System.Text.Encoding"/>.
            </summary>
            <param name="stream">Stream to read from.</param>
            <returns>Readed value.</returns>
            <remarks>Value must be written by <see cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.String)"/>
            or compatible method.</remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException">An error during stream input
            happens.</exception>
            <seealso cref="M:AM.IO.StreamUtility.ReadString(System.IO.Stream,System.Text.Encoding)"/>
            <seealso cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.String)"/>
        </member>
        <member name="M:AM.IO.StreamUtility.ReadInt16Array(System.IO.Stream)">
            <summary>
            Reads array of <see cref="T:System.Int16"/> values from the 
            <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">Stream to read from.</param>
            <returns>Readed value.</returns>
            <remarks>Value must be written by <see cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.Int16[])"/>
            or compatible method.</remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException">An error during stream input
            happens.</exception>
            <seealso cref="M:AM.IO.StreamUtility.ReadUInt16Array(System.IO.Stream)"/>
            <seealso cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.Int16[])"/>
        </member>
        <member name="M:AM.IO.StreamUtility.ReadUInt16Array(System.IO.Stream)">
            <summary>
            Reads array of <see cref="T:System.UInt16"/> values from the 
            <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">Stream to read from.</param>
            <returns>Readed value.</returns>
            <remarks>Value must be written by <see cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.UInt16[])"/>
            or compatible method.</remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException">An error during stream input
            happens.</exception>
            <seealso cref="M:AM.IO.StreamUtility.ReadInt16Array(System.IO.Stream)"/>
            <seealso cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.UInt16[])"/>
        </member>
        <member name="M:AM.IO.StreamUtility.ReadInt32Array(System.IO.Stream)">
            <summary>
            Reads array of <see cref="T:System.Int32"/> values from the 
            <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">Stream to read from.</param>
            <returns>Readed value.</returns>
            <remarks>Value must be written by <see cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.Int32[])"/>
            or compatible method.</remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException">An error during stream input
            happens.</exception>
            <seealso cref="M:AM.IO.StreamUtility.ReadUInt32Array(System.IO.Stream)"/>
            <seealso cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.Int32[])"/>
        </member>
        <member name="M:AM.IO.StreamUtility.ReadUInt32Array(System.IO.Stream)">
            <summary>
            Reads array of <see cref="T:System.UInt32"/> values from the 
            <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">Stream to read from.</param>
            <returns>Readed value.</returns>
            <remarks>Value must be written by <see cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.UInt32[])"/>
            or compatible method.</remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException">An error during stream input
            happens.</exception>
            <seealso cref="M:AM.IO.StreamUtility.ReadInt32Array(System.IO.Stream)"/>
            <seealso cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.UInt32[])"/>
        </member>
        <member name="M:AM.IO.StreamUtility.ReadStringArray(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Reads array of <see cref="T:System.String"/>'s from the given stream until the end
            of the stream using specified <see cref="T:System.Text.Encoding"/>.
            </summary>
            <param name="stream">Stream to read from.</param>
            <param name="encoding">Encoding.</param>
            <returns>Readed strings.</returns>
            <remarks>Value must be written by 
            <see cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.String[],System.Text.Encoding)"/>
            or compatible method.</remarks>
            <exception cref="T:System.ArgumentNullException">Either 
            <paramref name="stream"/> or 
            <paramref name="encoding"/> is <c>null</c>.
            </exception>
            <seealso cref="M:AM.IO.StreamUtility.ReadStringArray(System.IO.Stream)"/>
            <seealso cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.String[])"/>
        </member>
        <member name="M:AM.IO.StreamUtility.ReadStringArray(System.IO.Stream)">
            <summary>
            Reads array of <see cref="T:System.String"/>'s from the <see cref="T:System.IO.Stream"/>
            using UTF-8 <see cref="T:System.Text.Encoding"/>.
            </summary>
            <param name="stream">Stream to read from.</param>
            <returns>Readed value.</returns>
            <remarks>Value must be written by 
            <see cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.String[])"/> or compatible method.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException">An error during stream input
            happens.</exception>
            <seealso cref="M:AM.IO.StreamUtility.ReadStringArray(System.IO.Stream,System.Text.Encoding)"/>
            <seealso cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.String[])"/>
        </member>
        <member name="M:AM.IO.StreamUtility.ReadDecimal(System.IO.Stream)">
            <summary>
            Reads the <see cref="T:System.Decimal"/> from the specified 
            <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The stream.</param>
            <returns>Readed value.</returns>
            <remarks>Value must be written with 
            <see cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.Decimal)"/> or compatible method.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException">Error during stream input
            happens.</exception>
            <seealso cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.Decimal)"/>
        </member>
        <member name="M:AM.IO.StreamUtility.ReadDateTime(System.IO.Stream)">
            <summary>
            Reads the date time.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.Boolean)">
            <summary>
            Writes the <see cref="T:System.Boolean"/> value to the <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">Stream to write.</param>
            <param name="value">Value to write.</param>
            <remarks>Value can be readed with 
            <see cref="M:AM.IO.StreamUtility.ReadBoolean(System.IO.Stream)"/> or compatible method.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException">An error during stream
            output happens.</exception>
            <seealso cref="M:AM.IO.StreamUtility.ReadBoolean(System.IO.Stream)"/>
        </member>
        <member name="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.Int16)">
            <summary>
            Writes the <see cref="T:System.Int16"/> value to the <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">Stream to write to.</param>
            <param name="value">Value to write.</param>
            <remarks>Value can be readed with 
            <see cref="M:AM.IO.StreamUtility.ReadInt16(System.IO.Stream)"/> or compatible method.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException">An error during stream
            output happens.</exception>
            <seealso cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.UInt16)"/>
            <see cref="M:AM.IO.StreamUtility.ReadInt16(System.IO.Stream)"/>
        </member>
        <member name="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.UInt16)">
            <summary>
            Writes the <see cref="T:System.UInt16"/> value to the <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">Stream to write to.</param>
            <param name="value">Value to write.</param>
            <remarks>Value can be readed with 
            <see cref="M:AM.IO.StreamUtility.ReadUInt16(System.IO.Stream)"/> or compatible method.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException">An error during stream
            output happens.</exception>
            <seealso cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.Int16)"/>
            <seealso cref="M:AM.IO.StreamUtility.ReadUInt16(System.IO.Stream)"/>
        </member>
        <member name="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.Int32)">
            <summary>
            Writes the <see cref="T:System.Int32"/> to the <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">Stream to write to.</param>
            <param name="value">Value to write.</param>
            <remarks>Value can be readed with 
            <see cref="M:AM.IO.StreamUtility.ReadInt32(System.IO.Stream)"/> or compatible method.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException">An error during stream
            output happens.</exception>
            <seealso cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.UInt32)"/>
            <seealso cref="M:AM.IO.StreamUtility.ReadInt32(System.IO.Stream)"/>
        </member>
        <member name="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.UInt32)">
            <summary>
            Writes the <see cref="T:System.UInt32"/> to the <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">Stream to write to.</param>
            <param name="value">Value to write.</param>
            <remarks>Value can be readed with 
            <see cref="M:AM.IO.StreamUtility.ReadUInt32(System.IO.Stream)"/> or compatible method.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException">An error during stream
            output happens.</exception>
            <seealso cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.Int32)"/>
            <seealso cref="M:AM.IO.StreamUtility.ReadInt32(System.IO.Stream)"/>
        </member>
        <member name="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.Int64)">
            <summary>
            Writes the <see cref="T:System.Int64"/> to the <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">Stream to write to.</param>
            <param name="value">Value to write.</param>
            <remarks>Value can be readed with 
            <see cref="M:AM.IO.StreamUtility.ReadInt64(System.IO.Stream)"/> or compatible method.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException">An error during stream
            output happens.</exception>
            <seealso cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.UInt64)"/>
            <seealso cref="M:AM.IO.StreamUtility.ReadInt64(System.IO.Stream)"/>
        </member>
        <member name="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.UInt64)">
            <summary>
            Writes the <see cref="T:System.UInt64"/> to the <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">Stream to write to.</param>
            <param name="value">Value to write.</param>
            <remarks>Value can be readed with 
            <see cref="M:AM.IO.StreamUtility.ReadUInt64(System.IO.Stream)"/> or compatible method.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException">An error during stream
            output happens.</exception>
            <seealso cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.Int64)"/>
            <seealso cref="M:AM.IO.StreamUtility.ReadUInt64(System.IO.Stream)"/>
        </member>
        <member name="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.Single)">
            <summary>
            Writes the <see cref="T:System.Single"/> to the <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">Stream to write to.</param>
            <param name="value">Value to write.</param>
            <remarks>Value can be readed with 
            <see cref="M:AM.IO.StreamUtility.ReadSingle(System.IO.Stream)"/> or compatible method.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException">An error during stream
            output happens.</exception>
            <seealso cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.Double)"/>
            <seealso cref="M:AM.IO.StreamUtility.ReadSingle(System.IO.Stream)"/>
        </member>
        <member name="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.Double)">
            <summary>
            Writes the <see cref="T:System.Double"/> to the <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">Stream to write to.</param>
            <param name="value">Value to write.</param>
            <remarks>Value can be readed with 
            <see cref="M:AM.IO.StreamUtility.ReadDouble(System.IO.Stream)"/> or compatible method.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException">An error during stream
            output happens.</exception>
            <seealso cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.Single)"/>
            <seealso cref="M:AM.IO.StreamUtility.ReadDouble(System.IO.Stream)"/>
        </member>
        <member name="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.String,System.Text.Encoding)">
            <summary>
            Writes the <see cref="T:System.String"/> to the <see cref="T:System.IO.Stream"/>
            using specified <see cref="T:System.Text.Encoding"/>.
            </summary>
            <param name="stream">Stream to write to.</param>
            <param name="value">String to write.</param>
            <param name="encoding">Encoding to use.</param>
            <remarks>Value can be readed with 
            <see cref="M:AM.IO.StreamUtility.ReadString(System.IO.Stream,System.Text.Encoding)"/> or compatible method.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Either 
            <paramref name="stream"/> or <paramref name="value"/>
            or <paramref name="encoding"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException">An error during stream
            output happens.</exception>
            <seealso cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.String)"/>
            <see cref="M:AM.IO.StreamUtility.ReadString(System.IO.Stream)"/>
        </member>
        <member name="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.String)">
            <summary>
            Writes the <see cref="T:System.String"/> to the <see cref="T:System.IO.Stream"/>
            using UTF-8 <see cref="T:System.Text.Encoding"/>.
            </summary>
            <param name="stream">Stream to write to.</param>
            <param name="value">String to write.</param>
            <remarks>Value can be readed with 
            <see cref="M:AM.IO.StreamUtility.ReadString(System.IO.Stream)"/> or compatible method.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Either 
            <paramref name="stream"/> or <paramref name="value"/>
            is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException">An error during stream
            output happens.</exception>
            <seealso cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.String,System.Text.Encoding)"/>
            <seealso cref="M:AM.IO.StreamUtility.ReadString(System.IO.Stream)"/>
        </member>
        <member name="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.Int16[])">
            <summary>
            Writes the array of <see cref="T:System.Int16"/> to the <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">Stream to write to.</param>
            <param name="values">Array of signed short integer numbers.
            </param>
            <remarks>Value can be readed with 
            <see cref="M:AM.IO.StreamUtility.ReadInt16Array(System.IO.Stream)"/> or compatible method.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Either 
            <paramref name="stream"/> or <paramref name="values"/>
            is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException">An error during stream
            output happens.</exception>
            <seealso cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.UInt16[])"/>
            <seealso cref="M:AM.IO.StreamUtility.ReadInt16Array(System.IO.Stream)"/>
        </member>
        <member name="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.UInt16[])">
            <summary>
            Writes the array of <see cref="T:System.UInt16"/> to the <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">Stream to write to.</param>
            <param name="values">Array of unsigned short integer 
            numbers.</param>
            <remarks>Value can be readed with 
            <see cref="M:AM.IO.StreamUtility.ReadUInt16Array(System.IO.Stream)"/> or compatible method.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Either 
            <paramref name="stream"/> or <paramref name="values"/>
            is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException">An error during stream
            output happens.</exception>
            <seealso cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.Int16[])"/>
            <seealso cref="M:AM.IO.StreamUtility.ReadUInt16Array(System.IO.Stream)"/>
        </member>
        <member name="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.Int32[])">
            <summary>
            Writes the array of <see cref="T:System.Int32"/> to the <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">Stream to write to.</param>
            <param name="values">Array of signed integer numbers.</param>
            <remarks>Value can be readed with 
            <see cref="M:AM.IO.StreamUtility.ReadInt32Array(System.IO.Stream)"/> or compatible method.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Either 
            <paramref name="stream"/> or <paramref name="values"/>
            is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException">An error during stream
            output happens.</exception>
            <see cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.UInt32[])"/>
            <see cref="M:AM.IO.StreamUtility.ReadInt32Array(System.IO.Stream)"/>
        </member>
        <member name="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.UInt32[])">
            <summary>
            Writes the array of <see cref="T:System.UInt32"/> to the <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">Stream to write to.</param>
            <param name="values">Array of unsigned integer numbers.</param>
            <remarks>Value can be readed with 
            <see cref="M:AM.IO.StreamUtility.ReadUInt32Array(System.IO.Stream)"/> or compatible method.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Either 
            <paramref name="stream"/> or <paramref name="values"/>
            is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException">An error during stream
            output happens.</exception>
            <seealso cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.Int32[])"/>
            <see cref="M:AM.IO.StreamUtility.ReadUInt32Array(System.IO.Stream)"/>
        </member>
        <member name="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.String[],System.Text.Encoding)">
            <summary>
            Writes the array of <see cref="T:System.String"/> to the <see cref="T:System.IO.Stream"/>
            using specified <see cref="T:System.Text.Encoding"/>.
            </summary>
            <param name="stream">Stream to write to.</param>
            <param name="values">Array of strings to write.</param>
            <param name="encoding">Encoding to use.</param>
            <remarks>Value can be readed with 
            <see cref="M:AM.IO.StreamUtility.ReadStringArray(System.IO.Stream,System.Text.Encoding)"/> or compatible method.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Either 
            <paramref name="stream"/> or <paramref name="values"/>
            is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException">An error during stream
            output happens.</exception>
            <seealso cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.String[])"/>
            <see cref="M:AM.IO.StreamUtility.ReadStringArray(System.IO.Stream,System.Text.Encoding)"/>
        </member>
        <member name="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.String[])">
            <summary>
            Writes the array of <see cref="T:System.String"/> to the <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">Stream to write to.</param>
            <param name="values">Array of strings to write.</param>
            <remarks>Value can be readed with 
            <see cref="M:AM.IO.StreamUtility.ReadStringArray(System.IO.Stream)"/> or compatible method.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Either 
            <paramref name="stream"/> or <paramref name="values"/>
            is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException">An error during stream
            output happens.</exception>
            <seealso cref="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.String[],System.Text.Encoding)"/>
            <seealso cref="M:AM.IO.StreamUtility.ReadStringArray(System.IO.Stream)"/>
        </member>
        <member name="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.Decimal)">
            <summary>
            Writes the <see cref="T:System.Decimal"/> to the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value.</param>
            <remarks>Value can be readed with <see cref="M:AM.IO.StreamUtility.ReadDecimal(System.IO.Stream)"/>
            or compatible method.</remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException">Error during stream output
            happens.</exception>
            <seealso cref="M:AM.IO.StreamUtility.ReadDecimal(System.IO.Stream)"/>
        </member>
        <member name="M:AM.IO.StreamUtility.Write(System.IO.Stream,System.DateTime)">
            <summary>
            Writes the <see cref="T:System.DateTime"/> to the specified 
            <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The stream.</param>
            <param name="value">The value.</param>
            <remarks>Value can be readed with <see cref="M:AM.IO.StreamUtility.ReadDateTime(System.IO.Stream)"/>
            or compatible method.</remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.</exception>
            <exception cref="T:System.IO.IOException">Error during stream input
            happens.</exception>
            <seealso cref="M:AM.IO.StreamUtility.ReadDateTime(System.IO.Stream)"/>
        </member>
        <member name="M:AM.IO.StreamUtility.NetworkToHost16(System.Byte[],System.Int32)">
            <summary>
            Network to host byte conversion.
            </summary>
        </member>
        <member name="M:AM.IO.StreamUtility.NetworkToHost32(System.Byte[],System.Int32)">
            <summary>
            Network to host byte conversion.
            </summary>
        </member>
        <member name="M:AM.IO.StreamUtility.NetworkToHost64(System.Byte[],System.Int32)">
            <summary>
            Network to host byte conversion.
            </summary>
            <remarks>IRBIS64-oriented!</remarks>
        </member>
        <member name="M:AM.IO.StreamUtility.HostToNetwork16(System.Byte[],System.Int32)">
            <summary>
            Host to network byte conversion.
            </summary>
        </member>
        <member name="M:AM.IO.StreamUtility.HostToNetwork32(System.Byte[],System.Int32)">
            <summary>
            Host to network byte conversion.
            </summary>
        </member>
        <member name="M:AM.IO.StreamUtility.HostToNetwork64(System.Byte[],System.Int32)">
            <summary>
            Host to network byte conversion.
            </summary>
            <remarks>IRBIS64-oriented!</remarks>
        </member>
        <member name="M:AM.IO.StreamUtility.ReadInt16Network(System.IO.Stream)">
            <summary>
            Read integer in network byte order.
            </summary>
        </member>
        <member name="M:AM.IO.StreamUtility.ReadInt16Host(System.IO.Stream)">
            <summary>
            Read integer in host byte order.
            </summary>
        </member>
        <member name="M:AM.IO.StreamUtility.ReadInt32Network(System.IO.Stream)">
            <summary>
            Read integer in network byte order.
            </summary>
        </member>
        <member name="M:AM.IO.StreamUtility.ReadInt32Host(System.IO.Stream)">
            <summary>
            Read integer in host byte order.
            </summary>
        </member>
        <member name="M:AM.IO.StreamUtility.ReadInt64Network(System.IO.Stream)">
            <summary>
            Read integer in network byte order.
            </summary>
        </member>
        <member name="M:AM.IO.StreamUtility.ReadInt64Host(System.IO.Stream)">
            <summary>
            Read integer in host byte order.
            </summary>
        </member>
        <member name="M:AM.IO.StreamUtility.ReadToEnd(System.IO.Stream)">
            <summary>
            Считывает из потока максимально возможное число байт.
            </summary>
            <remarks>Полезно для считывания из сети (сервер высылает
            ответ, после чего закрывает соединение).</remarks>
            <param name="stream">Поток для чтения.</param>
            <returns>Массив считанных байт.</returns>
        </member>
        <member name="M:AM.IO.StreamUtility.Lock(System.IO.FileStream,System.Int64,System.Int64)">
            <summary>
            Lock the file.
            </summary>
            <remarks>For WinMobile compatibility.</remarks>
        </member>
        <member name="M:AM.IO.StreamUtility.Unlock(System.IO.FileStream,System.Int64,System.Int64)">
            <summary>
            Unlock the file.
            </summary>
            <remarks>For WinMobile compatibility.</remarks>
        </member>
        <member name="M:AM.IO.StreamUtility.WriteInt16Network(System.IO.Stream,System.Int16)">
            <summary>
            Write 16-bit integer to the stream in network byte order.
            </summary>
        </member>
        <member name="M:AM.IO.StreamUtility.WriteInt32Network(System.IO.Stream,System.Int32)">
            <summary>
            Write 32-bit integer to the stream in network byte order.
            </summary>
        </member>
        <member name="M:AM.IO.StreamUtility.WriteInt64Network(System.IO.Stream,System.Int64)">
            <summary>
            Write 64-bit integer to the stream in network byte order.
            </summary>
        </member>
        <member name="T:AM.Net.SocketUtility">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.Net.SocketUtility.ResolveAddressIPv4(System.String)">
            <summary>
            Resolve IPv4 address
            </summary>
            <returns>Resolved IP address of the host.</returns>
        </member>
        <member name="M:AM.Net.SocketUtility.ResolveAddressIPv6(System.String)">
            <summary>
            Resolve IPv6 address
            </summary>
            <returns>Resolved IP address of the host.</returns>
        </member>
        <member name="M:AM.Net.SocketUtility.ReceiveExact(System.Net.Sockets.Socket,System.Int32)">
            <summary>
            Receive specified amount of data from the socket.
            </summary>
        </member>
        <member name="M:AM.Net.SocketUtility.ReceiveToEnd(System.Net.Sockets.Socket)">
            <summary>
            Read from the socket as many data as possible.
            </summary>
        </member>
        <member name="M:AM.Net.SocketUtility.ReceiveToEnd(System.Net.Sockets.Socket,System.IO.MemoryStream)">
            <summary>
            Read from the socket as many data as possible.
            </summary>
        </member>
        <member name="T:AM.ProcessorArchitecture">
            <summary>
            Processor architecture enumeration.
            </summary>
        </member>
        <member name="F:AM.ProcessorArchitecture.Unknown">
            <summary>
            Can't determine processor architecture.
            </summary>
        </member>
        <member name="F:AM.ProcessorArchitecture.X86">
            <summary>
            Intel x86 or compatible processor architecture.
            </summary>
        </member>
        <member name="F:AM.ProcessorArchitecture.X64">
            <summary>
            AMD x64 or compatible processor architecture.
            </summary>
        </member>
        <member name="F:AM.ProcessorArchitecture.IA64">
            <summary>
            Intel IA64 or compatible processor architecture.
            </summary>
        </member>
        <member name="F:AM.ProcessorArchitecture.ARM">
            <summary>
            ARM
            </summary>
        </member>
        <member name="F:AM.ProcessorArchitecture.ARM64">
            <summary>
            ARM64
            </summary>
        </member>
        <member name="T:AM.Reference`1">
            <summary>
            Generic reference to given object. Allows 
            to track object changes.
            </summary>
            <typeparam name="T">Type of object to reference.
            </typeparam>
        </member>
        <member name="M:AM.Reference`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Reference`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.Reference`1.ResetCounter">
            <summary>
            Reset access counter.
            </summary>
        </member>
        <member name="M:AM.Reference`1.op_Implicit(AM.Reference{`0})~`0">
            <summary>
            Implicit operators the specified reference.
            </summary>
        </member>
        <member name="M:AM.Reference`1.op_Implicit(`0)~AM.Reference{`0}">
            <summary>
            Implicit operators the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:AM.Reference`1.OnTargetChanged">
            <summary>
            Fired when target value changed.
            </summary>
        </member>
        <member name="M:AM.Reference`1.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="E:AM.Reference`1.TargetChanged">
            <summary>
            Fired when target value changed.
            </summary>
        </member>
        <member name="P:AM.Reference`1.Counter">
            <summary>
            Access counter.
            </summary>
        </member>
        <member name="P:AM.Reference`1.Target">
            <summary>
            Gets or sets the target.
            </summary>
        </member>
        <member name="T:AM.Reflection.PublicKeyTokens">
            <summary>
            Common public key tokens.
            </summary>
        </member>
        <member name="M:AM.Reflection.PublicKeyTokens.MicrosoftClr">
            <summary>
            Microsoft CLR public key token.
            </summary>
        </member>
        <member name="M:AM.Reflection.PublicKeyTokens.MicrosoftFX">
            <summary>
            Microsoft .Net FX public key token.
            </summary>
        </member>
        <member name="M:AM.Reflection.PublicKeyTokens.ArsMagna">
            <summary>
            Ars Magna project public key token.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AM.Reflection.PublicKeyTokens.Istu">
            <summary>
            ISTU public key token.
            </summary>
            <returns></returns>
        </member>
        <member name="T:AM.Reflection.TaggedClassAttribute">
            <summary>
            One can tag the class (e.g. for XML serialization).
            </summary>
        </member>
        <member name="M:AM.Reflection.TaggedClassAttribute.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:AM.Reflection.TaggedClassAttribute.Tag">
            <summary>
            Tag.
            </summary>
        </member>
        <member name="T:AM.Reflection.TaggedClassesCollector">
            <summary>
            Collects tagged classes in given assemblies.
            </summary>
        </member>
        <member name="M:AM.Reflection.TaggedClassesCollector.Collect(System.Reflection.Assembly,System.String)">
            <summary>
            Collect tagged class in given assembly.
            </summary>
            <param name="asm">Assembly to scan.</param>
            <param name="tagName">Tag.</param>
            <returns>Found classes.</returns>
        </member>
        <member name="T:AM.Runtime.InteropUtility">
            <summary>
            Set of interop helper routines.
            </summary>
        </member>
        <member name="M:AM.Runtime.InteropUtility.BufferToPtr(System.Byte[])">
            <summary>
            Copies buffer to unmanaged memory and returns
            pointer to it.
            </summary>
            <param name="buffer">The buffer to copy.</param>
            <returns>Pointer to copy in unmanaged memory.
            This pointer must be released by 
            <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)"/>.
            </returns>
        </member>
        <member name="M:AM.Runtime.InteropUtility.StructToPtr(System.Object)">
            <summary>
            Превращает структуру в массив байтов.
            </summary>
            <param name="structure"></param>
            <returns></returns>
            <remarks>Годится только для простых структур.</remarks>
        </member>
        <member name="M:AM.Runtime.InteropUtility.PtrToStruct(System.Byte[],System.Int32,System.Object)">
            <summary>
            Превращает массив байтов в структуру.
            </summary>
            <param name="block"></param>
            <param name="offset"></param>
            <param name="structure"></param>
            <remarks>Годится только для простых структур.</remarks>
        </member>
        <member name="M:AM.Runtime.InteropUtility.ByteArrayToStructure``1(System.Byte[])">
            <summary>
            Borrowed from StackOverflow:
            http://stackoverflow.com/questions/2871/reading-a-c-c-data-structure-in-c-sharp-from-a-byte-array
            </summary>
        </member>
        <member name="M:AM.Runtime.InteropUtility.GetBlock(System.IntPtr,System.Int32)">
            <summary>
            Get block of bytes from given pointer.
            </summary>
        </member>
        <member name="M:AM.Runtime.InteropUtility.DumpAddress(System.IO.TextWriter,System.IntPtr,System.Int32)">
            <summary>
            Dump bytes from specified pointer.
            </summary>
        </member>
        <member name="M:AM.Runtime.InteropUtility.GetZeroTerminatedString(System.IntPtr,System.Text.Encoding,System.Int32)">
            <summary>
            Get zero-ended string from specified pointer.
            </summary>
        </member>
        <member name="T:AM.Runtime.RuntimeUtility">
            <summary>
            Some useful methods for runtime.
            </summary>
        </member>
        <member name="P:AM.Runtime.RuntimeUtility.FrameworkLocation">
            <summary>
            Путь к файлам текущей версии Net Framework.
            </summary>
            <remarks>
            Типичная выдача:
            C:\WINDOWS\Microsoft.NET\Framework\v2.0.50215
            </remarks>
        </member>
        <member name="P:AM.Runtime.RuntimeUtility.ExecutableFileName">
            <summary>
            Имя исполняемого процесса.
            </summary>
        </member>
        <member name="T:AM.StringUtility">
            <summary>
            String manipulation routines.
            </summary>
        </member>
        <member name="F:AM.StringUtility.EmptyArray">
            <summary>
            Empty array of <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:AM.StringUtility.CCat(System.String,System.String)">
            <summary>
            Conditionally concatenates strings.
            </summary>
            <param name="to">Destination string.</param>
            <param name="what">Tail.</param>
            <returns>Resulting string.</returns>
        </member>
        <member name="M:AM.StringUtility.CCat(System.String,System.String,System.String)">
            <summary>
            Conditionally concatenates strings.
            </summary>
            <param name="to">Destination string.</param>
            <param name="end">Existing tail.</param>
            <param name="what">Tail to concat.</param>
            <returns>Resulting string.</returns>
        </member>
        <member name="M:AM.StringUtility.ChangeEncoding(System.Text.Encoding,System.Text.Encoding,System.String)">
            <summary>
            Changes the encoding of given string from one to other.
            </summary>
            <param name="fromEncoding">From encoding.</param>
            <param name="toEncoding">To encoding.</param>
            <param name="value">String to transcode.</param>
            <returns>Transcoded string</returns>
        </member>
        <member name="M:AM.StringUtility.CompareNoCase(System.String,System.String)">
            <summary>
            Сравнивает две строки с точностью до регистра символов.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AM.StringUtility.CompareNoCase(System.Char,System.Char)">
            <summary>
            Сравнивает два символа с точностью до регистра.
            </summary>
        </member>
        <member name="M:AM.StringUtility.ConsistOf(System.String,System.Char)">
            <summary>
            Состоит ли строка только из указанного символа.
            </summary>
        </member>
        <member name="M:AM.StringUtility.ConsistOf(System.String,System.Char[])">
            <summary>
            Состоит ли строка только из указанных символов.
            </summary>
        </member>
        <member name="M:AM.StringUtility.ConsistOfDigits(System.String,System.Int32,System.Int32)">
            <summary>
            Определяет, состоит ли строка только из цифр.
            </summary>
        </member>
        <member name="M:AM.StringUtility.ConsistOfDigits(System.String)">
            <summary>
            Определяет, состоит ли строка только из цифр.
            </summary>
        </member>
        <member name="M:AM.StringUtility.ContainsAnySymbol(System.String,System.Char[])">
            <summary>
            Содержит ли строка любой из перечисленных символов.
            </summary>
        </member>
        <member name="M:AM.StringUtility.ContainsCharacter(System.String,System.Char)">
            <summary>
            Determines whether the text contains specified character.
            </summary>
            <remarks>
            For portable library.
            </remarks>
        </member>
        <member name="M:AM.StringUtility.CountSubstrings(System.String,System.String)">
            <summary>
            Count of given substrings in the text.
            </summary>
        </member>
        <member name="M:AM.StringUtility.GetCaseInsensitiveComparer">
            <summary>
            Get case-insensitive string comparer.
            </summary>
        </member>
        <member name="M:AM.StringUtility.GetPositions(System.String,System.Char)">
            <summary>
            Get positions of the symbol.
            </summary>
        </member>
        <member name="M:AM.StringUtility.IfEmpty(System.String,System.String[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.StringUtility.IsBlank(System.String)">
            <summary>
            Check whether string is blank (consist of spaces) or empty.
            </summary>
            <param name="value">String.</param>
            <returns><c>true</c> if string is empty.</returns>
        </member>
        <member name="M:AM.StringUtility.IsDecimal(System.String)">
            <summary>
            Проверяет, можно ли трактовать строку как десятичное число.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AM.StringUtility.IsInteger(System.String)">
            <summary>
            Checks whether one can convert given string to 32-bit 
            signed integer value.
            </summary>
            <param name="value">String to check.</param>
            <returns><c>true</c> if the string can be converted;
            <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:AM.StringUtility.IsLongInteger(System.String)">
            <summary>
            Checks whether one can convert given string to 64-bit 
            signed integer value.
            </summary>
            <param name="value">String to check.</param>
            <returns><c>true</c> if the string can be converted;
            <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:AM.StringUtility.IsNumeric(System.String)">
            <summary>
            Проверяет, можно ли трактовать строку как число с плавающей 
            точкой (двойной точности).
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AM.StringUtility.IsShortInteger(System.String)">
            <summary>
            Checks whether one can convert given string to 16-bit 
            signed integer value.
            </summary>
            <param name="value">String to check.</param>
            <returns><c>true</c> if the string can be converted;
            <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:AM.StringUtility.Replicate(System.String,System.Int32)">
            <summary>
            Replicates given string.
            </summary>
            <param name="text">String to replicate.</param>
            <param name="times">How many times.</param>
            <returns>Replicated string.</returns>
            <remarks><c>Replicate ( null, AnyNumber )</c>
            yields <c>null</c>.
            </remarks>
        </member>
        <member name="M:AM.StringUtility.Random(System.Int32)">
            <summary>
            Creates random string with given length.
            </summary>
            <param name="length">Desired length of string</param>
        </member>
        <member name="M:AM.StringUtility.GetMatches(System.String,System.String)">
            <summary>
            Builds an array is regex matches.
            </summary>
            <param name="input">String to parse.</param>
            <param name="pattern">Regex.</param>
            <returns>Array of matches.</returns>
        </member>
        <member name="M:AM.StringUtility.GetWords(System.String)">
            <summary>
            Строит массив слов в строке.
            </summary>
            <param name="value">Разбираемая строка.</param>
            <returns>Массив слов.</returns>
        </member>
        <member name="M:AM.StringUtility.GetGroups(System.String,System.String)">
            <summary>
            Строит массив групп совпадающих символов по регулярному выражению.
            </summary>
            <param name="input">Разбираемая строка.</param>
            <param name="pattern">Регулярное выражение.</param>
            <returns>Массив групп.</returns>
        </member>
        <member name="M:AM.StringUtility.SameString(System.String,System.String)">
            <summary>
            Сравнивает строки с точностью до регистра.
            </summary>
            <param name="one">Первая строка.</param>
            <param name="two">Вторая строка.</param>
            <returns>Строки совпадают с точностью до регистра.</returns>
        </member>
        <member name="M:AM.StringUtility.SameStringSensitive(System.String,System.String)">
            <summary>
            Сравнивает строки.
            </summary>
        </member>
        <member name="M:AM.StringUtility.Sparse(System.String)">
            <summary>
            Sparse the string.
            </summary>
            <param name="input">Input string.</param>
            <returns>Sparse string.</returns>
        </member>
        <member name="M:AM.StringUtility.SplitFirst(System.String,System.Char)">
            <summary>
            Разбивает строку по указанному разделителю.
            </summary>
        </member>
        <member name="M:AM.StringUtility.ToVisibleString(System.String)">
            <summary>
            Превращает строку в видимую.
            Пример: "(null)".
            </summary>
        </member>
        <member name="M:AM.StringUtility.Unescape(System.String)">
            <summary>
            Преобразует строку, содержащую escape-последовательности, 
            к нормальному виду.
            </summary>
            <param name="value">Исходная строка.</param>
            <returns>Результирующая строка.</returns>
        </member>
        <member name="M:AM.StringUtility.EmptyToNull(System.String)">
            <summary>
            Converts empty string to <c>null</c>.
            </summary>
        </member>
        <member name="M:AM.StringUtility.FirstChar(System.String)">
            <summary>
            Gets the first char of the text.
            </summary>
        </member>
        <member name="M:AM.StringUtility.LastChar(System.String)">
            <summary>
            Gets the last char of the text.
            </summary>
        </member>
        <member name="M:AM.StringUtility.Unquote(System.String)">
            <summary>
            Trims matching open and close quotes from the string.
            </summary>
            <remarks>
            <code>Unquote("(text)");</code>
            </remarks>
        </member>
        <member name="M:AM.StringUtility.Unquote(System.String,System.Char)">
            <summary>
            Trims matching open and close quotes from the string.
            </summary>
            <remarks>
            <code>Unquote("(text)", '"');</code>
            </remarks>
        </member>
        <member name="M:AM.StringUtility.Unquote(System.String,System.Char,System.Char)">
            <summary>
            Trims matching open and close quotes from the string.
            </summary>
            <remarks>
            <code>Unquote("(text)", '(', ')');</code>
            </remarks>
        </member>
        <member name="M:AM.StringUtility.OneOf(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Проверяет, является ли искомая строка одной
            из перечисленных. Регистр символов не учитывается.
            </summary>
            <param name="one">Искомая строка.</param>
            <param name="many">Источник проверяемых строк.</param>
            <returns>Найдена ли искомая строка.</returns>
        </member>
        <member name="M:AM.StringUtility.OneOf(System.String,System.String[])">
            <summary>
            Проверяет, является ли искомая строка одной
            из перечисленных. Регистр символов не учитывается.
            </summary>
            <param name="one">Искомая строка.</param>
            <param name="many">Массив проверяемых строк.</param>
            <returns>Найдена ли искомая строка.</returns>
        </member>
        <member name="M:AM.StringUtility.OneOf(System.Char,System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Проверяет, является ли искомый символ одним
            из перечисленных. Регистр символов не учитывается.
            </summary>
            <param name="one">Искомый символ.</param>
            <param name="many">Массив проверяемых символов.</param>
            <returns>Найден ли искомый символ.</returns>
        </member>
        <member name="M:AM.StringUtility.OneOf(System.Char,System.Char[])">
            <summary>
            Проверяет, является ли искомый символ одним
            из перечисленных. Регистр символов не учитывается.
            </summary>
            <param name="one">Искомый символ.</param>
            <param name="many">Массив проверяемых символов.</param>
            <returns>Найден ли искомый символ.</returns>
        </member>
        <member name="M:AM.StringUtility.SameChar(System.Char,System.Char)">
            <summary>
            Сравнивает символы с точностью до регистра.
            </summary>
            <param name="one">Первый символ.</param>
            <param name="two">Второй символ.</param>
            <returns>Символы совпадают с точностью до регистра.</returns>
        </member>
        <member name="M:AM.StringUtility.SafeCompare(System.String,System.String)">
            <summary>
            Сравнение строк.
            </summary>
        </member>
        <member name="M:AM.StringUtility.SafeCompare(System.String,System.String[])">
            <summary>
            Сравнение строки с массивом.
            </summary>
        </member>
        <member name="M:AM.StringUtility.SafeContains(System.String,System.String)">
            <summary>
            Поиск подстроки.
            </summary>
        </member>
        <member name="M:AM.StringUtility.SafeContains(System.String,System.String[])">
            <summary>
            Поиск подстроки.
            </summary>
        </member>
        <member name="M:AM.StringUtility.SafeStarts(System.String,System.String)">
            <summary>
            Поиск начала строки.
            </summary>
        </member>
        <member name="M:AM.StringUtility.SafeSubstring(System.String,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.StringUtility.SplitLines(System.String)">
            <summary>
            Разбивка текста на отдельные строки.
            </summary>
            <remarks>Пустые строки не удаляются.</remarks>
            <param name="text">Текст для разбиения.</param>
            <returns>Массив строк.</returns>
        </member>
        <member name="M:AM.StringUtility.MergeLines(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Склейка строк в сплошной текст, разделенный переводами строки.
            </summary>
            <param name="lines">Строки для склейки.</param>
            <returns>Склеенный текст.</returns>
        </member>
        <member name="M:AM.StringUtility.ContainsWhitespace(System.String)">
            <summary>
            Строка содержит пробельные символы?
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:AM.StringUtility.IsValidIdentifier(System.String)">
            <summary>
            Determines whether the given string
            represents valid identifier or not.
            </summary>
        </member>
        <member name="M:AM.StringUtility.SplitString(System.String,System.Func{System.Char,System.Boolean})">
            <summary>
            Split the string using the given function.
            </summary>
        </member>
        <member name="M:AM.StringUtility.Join(System.String,System.Collections.IEnumerable)">
            <summary>
            Join string representations of the given objects.
            </summary>
        </member>
        <member name="M:AM.StringUtility.Wrap(System.String,System.String,System.String)">
            <summary>
            Wrap the string with given prefix and suffix
            </summary>
        </member>
        <member name="M:AM.StringUtility.Mangle(System.String,System.Char,System.Char[])">
            <summary>
            Mangle given text with the escape character.
            </summary>
        </member>
        <member name="M:AM.StringUtility.IsUrlSafeChar(System.Char)">
            <summary>
            Is URL-safe char?
            </summary>
            <remarks>Set of safe chars, from RFC 1738.4 minus '+'</remarks>
        </member>
        <member name="M:AM.StringUtility.UrlDecode(System.String,System.Text.Encoding)">
            <summary>
            Decode string.
            </summary>
        </member>
        <member name="M:AM.StringUtility.UrlEncode(System.String,System.Text.Encoding)">
            <summary>
            Encode string.
            </summary>
        </member>
        <member name="M:AM.StringUtility.ReplaceControlCharacters(System.String,System.Char)">
            <summary>
            Replace control characters in the text.
            </summary>
        </member>
        <member name="M:AM.StringUtility.ReplaceControlCharacters(System.String)">
            <summary>
            Replace control characters in the text.
            </summary>
        </member>
        <member name="M:AM.StringUtility.TrimLines(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Trim lines.
            </summary>
        </member>
        <member name="M:AM.StringUtility.TrimLines(System.Collections.Generic.IEnumerable{System.String},System.Char[])">
            <summary>
            Trim lines.
            </summary>
        </member>
        <member name="M:AM.StringUtility.SplitString(System.String,System.String)">
            <summary>
            Split the string.
            </summary>
            <remarks>For compatibility with WinMobile
            </remarks>
        </member>
        <member name="M:AM.StringUtility.SplitString(System.String,System.String[])">
            <summary>
            Split the string.
            </summary>
            <remarks>For compatibility with WinMobile
            </remarks>
        </member>
        <member name="M:AM.StringUtility.SplitString(System.String,System.Char[],System.Int32)">
            <summary>
            Split the string.
            </summary>
            <remarks>For compatibility with WinMobile.</remarks>
        </member>
        <member name="M:AM.StringUtility.ToUpperInvariant(System.String)">
            <summary>
            Convert string to upper case.
            </summary>
            <remarks>For WinMobile compatibility.</remarks>
        </member>
        <member name="M:AM.StringUtility.ToLowerInvariant(System.String)">
            <summary>
            Convert string to lower case.
            </summary>
            <remarks>For WinMobile compatibility.</remarks>
        </member>
        <member name="M:AM.StringUtility.Clear(System.Text.StringBuilder)">
            <summary>
            Clear the <see cref="T:System.Text.StringBuilder"/>.
            </summary>
        </member>
        <member name="T:AM.Text.CharacterClass">
            <summary>
            Класс символов Unicode.
            </summary>
        </member>
        <member name="F:AM.Text.CharacterClass.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:AM.Text.CharacterClass.ControlCharacter">
            <summary>
            Control character.
            </summary>
        </member>
        <member name="F:AM.Text.CharacterClass.Digit">
            <summary>
            Digit.
            </summary>
        </member>
        <member name="F:AM.Text.CharacterClass.BasicLatin">
            <summary>
            Basic Latin.
            </summary>
        </member>
        <member name="F:AM.Text.CharacterClass.Cyrillic">
            <summary>
            Cyrillic.
            </summary>
        </member>
        <member name="T:AM.Text.CharacterClassifier">
            <summary>
            Классы символов Unicode.
            </summary>
        </member>
        <member name="M:AM.Text.CharacterClassifier.DetectCharacterClasses(System.String)">
            <summary>
            Выявление классов символов.
            </summary>
        </member>
        <member name="M:AM.Text.CharacterClassifier.IsBothCyrillicAndLatin(AM.Text.CharacterClass)">
            <summary>
            Смешаны ли в тексте латиница с кириллицей?
            </summary>
        </member>
        <member name="T:AM.DateTimeUtility">
            <summary>
            Set of date/time manipulation routines.
            </summary>
        </member>
        <member name="M:AM.DateTimeUtility.MaxDate(System.DateTime,System.DateTime[])">
            <summary>
            Searches maximal date/time from given ones.
            </summary>
            <param name="first">First date/time.</param>
            <param name="other">Other dates/times.</param>
            <returns>Maximum.</returns>
        </member>
        <member name="M:AM.DateTimeUtility.MinDate(System.DateTime,System.DateTime[])">
            <summary>
            Searches minimal date/time from given ones.
            </summary>
            <param name="first">First date/time.</param>
            <param name="other">Other dates/times.</param>
            <returns>Minimum.</returns>
        </member>
        <member name="M:AM.DateTimeUtility.Between(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.DateTimeUtility.ToJulianDate(System.DateTime)">
            <summary>
            Convert date to Julian calendar.
            </summary>
        </member>
        <member name="M:AM.DateTimeUtility.ToJulian(System.DateTime)">
            <summary>
            Convert to Julian date.
            </summary>
        </member>
        <member name="M:AM.DateTimeUtility.FromJulian(System.Int64,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.DateTimeUtility.FromJulianDate(System.DateTime)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.DateTimeUtility.ToUnixTime(System.DateTime)">
            <summary>
            Переводит указанную дату в формат Unix.
            </summary>
        </member>
        <member name="P:AM.DateTimeUtility.NextMonth">
            <summary>
            Gets the date of next month first day.
            </summary>
            <value>Next month first day.</value>
        </member>
        <member name="P:AM.DateTimeUtility.NextYear">
            <summary>
            Gets the date of next year first day.
            </summary>
            <value>Next year first day.</value>
        </member>
        <member name="P:AM.DateTimeUtility.PreviousMonth">
            <summary>
            Gets the date of previous month first day.
            </summary>
            <value>Previous month first day.</value>
        </member>
        <member name="P:AM.DateTimeUtility.PreviousYear">
            <summary>
            Gets the date of previous year first day.
            </summary>
            <value>Previous year first day.</value>
        </member>
        <member name="P:AM.DateTimeUtility.ThisMonth">
            <summary>
            Gets the date of current month first day.
            </summary>
            <value>Current month first day.</value>
        </member>
        <member name="P:AM.DateTimeUtility.ThisYear">
            <summary>
            Gets the date of current year first day.
            </summary>
            <value>Current year first day.</value>
        </member>
        <member name="P:AM.DateTimeUtility.Tomorrow">
            <summary>
            Gets the date for tomorrow.
            </summary>
            <value>Tomorrow date.</value>
        </member>
        <member name="P:AM.DateTimeUtility.Yesterday">
            <summary>
            Gets the for yesterday.
            </summary>
            <value>Yesterday date.</value>
        </member>
        <member name="T:AM.NumericUtility">
            <summary>
            Helper methods for numeric values.
            </summary>
        </member>
        <member name="M:AM.NumericUtility.CompressRange(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Преобразование набора целых чисел в строковое представление,
            учитывающее возможное наличие цепочек последовательных чисел,
            которые форматируются как диапазоны.
            </summary>
            <param name="n">Источник целых чисел.</param>
            <remarks>Источник должен поддерживать многократное считывание.
            Числа предполагаются предварительно упорядоченные. Повторения чисел
            не допускаются. Пропуски в последовательностях допустимы.
            Числа допускаются только неотрицательные.
            </remarks>
            <returns>Строковое представление набора чисел.</returns>
        </member>
        <member name="M:AM.NumericUtility.FormatRange(System.Int32,System.Int32)">
            <summary>
            Форматирование диапазона целых чисел.
            </summary>
            <remarks>Границы диапазона могут совпадать, однако
            левая не должна превышать правую.</remarks>
            <param name="first">Левая граница диапазона.</param>
            <param name="last">Правая граница диапазона.</param>
            <returns>Строковое представление диапазона.</returns>
        </member>
        <member name="M:AM.NumericUtility.IsPositiveInteger(System.String)">
            <summary>
            Представляет ли строка положительное целое число.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:AM.NumericUtility.ParseInt32(System.String)">
            <summary>
            Parse integer in standard manner.
            </summary>
        </member>
        <member name="M:AM.NumericUtility.SafeToDecimal(System.String,System.Decimal)">
            <summary>
            Безопасное преобразование строки
            в число с фиксированной точкой.
            </summary>
        </member>
        <member name="M:AM.NumericUtility.SafeToInt32(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Безопасное преобразование строки в целое.
            </summary>
        </member>
        <member name="M:AM.NumericUtility.SafeToInt32(System.String,System.Int32)">
            <summary>
            Безопасное преобразование строки в целое.
            </summary>
        </member>
        <member name="M:AM.NumericUtility.SafeToInt32(System.String)">
            <summary>
            Безопасное преобразование строки в целое.
            </summary>
        </member>
        <member name="M:AM.NumericUtility.ToInvariantString(System.Int32)">
            <summary>
            Преобразование числа в строку по правилам инвариантной 
            (не зависящей от региона) культуры.
            </summary>
            <param name="value">Число для преобразования.</param>
            <returns>Строковое представление числа.</returns>
        </member>
        <member name="M:AM.NumericUtility.ToInvariantString(System.Double)">
            <summary>
            Преобразование числа в строку по правилам инвариантной 
            (не зависящей от региона) культуры.
            </summary>
            <param name="value">Число для преобразования.</param>
            <returns>Строковое представление числа.</returns>
        </member>
        <member name="M:AM.NumericUtility.ToInvariantString(System.Double,System.String)">
            <summary>
            Convert double to string using InvariantCulture.
            </summary>
        </member>
        <member name="M:AM.NumericUtility.ToInvariantString(System.Decimal)">
            <summary>
            Преобразование числа в строку по правилам инвариантной 
            (не зависящей от региона) культуры.
            </summary>
            <param name="value">Число для преобразования.</param>
            <returns>Строковое представление числа.</returns>
        </member>
        <member name="M:AM.NumericUtility.ToInvariantString(System.Decimal,System.String)">
            <summary>
            Convert decimal value to string using InvariantCulture.
            </summary>
        </member>
        <member name="M:AM.NumericUtility.ToInvariantString(System.Int64)">
            <summary>
            Преобразование числа в строку по правилам инвариантной 
            (не зависящей от региона) культуры.
            </summary>
            <param name="value">Число для преобразования.</param>
            <returns>Строковое представление числа.</returns>
        </member>
        <member name="M:AM.NumericUtility.ToInvariantString(System.Char)">
            <summary>
            Convert to <see cref="T:System.String"/>
            using <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AM.NumericUtility.TryParseDecimal(System.String,System.Decimal@)">
            <summary>
            Try parse decimal value in standard manner.
            </summary>
        </member>
        <member name="M:AM.NumericUtility.TryParseDouble(System.String,System.Double@)">
            <summary>
            Try parse double precision value in standard manner.
            </summary>
        </member>
        <member name="M:AM.NumericUtility.TryParseFloat(System.String,System.Single@)">
            <summary>
            Try parse single precision value in standard manner.
            </summary>
        </member>
        <member name="M:AM.NumericUtility.TryParseInt16(System.String,System.Int16@)">
            <summary>
            Try parse integer in standard manner.
            </summary>
        </member>
        <member name="M:AM.NumericUtility.TryParseUInt16(System.String,System.UInt16@)">
            <summary>
            Try to parse unsigned integer in standard manner.
            </summary>
        </member>
        <member name="M:AM.NumericUtility.TryParseInt32(System.String,System.Int32@)">
            <summary>
            Try parse integer in standard manner.
            </summary>
        </member>
        <member name="M:AM.NumericUtility.TryParseUInt32(System.String,System.UInt32@)">
            <summary>
            Try to parse unsigned integer in standard manner.
            </summary>
        </member>
        <member name="M:AM.NumericUtility.TryParseInt64(System.String,System.Int64@)">
            <summary>
            Try parse integer in standard manner.
            </summary>
        </member>
        <member name="M:AM.NumericUtility.TryParseUInt64(System.String,System.UInt64@)">
            <summary>
            Try to parse unsigned integer in standard manner.
            </summary>
        </member>
        <member name="T:AM.Text.EncodingUtility">
            <summary>
            Text encoding related routines.
            </summary>
        </member>
        <member name="M:AM.Text.EncodingUtility.#cctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="M:AM.Text.EncodingUtility.ChangeEncoding(System.String,System.Text.Encoding,System.Text.Encoding)">
            <summary>
            Change encoding of the text.
            </summary>
        </member>
        <member name="M:AM.Text.EncodingUtility.DetermineTextEncoding(System.Byte[])">
            <summary>
            Determine text encoding.
            </summary>
        </member>
        <member name="M:AM.Text.EncodingUtility.DetermineTextEncoding(System.IO.Stream)">
            <summary>
            Determine text encoding.
            </summary>
        </member>
        <member name="M:AM.Text.EncodingUtility.DetermineTextEncoding(System.String)">
            <summary>
            Determines the text file encoding.
            </summary>
        </member>
        <member name="M:AM.Text.EncodingUtility.GetString(System.Text.Encoding,System.Byte[])">
            <summary>
            Get string from bytes.
            </summary>
            <remarks>
            Reduce if/else preprocessing.
            </remarks>
        </member>
        <member name="P:AM.Text.EncodingUtility.DefaultEncoding">
            <summary>
            Default encoding.
            </summary>
            <remarks>
            Reduce if/else preprocessing.
            </remarks>
        </member>
        <member name="P:AM.Text.EncodingUtility.MaxPreambleLength">
            <summary>
            Maximum preamble length.
            </summary>
        </member>
        <member name="P:AM.Text.EncodingUtility.Windows1251">
            <summary>
            Gets the Windows-1251 (cyrillic) <see cref="T:System.Text.Encoding"/>.
            </summary>
        </member>
        <member name="T:AM.Text.TextWithEncoding">
            <summary>
            Text with given encoding.
            </summary>
        </member>
        <member name="M:AM.Text.TextWithEncoding.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:AM.Text.TextWithEncoding.#ctor(System.String)">
            <summary>
            Constructor. UTF-8 encoded text.
            </summary>
        </member>
        <member name="M:AM.Text.TextWithEncoding.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor. UTF-8 or ANSI encoded text.
            </summary>
        </member>
        <member name="M:AM.Text.TextWithEncoding.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Constructor. Explicitly specified encoding.
            </summary>
        </member>
        <member name="M:AM.Text.TextWithEncoding.ToBytes">
            <summary>
            Convert text to byte representation.
            </summary>
        </member>
        <member name="M:AM.Text.TextWithEncoding.op_Implicit(System.String)~AM.Text.TextWithEncoding">
            <summary>
            Implicit conversion.
            </summary>
        </member>
        <member name="M:AM.Text.TextWithEncoding.CompareTo(AM.Text.TextWithEncoding)">
            <summary>
            Compares the current object with another
            object of the same type.
            </summary>
            <param name="other">An object to compare
            with this object.</param>
            <returns>A value that indicates
            the relative order of the objects being compared.
            The return value has the following meanings:
            Value Meaning Less than zero This object is less
            than the <paramref name="other" /> parameter.
            Zero This object is equal to <paramref name="other" />.
            Greater than zero This object is greater than
            <paramref name="other" />.</returns>
        </member>
        <member name="M:AM.Text.TextWithEncoding.op_Equality(AM.Text.TextWithEncoding,AM.Text.TextWithEncoding)">
            <summary>
            Compare two texts.
            </summary>
        </member>
        <member name="M:AM.Text.TextWithEncoding.op_Inequality(AM.Text.TextWithEncoding,AM.Text.TextWithEncoding)">
            <summary>
            Compare two texts.
            </summary>
        </member>
        <member name="M:AM.Text.TextWithEncoding.Equals(AM.Text.TextWithEncoding)">
            <summary>
            Determines whether the specified
            <see cref="T:AM.Text.TextWithEncoding"/> is equal to this instance.
            </summary>
        </member>
        <member name="M:AM.Text.TextWithEncoding.Equals(System.Object)">
            <summary>
            Determines whether the specified
            <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with
            the current object.</param>
            <returns><c>true</c> if the specified
            <see cref="T:System.Object"/> is equal to this instance;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:AM.Text.TextWithEncoding.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:AM.Text.TextWithEncoding.ToString">
            <inheritdoc/>
        </member>
        <member name="P:AM.Text.TextWithEncoding.Text">
            <summary>
            Text itself.
            </summary>
        </member>
        <member name="P:AM.Text.TextWithEncoding.Encoding">
            <summary>
            Encoding.
            </summary>
            <remarks><c>null</c> treated as default encoding.</remarks>
        </member>
        <member name="T:AM.TypeUtility">
            <summary>
            Сборник полезных методов, работающих с информацией о типах.
            </summary>
        </member>
        <member name="M:AM.TypeUtility.GetAssembly(System.Type)">
            <summary>
            Get <see cref="T:System.Reflection.Assembly"/> for the type.
            </summary>
        </member>
        <member name="M:AM.TypeUtility.GetBaseType(System.Type)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.TypeUtility.GetGenericType(System.String,System.String[])">
            <summary>
            Получение закрытого generic-типа, параметризованного
            указанными типами.
            </summary>
        </member>
        <member name="M:AM.TypeUtility.GetFields(System.Type)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.TypeUtility.GetInterface(System.Type,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.TypeUtility.GetType``1(``0)">
            <summary>
            Gets type of the argument.
            </summary>
        </member>
        <member name="M:AM.TypeUtility.IsAbstract(System.Type)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.TypeUtility.IsClass(System.Type)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.TypeUtility.IsComObject(System.Type)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.TypeUtility.IsEnum(System.Type)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.TypeUtility.IsGenericType(System.Type)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.TypeUtility.IsInterface(System.Type)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.TypeUtility.IsPrimitive(System.Type)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.TypeUtility.IsPublic(System.Type)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.TypeUtility.IsSealed(System.Type)">
            <summary>
            
            </summary>
        </member>
        <member name="M:AM.TypeUtility.IsValueType(System.Type)">
            <summary>
            
            </summary>
        </member>
        <member name="T:AM.Xml.XmlNamespaces">
            <summary>
            Some well known XML namespaces.
            </summary>
        </member>
        <member name="F:AM.Xml.XmlNamespaces.Msbuild">
            <summary>
            Msbuild.exe
            </summary>
        </member>
        <member name="F:AM.Xml.XmlNamespaces.Msdata">
            <summary>
            Msdata.
            </summary>
        </member>
        <member name="F:AM.Xml.XmlNamespaces.Msxsl">
            <summary>
            MS XSL.
            </summary>
        </member>
        <member name="F:AM.Xml.XmlNamespaces.Soap">
            <summary>
            SOAP.
            </summary>
        </member>
        <member name="F:AM.Xml.XmlNamespaces.Wsdl">
            <summary>
            WSDL.
            </summary>
        </member>
        <member name="F:AM.Xml.XmlNamespaces.Wsh">
            <summary>
            WSH.
            </summary>
        </member>
        <member name="F:AM.Xml.XmlNamespaces.Xhtml">
            <summary>
            XHTML.
            </summary>
        </member>
        <member name="F:AM.Xml.XmlNamespaces.Xlink">
            <summary>
            XLINK.
            </summary>
        </member>
        <member name="F:AM.Xml.XmlNamespaces.Xsi">
            <summary>
            XSI.
            </summary>
        </member>
        <member name="F:AM.Xml.XmlNamespaces.Xsd">
            <summary>
            XSD.
            </summary>
        </member>
        <member name="F:AM.Xml.XmlNamespaces.Xsl">
            <summary>
            XSL.
            </summary>
        </member>
        <member name="T:AM.Xml.XmlUtility">
            <summary>
            Collection of useful routines for XML manipulations.
            </summary>
        </member>
        <member name="M:AM.Xml.XmlUtility.ClearCache">
            <summary>
            Clear cached serializers.
            </summary>
        </member>
        <member name="M:AM.Xml.XmlUtility.Deserialize(System.String,System.Xml.Serialization.XmlSerializer)">
            <summary>
            Deserialize object from file.
            </summary>
            <param name="fileName">File name.</param>
            <param name="serializer">Serializer.</param>
            <returns>Object.</returns>
        </member>
        <member name="M:AM.Xml.XmlUtility.Deserialize``1(System.String)">
            <summary>
            Deserialize object from file.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:AM.Xml.XmlUtility.DeserializeString``1(System.String)">
            <summary>
            Deserialize the string.
            </summary>
        </member>
        <member name="M:AM.Xml.XmlUtility.GetSerializer(System.Reflection.Assembly,System.String,System.Type)">
            <summary>
            Get serializer for tagged classes.
            </summary>
            <param name="assembly">Assembly to scan.</param>
            <param name="tagName">Tag.</param>
            <param name="mainType">Main type.</param>
            <returns>Serializer.</returns>
        </member>
        <member name="M:AM.Xml.XmlUtility.Serialize(System.String,System.Xml.Serialization.XmlSerializer,System.Object)">
            <summary>
            Serialize object to file.
            </summary>
            <param name="fileName">File name.</param>
            <param name="serializer">Serializer.</param>
            <param name="obj">Object.</param>
        </member>
        <member name="M:AM.Xml.XmlUtility.Serialize``1(System.String,``0)">
            <summary>
            Serialize object to file.
            </summary>
        </member>
        <member name="M:AM.Xml.XmlUtility.Dump(System.Xml.XmlReader)">
            <summary>
            Dumps the specified reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:AM.Xml.XmlUtility.ReadTrimmedString(System.Xml.XmlReader)">
            <summary>
            Reads the trimmed string.
            </summary>
            <param name="reader">The reader.</param>
            <returns></returns>
        </member>
        <member name="M:AM.Xml.XmlUtility.GetBoolean(System.Xml.XmlReader,System.String)">
            <summary>
            Gets the boolean.
            </summary>
            <param name="reader">The reader.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:AM.Xml.XmlUtility.GetInt32(System.Xml.XmlReader,System.String)">
            <summary>
            Gets the int32.
            </summary>
            <param name="reader">The reader.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:AM.Xml.XmlUtility.GetEnum``1(System.Xml.XmlReader,System.String)">
            <summary>
            Gets the enum.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader">The reader.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="T:Compatibility.DummyClass">
            <summary>
            Dummy class to make compiler happy.
            </summary>
        </member>
        <member name="M:Compatibility.DummyClass.Hello">
            <summary>
            Returns hello string.
            </summary>
        </member>
        <member name="T:Compatibility.StringBuilderCompatibility">
            <summary>
            Compatibility with <see cref="T:System.Text.StringBuilder"/>.
            </summary>
        </member>
        <member name="M:Compatibility.StringBuilderCompatibility.Clear(System.Text.StringBuilder)">
            <summary>
            Removes all characters from the given
            <see cref="T:System.Text.StringBuilder"/> instance.
            </summary>
        </member>
        <member name="T:AM.RetryManager">
            <summary>
            Retry execution of function for specified number of times.
            </summary>
        </member>
        <member name="M:AM.RetryManager.#ctor(System.Int32)">
            <summary>
            Construction.
            </summary>
        </member>
        <member name="M:AM.RetryManager.#ctor(System.Int32,System.Func{System.Exception,System.Boolean})">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:AM.RetryManager.Try(System.Action)">
            <summary>
            Try to execute specified function.
            </summary>
        </member>
        <member name="M:AM.RetryManager.Try``1(System.Action{``0},``0)">
            <summary>
            Try to execute specified function.
            </summary>
        </member>
        <member name="M:AM.RetryManager.Try``2(System.Action{``0,``1},``0,``1)">
            <summary>
            Try to execute specified function.
            </summary>
        </member>
        <member name="M:AM.RetryManager.Try``3(System.Action{``0,``1,``2},``0,``1,``2)">
            <summary>
            Try to execute specified function.
            </summary>
        </member>
        <member name="M:AM.RetryManager.Try``1(System.Func{``0})">
            <summary>
            Try to execute specified function.
            </summary>
        </member>
        <member name="M:AM.RetryManager.Try``2(System.Func{``0,``1},``0)">
            <summary>
            Try to execute specified function.
            </summary>
        </member>
        <member name="M:AM.RetryManager.Try``3(System.Func{``0,``1,``2},``0,``1)">
            <summary>
            Try to execute specified function.
            </summary>
        </member>
        <member name="M:AM.RetryManager.Try``4(System.Func{``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            Try to execute specified function.
            </summary>
        </member>
        <member name="E:AM.RetryManager.ExceptionOccurs">
            <summary>
            Raised when exception occurs.
            </summary>
        </member>
        <member name="E:AM.RetryManager.Resolved">
            <summary>
            Raised when exception is resolved.
            </summary>
        </member>
        <member name="P:AM.RetryManager.DelayInterval">
            <summary>
            Delay interval, milliseconds.
            </summary>
        </member>
        <member name="P:AM.RetryManager.RetryLimit">
            <summary>
            Retry count.
            </summary>
        </member>
    </members>
</doc>
